
scratchINEMO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000b50  080001e4  080001e4  000081e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .init_array   00000004  08000d34  08000d34  00008d34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .fini_array   00000004  08000d38  08000d38  00008d38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          00000424  20000000  08000d3c  00010000  2**2
                  ALLOC
  5 ._user_heap_stack 00000200  20000424  08000d3c  00010424  2**0
                  ALLOC
  6 .ARM.attributes 00000029  00000000  00000000  00008d3c  2**0
                  CONTENTS, READONLY
  7 .debug_info   00004d89  00000000  00000000  00008d65  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000dcd  00000000  00000000  0000daee  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000688  00000000  00000000  0000e8c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000005d0  00000000  00000000  0000ef48  2**3
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000229c  00000000  00000000  0000f518  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00001fcc  00000000  00000000  000117b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .comment      00000082  00000000  00000000  00013780  2**0
                  CONTENTS, READONLY
 14 .debug_frame  00001398  00000000  00000000  00013804  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000000 	.word	0x20000000
 8000200:	00000000 	.word	0x00000000
 8000204:	08000d1c 	.word	0x08000d1c

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	08000d1c 	.word	0x08000d1c
 8000220:	20000004 	.word	0x20000004

08000224 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000228:	4b15      	ldr	r3, [pc, #84]	; (8000280 <SystemInit+0x5c>)
 800022a:	4a15      	ldr	r2, [pc, #84]	; (8000280 <SystemInit+0x5c>)
 800022c:	6812      	ldr	r2, [r2, #0]
 800022e:	f042 0201 	orr.w	r2, r2, #1
 8000232:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8000234:	4a12      	ldr	r2, [pc, #72]	; (8000280 <SystemInit+0x5c>)
 8000236:	4b12      	ldr	r3, [pc, #72]	; (8000280 <SystemInit+0x5c>)
 8000238:	6859      	ldr	r1, [r3, #4]
 800023a:	4b12      	ldr	r3, [pc, #72]	; (8000284 <SystemInit+0x60>)
 800023c:	400b      	ands	r3, r1
 800023e:	6053      	str	r3, [r2, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000240:	4a0f      	ldr	r2, [pc, #60]	; (8000280 <SystemInit+0x5c>)
 8000242:	4b0f      	ldr	r3, [pc, #60]	; (8000280 <SystemInit+0x5c>)
 8000244:	681b      	ldr	r3, [r3, #0]
 8000246:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800024a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800024e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000250:	4b0b      	ldr	r3, [pc, #44]	; (8000280 <SystemInit+0x5c>)
 8000252:	4a0b      	ldr	r2, [pc, #44]	; (8000280 <SystemInit+0x5c>)
 8000254:	6812      	ldr	r2, [r2, #0]
 8000256:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800025a:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 800025c:	4b08      	ldr	r3, [pc, #32]	; (8000280 <SystemInit+0x5c>)
 800025e:	4a08      	ldr	r2, [pc, #32]	; (8000280 <SystemInit+0x5c>)
 8000260:	6852      	ldr	r2, [r2, #4]
 8000262:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8000266:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 8000268:	4b05      	ldr	r3, [pc, #20]	; (8000280 <SystemInit+0x5c>)
 800026a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800026e:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
 8000270:	f000 f80c 	bl	800028c <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000274:	4b04      	ldr	r3, [pc, #16]	; (8000288 <SystemInit+0x64>)
 8000276:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800027a:	609a      	str	r2, [r3, #8]
#endif 
}
 800027c:	bd80      	pop	{r7, pc}
 800027e:	bf00      	nop
 8000280:	40021000 	.word	0x40021000
 8000284:	f8ff0000 	.word	0xf8ff0000
 8000288:	e000ed00 	.word	0xe000ed00

0800028c <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 800028c:	b580      	push	{r7, lr}
 800028e:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();  
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
 8000290:	f000 f802 	bl	8000298 <SetSysClockTo72>
#endif
 
 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */ 
}
 8000294:	bd80      	pop	{r7, pc}
 8000296:	bf00      	nop

08000298 <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
 8000298:	b480      	push	{r7}
 800029a:	b083      	sub	sp, #12
 800029c:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 800029e:	2300      	movs	r3, #0
 80002a0:	607b      	str	r3, [r7, #4]
 80002a2:	2300      	movs	r3, #0
 80002a4:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 80002a6:	4b3a      	ldr	r3, [pc, #232]	; (8000390 <SetSysClockTo72+0xf8>)
 80002a8:	4a39      	ldr	r2, [pc, #228]	; (8000390 <SetSysClockTo72+0xf8>)
 80002aa:	6812      	ldr	r2, [r2, #0]
 80002ac:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80002b0:	601a      	str	r2, [r3, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 80002b2:	4b37      	ldr	r3, [pc, #220]	; (8000390 <SetSysClockTo72+0xf8>)
 80002b4:	681b      	ldr	r3, [r3, #0]
 80002b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80002ba:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	3301      	adds	r3, #1
 80002c0:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80002c2:	683b      	ldr	r3, [r7, #0]
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	d103      	bne.n	80002d0 <SetSysClockTo72+0x38>
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80002ce:	d1f0      	bne.n	80002b2 <SetSysClockTo72+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 80002d0:	4b2f      	ldr	r3, [pc, #188]	; (8000390 <SetSysClockTo72+0xf8>)
 80002d2:	681b      	ldr	r3, [r3, #0]
 80002d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d002      	beq.n	80002e2 <SetSysClockTo72+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 80002dc:	2301      	movs	r3, #1
 80002de:	603b      	str	r3, [r7, #0]
 80002e0:	e001      	b.n	80002e6 <SetSysClockTo72+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 80002e2:	2300      	movs	r3, #0
 80002e4:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 80002e6:	683b      	ldr	r3, [r7, #0]
 80002e8:	2b01      	cmp	r3, #1
 80002ea:	d14b      	bne.n	8000384 <SetSysClockTo72+0xec>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 80002ec:	4b29      	ldr	r3, [pc, #164]	; (8000394 <SetSysClockTo72+0xfc>)
 80002ee:	4a29      	ldr	r2, [pc, #164]	; (8000394 <SetSysClockTo72+0xfc>)
 80002f0:	6812      	ldr	r2, [r2, #0]
 80002f2:	f042 0210 	orr.w	r2, r2, #16
 80002f6:	601a      	str	r2, [r3, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 80002f8:	4b26      	ldr	r3, [pc, #152]	; (8000394 <SetSysClockTo72+0xfc>)
 80002fa:	4a26      	ldr	r2, [pc, #152]	; (8000394 <SetSysClockTo72+0xfc>)
 80002fc:	6812      	ldr	r2, [r2, #0]
 80002fe:	f022 0203 	bic.w	r2, r2, #3
 8000302:	601a      	str	r2, [r3, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 8000304:	4b23      	ldr	r3, [pc, #140]	; (8000394 <SetSysClockTo72+0xfc>)
 8000306:	4a23      	ldr	r2, [pc, #140]	; (8000394 <SetSysClockTo72+0xfc>)
 8000308:	6812      	ldr	r2, [r2, #0]
 800030a:	f042 0202 	orr.w	r2, r2, #2
 800030e:	601a      	str	r2, [r3, #0]

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8000310:	4b1f      	ldr	r3, [pc, #124]	; (8000390 <SetSysClockTo72+0xf8>)
 8000312:	4a1f      	ldr	r2, [pc, #124]	; (8000390 <SetSysClockTo72+0xf8>)
 8000314:	6852      	ldr	r2, [r2, #4]
 8000316:	605a      	str	r2, [r3, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8000318:	4b1d      	ldr	r3, [pc, #116]	; (8000390 <SetSysClockTo72+0xf8>)
 800031a:	4a1d      	ldr	r2, [pc, #116]	; (8000390 <SetSysClockTo72+0xf8>)
 800031c:	6852      	ldr	r2, [r2, #4]
 800031e:	605a      	str	r2, [r3, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 8000320:	4b1b      	ldr	r3, [pc, #108]	; (8000390 <SetSysClockTo72+0xf8>)
 8000322:	4a1b      	ldr	r2, [pc, #108]	; (8000390 <SetSysClockTo72+0xf8>)
 8000324:	6852      	ldr	r2, [r2, #4]
 8000326:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800032a:	605a      	str	r2, [r3, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
                            RCC_CFGR_PLLMULL9); 
#else    
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 800032c:	4b18      	ldr	r3, [pc, #96]	; (8000390 <SetSysClockTo72+0xf8>)
 800032e:	4a18      	ldr	r2, [pc, #96]	; (8000390 <SetSysClockTo72+0xf8>)
 8000330:	6852      	ldr	r2, [r2, #4]
 8000332:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
 8000336:	605a      	str	r2, [r3, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
 8000338:	4b15      	ldr	r3, [pc, #84]	; (8000390 <SetSysClockTo72+0xf8>)
 800033a:	4a15      	ldr	r2, [pc, #84]	; (8000390 <SetSysClockTo72+0xf8>)
 800033c:	6852      	ldr	r2, [r2, #4]
 800033e:	f442 12e8 	orr.w	r2, r2, #1900544	; 0x1d0000
 8000342:	605a      	str	r2, [r3, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 8000344:	4b12      	ldr	r3, [pc, #72]	; (8000390 <SetSysClockTo72+0xf8>)
 8000346:	4a12      	ldr	r2, [pc, #72]	; (8000390 <SetSysClockTo72+0xf8>)
 8000348:	6812      	ldr	r2, [r2, #0]
 800034a:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800034e:	601a      	str	r2, [r3, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8000350:	bf00      	nop
 8000352:	4b0f      	ldr	r3, [pc, #60]	; (8000390 <SetSysClockTo72+0xf8>)
 8000354:	681b      	ldr	r3, [r3, #0]
 8000356:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800035a:	2b00      	cmp	r3, #0
 800035c:	d0f9      	beq.n	8000352 <SetSysClockTo72+0xba>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 800035e:	4b0c      	ldr	r3, [pc, #48]	; (8000390 <SetSysClockTo72+0xf8>)
 8000360:	4a0b      	ldr	r2, [pc, #44]	; (8000390 <SetSysClockTo72+0xf8>)
 8000362:	6852      	ldr	r2, [r2, #4]
 8000364:	f022 0203 	bic.w	r2, r2, #3
 8000368:	605a      	str	r2, [r3, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 800036a:	4b09      	ldr	r3, [pc, #36]	; (8000390 <SetSysClockTo72+0xf8>)
 800036c:	4a08      	ldr	r2, [pc, #32]	; (8000390 <SetSysClockTo72+0xf8>)
 800036e:	6852      	ldr	r2, [r2, #4]
 8000370:	f042 0202 	orr.w	r2, r2, #2
 8000374:	605a      	str	r2, [r3, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 8000376:	bf00      	nop
 8000378:	4b05      	ldr	r3, [pc, #20]	; (8000390 <SetSysClockTo72+0xf8>)
 800037a:	685b      	ldr	r3, [r3, #4]
 800037c:	f003 030c 	and.w	r3, r3, #12
 8000380:	2b08      	cmp	r3, #8
 8000382:	d1f9      	bne.n	8000378 <SetSysClockTo72+0xe0>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  }
}
 8000384:	370c      	adds	r7, #12
 8000386:	46bd      	mov	sp, r7
 8000388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop
 8000390:	40021000 	.word	0x40021000
 8000394:	40022000 	.word	0x40022000

08000398 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000398:	b480      	push	{r7}
 800039a:	af00      	add	r7, sp, #0
}
 800039c:	46bd      	mov	sp, r7
 800039e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a2:	4770      	bx	lr

080003a4 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80003a4:	b480      	push	{r7}
 80003a6:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
  }
 80003a8:	e7fe      	b.n	80003a8 <HardFault_Handler+0x4>
 80003aa:	bf00      	nop

080003ac <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 80003ac:	b480      	push	{r7}
 80003ae:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
  {
  }
 80003b0:	e7fe      	b.n	80003b0 <MemManage_Handler+0x4>
 80003b2:	bf00      	nop

080003b4 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80003b4:	b480      	push	{r7}
 80003b6:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
  {
  }
 80003b8:	e7fe      	b.n	80003b8 <BusFault_Handler+0x4>
 80003ba:	bf00      	nop

080003bc <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 80003bc:	b480      	push	{r7}
 80003be:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
  {
  }
 80003c0:	e7fe      	b.n	80003c0 <UsageFault_Handler+0x4>
 80003c2:	bf00      	nop

080003c4 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 80003c4:	b480      	push	{r7}
 80003c6:	af00      	add	r7, sp, #0
}
 80003c8:	46bd      	mov	sp, r7
 80003ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ce:	4770      	bx	lr

080003d0 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 80003d0:	b480      	push	{r7}
 80003d2:	af00      	add	r7, sp, #0
}
 80003d4:	46bd      	mov	sp, r7
 80003d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003da:	4770      	bx	lr

080003dc <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 80003dc:	b480      	push	{r7}
 80003de:	af00      	add	r7, sp, #0
}
 80003e0:	46bd      	mov	sp, r7
 80003e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e6:	4770      	bx	lr

080003e8 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 80003e8:	b480      	push	{r7}
 80003ea:	af00      	add	r7, sp, #0
}
 80003ec:	46bd      	mov	sp, r7
 80003ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f2:	4770      	bx	lr

080003f4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80003f4:	f8df d03c 	ldr.w	sp, [pc, #60]	; 8000434 <LoopFillZerobss+0x16>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80003f8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80003fa:	f000 b804 	b.w	8000406 <LoopCopyDataInit>

080003fe <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80003fe:	4b0e      	ldr	r3, [pc, #56]	; (8000438 <LoopFillZerobss+0x1a>)
	ldr	r3, [r3, r1]
 8000400:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000402:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000404:	3104      	adds	r1, #4

08000406 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000406:	480d      	ldr	r0, [pc, #52]	; (800043c <LoopFillZerobss+0x1e>)
	ldr	r3, =_edata
 8000408:	4b0d      	ldr	r3, [pc, #52]	; (8000440 <LoopFillZerobss+0x22>)
	adds	r2, r0, r1
 800040a:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800040c:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800040e:	f4ff aff6 	bcc.w	80003fe <CopyDataInit>
	ldr	r2, =_sbss
 8000412:	4a0c      	ldr	r2, [pc, #48]	; (8000444 <LoopFillZerobss+0x26>)
	b	LoopFillZerobss
 8000414:	f000 b803 	b.w	800041e <LoopFillZerobss>

08000418 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000418:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800041a:	f842 3b04 	str.w	r3, [r2], #4

0800041e <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800041e:	4b0a      	ldr	r3, [pc, #40]	; (8000448 <LoopFillZerobss+0x2a>)
	cmp	r2, r3
 8000420:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000422:	f4ff aff9 	bcc.w	8000418 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000426:	f7ff fefd 	bl	8000224 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800042a:	f000 fc51 	bl	8000cd0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800042e:	f000 f867 	bl	8000500 <main>
	bx	lr
 8000432:	4770      	bx	lr

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000434:	20010000 	.word	0x20010000
/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
  b	LoopCopyDataInit

CopyDataInit:
	ldr	r3, =_sidata
 8000438:	08000d3c 	.word	0x08000d3c
	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
	adds	r1, r1, #4

LoopCopyDataInit:
	ldr	r0, =_sdata
 800043c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000440:	20000000 	.word	0x20000000
	adds	r2, r0, r1
	cmp	r2, r3
	bcc	CopyDataInit
	ldr	r2, =_sbss
 8000444:	20000000 	.word	0x20000000
FillZerobss:
	movs	r3, #0
	str	r3, [r2], #4

LoopFillZerobss:
	ldr	r3, = _ebss
 8000448:	20000424 	.word	0x20000424

0800044c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800044c:	f7ff bffe 	b.w	800044c <ADC1_2_IRQHandler>

08000450 <serialTerminal_Init>:
#include "serial_terminal.h"
#include "CRC.h"


void serialTerminal_Init(void)
{
 8000450:	b580      	push	{r7, lr}
 8000452:	af00      	add	r7, sp, #0
  initCRC();
 8000454:	f000 f8a8 	bl	80005a8 <initCRC>
}
 8000458:	bd80      	pop	{r7, pc}
 800045a:	bf00      	nop

0800045c <pwm>:
 *      Author: Callen Fisher
 */
#include "pwm.h"

void pwm()
{
 800045c:	b580      	push	{r7, lr}
 800045e:	b088      	sub	sp, #32
 8000460:	af00      	add	r7, sp, #0
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA,ENABLE);//tim3 ch1 //PA6
 8000462:	2004      	movs	r0, #4
 8000464:	2101      	movs	r1, #1
 8000466:	f000 fadb 	bl	8000a20 <RCC_APB2PeriphClockCmd>
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3,ENABLE);
 800046a:	2002      	movs	r0, #2
 800046c:	2101      	movs	r1, #1
 800046e:	f000 faf5 	bl	8000a5c <RCC_APB1PeriphClockCmd>

	GPIO_InitTypeDef GPIO_InitStructure;

	GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_6;
 8000472:	2340      	movs	r3, #64	; 0x40
 8000474:	83bb      	strh	r3, [r7, #28]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8000476:	2303      	movs	r3, #3
 8000478:	77bb      	strb	r3, [r7, #30]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 800047a:	2318      	movs	r3, #24
 800047c:	77fb      	strb	r3, [r7, #31]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 800047e:	f107 031c 	add.w	r3, r7, #28
 8000482:	481d      	ldr	r0, [pc, #116]	; (80004f8 <pwm+0x9c>)
 8000484:	4619      	mov	r1, r3
 8000486:	f000 fb07 	bl	8000a98 <GPIO_Init>

	//set up timer

	TIM_TimeBaseInitTypeDef TIM_TimeBaseStruct;

	TIM_TimeBaseStruct.TIM_ClockDivision=TIM_CKD_DIV1;
 800048a:	2300      	movs	r3, #0
 800048c:	82fb      	strh	r3, [r7, #22]
	TIM_TimeBaseStruct.TIM_CounterMode=TIM_CounterMode_Up;
 800048e:	2300      	movs	r3, #0
 8000490:	827b      	strh	r3, [r7, #18]
	TIM_TimeBaseStruct.TIM_Period=40000;//makes it 100Hz
 8000492:	f649 4340 	movw	r3, #40000	; 0x9c40
 8000496:	82bb      	strh	r3, [r7, #20]
	TIM_TimeBaseStruct.TIM_Prescaler=0;
 8000498:	2300      	movs	r3, #0
 800049a:	823b      	strh	r3, [r7, #16]
	TIM_TimeBaseStruct.TIM_RepetitionCounter=0x0000;
 800049c:	2300      	movs	r3, #0
 800049e:	763b      	strb	r3, [r7, #24]

	TIM_TimeBaseInit(TIM3,&TIM_TimeBaseStruct);
 80004a0:	f107 0310 	add.w	r3, r7, #16
 80004a4:	4815      	ldr	r0, [pc, #84]	; (80004fc <pwm+0xa0>)
 80004a6:	4619      	mov	r1, r3
 80004a8:	f000 f8c4 	bl	8000634 <TIM_TimeBaseInit>

	TIM_OCInitTypeDef OC;

	OC.TIM_OCMode=TIM_OCMode_PWM1;
 80004ac:	2360      	movs	r3, #96	; 0x60
 80004ae:	803b      	strh	r3, [r7, #0]
	OC.TIM_OutputState=TIM_OutputState_Enable;
 80004b0:	2301      	movs	r3, #1
 80004b2:	807b      	strh	r3, [r7, #2]
	OC.TIM_Pulse=20000;
 80004b4:	f644 6320 	movw	r3, #20000	; 0x4e20
 80004b8:	80fb      	strh	r3, [r7, #6]
	OC.TIM_OCPolarity=TIM_OCPolarity_Low;
 80004ba:	2302      	movs	r3, #2
 80004bc:	813b      	strh	r3, [r7, #8]



	TIM_OC1Init(TIM3,&OC);
 80004be:	463b      	mov	r3, r7
 80004c0:	480e      	ldr	r0, [pc, #56]	; (80004fc <pwm+0xa0>)
 80004c2:	4619      	mov	r1, r3
 80004c4:	f000 f932 	bl	800072c <TIM_OC1Init>
	TIM_OC1PreloadConfig(TIM3,TIM_OCPreload_Enable);
 80004c8:	480c      	ldr	r0, [pc, #48]	; (80004fc <pwm+0xa0>)
 80004ca:	2108      	movs	r1, #8
 80004cc:	f000 fa44 	bl	8000958 <TIM_OC1PreloadConfig>

	TIM_ARRPreloadConfig(TIM3,DISABLE);
 80004d0:	480a      	ldr	r0, [pc, #40]	; (80004fc <pwm+0xa0>)
 80004d2:	2100      	movs	r1, #0
 80004d4:	f000 fa20 	bl	8000918 <TIM_ARRPreloadConfig>
	TIM_CtrlPWMOutputs(TIM3, ENABLE);
 80004d8:	4808      	ldr	r0, [pc, #32]	; (80004fc <pwm+0xa0>)
 80004da:	2101      	movs	r1, #1
 80004dc:	f000 f9d2 	bl	8000884 <TIM_CtrlPWMOutputs>
	TIM_Cmd(TIM3,ENABLE);
 80004e0:	4806      	ldr	r0, [pc, #24]	; (80004fc <pwm+0xa0>)
 80004e2:	2101      	movs	r1, #1
 80004e4:	f000 f9ae 	bl	8000844 <TIM_Cmd>
	TIM_SetCompare1(TIM3,10000);//inversed//set compare sets the duty (val between 0 and 40 000 where 40000 is 0% and 0 is 100%
 80004e8:	4804      	ldr	r0, [pc, #16]	; (80004fc <pwm+0xa0>)
 80004ea:	f242 7110 	movw	r1, #10000	; 0x2710
 80004ee:	f000 fa4f 	bl	8000990 <TIM_SetCompare1>





}
 80004f2:	3720      	adds	r7, #32
 80004f4:	46bd      	mov	sp, r7
 80004f6:	bd80      	pop	{r7, pc}
 80004f8:	40010800 	.word	0x40010800
 80004fc:	40000400 	.word	0x40000400

08000500 <main>:
#include "serial_terminal.h"
#include "CRC.h"
uint32_t temp=0;
uint16_t recVal;
int main(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b09e      	sub	sp, #120	; 0x78
 8000504:	af00      	add	r7, sp, #0
  serialTerminal_Init();
 8000506:	f7ff ffa3 	bl	8000450 <serialTerminal_Init>
  setUpLoopTimer();
 800050a:	f000 f803 	bl	8000514 <setUpLoopTimer>
  //setUpGPIO();

  pwm();
 800050e:	f7ff ffa5 	bl	800045c <pwm>
  while(1)
  {

  }
 8000512:	e7fe      	b.n	8000512 <main+0x12>

08000514 <setUpLoopTimer>:
int proceed=0;
///////////////////////////////////////////////////////////////////////////
////////////////main loop timer ///////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////
void setUpLoopTimer(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b084      	sub	sp, #16
 8000518:	af00      	add	r7, sp, #0
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2,ENABLE);
 800051a:	2001      	movs	r0, #1
 800051c:	2101      	movs	r1, #1
 800051e:	f000 fa9d 	bl	8000a5c <RCC_APB1PeriphClockCmd>

	NVIC_InitTypeDef NVIC_InitStructure;
	/* Enable the TIM2 global Interrupt */
	NVIC_InitStructure.NVIC_IRQChannel = TIM2_IRQn;//set up the interrupt handler for TIM2
 8000522:	231c      	movs	r3, #28
 8000524:	733b      	strb	r3, [r7, #12]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 8000526:	2300      	movs	r3, #0
 8000528:	737b      	strb	r3, [r7, #13]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 1;
 800052a:	2301      	movs	r3, #1
 800052c:	73bb      	strb	r3, [r7, #14]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 800052e:	2301      	movs	r3, #1
 8000530:	73fb      	strb	r3, [r7, #15]

	NVIC_Init(&NVIC_InitStructure);
 8000532:	f107 030c 	add.w	r3, r7, #12
 8000536:	4618      	mov	r0, r3
 8000538:	f000 fb6a 	bl	8000c10 <NVIC_Init>


	TIM_TimeBaseInitTypeDef TIM_TimeBaseStruct;

	TIM_TimeBaseStruct.TIM_ClockDivision=TIM_CKD_DIV1;
 800053c:	2300      	movs	r3, #0
 800053e:	80fb      	strh	r3, [r7, #6]
	TIM_TimeBaseStruct.TIM_CounterMode=TIM_CounterMode_Up;
 8000540:	2300      	movs	r3, #0
 8000542:	807b      	strh	r3, [r7, #2]
	TIM_TimeBaseStruct.TIM_Period=(3600/4-1);//makes it 100Hz
 8000544:	f240 3383 	movw	r3, #899	; 0x383
 8000548:	80bb      	strh	r3, [r7, #4]
	TIM_TimeBaseStruct.TIM_Prescaler=400-1;
 800054a:	f240 138f 	movw	r3, #399	; 0x18f
 800054e:	803b      	strh	r3, [r7, #0]
	TIM_TimeBaseStruct.TIM_RepetitionCounter=0x0000;
 8000550:	2300      	movs	r3, #0
 8000552:	723b      	strb	r3, [r7, #8]

	TIM_TimeBaseInit(TIM2,&TIM_TimeBaseStruct);
 8000554:	463b      	mov	r3, r7
 8000556:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800055a:	4619      	mov	r1, r3
 800055c:	f000 f86a 	bl	8000634 <TIM_TimeBaseInit>

	TIM_Cmd(TIM2,ENABLE);
 8000560:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000564:	2101      	movs	r1, #1
 8000566:	f000 f96d 	bl	8000844 <TIM_Cmd>

	TIM_ITConfig(TIM2,TIM_IT_Update,ENABLE);
 800056a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800056e:	2101      	movs	r1, #1
 8000570:	2201      	movs	r2, #1
 8000572:	f000 f9ad 	bl	80008d0 <TIM_ITConfig>
}
 8000576:	3710      	adds	r7, #16
 8000578:	46bd      	mov	sp, r7
 800057a:	bd80      	pop	{r7, pc}

0800057c <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	af00      	add	r7, sp, #0
  if (TIM_GetITStatus(TIM2, TIM_IT_Update) != RESET)
 8000580:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000584:	2101      	movs	r1, #1
 8000586:	f000 fa11 	bl	80009ac <TIM_GetITStatus>
 800058a:	4603      	mov	r3, r0
 800058c:	2b00      	cmp	r3, #0
 800058e:	d007      	beq.n	80005a0 <TIM2_IRQHandler+0x24>
  {
    TIM_ClearITPendingBit(TIM2, TIM_IT_Update);
 8000590:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000594:	2101      	movs	r1, #1
 8000596:	f000 fa33 	bl	8000a00 <TIM_ClearITPendingBit>
    proceed=1;
 800059a:	4b02      	ldr	r3, [pc, #8]	; (80005a4 <TIM2_IRQHandler+0x28>)
 800059c:	2201      	movs	r2, #1
 800059e:	601a      	str	r2, [r3, #0]

  }
}
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	bf00      	nop
 80005a4:	2000001c 	.word	0x2000001c

080005a8 <initCRC>:
static uint32_t crcTable[256];
static uint32_t currentCRC;

static void buildTable();

void initCRC() {
 80005a8:	b580      	push	{r7, lr}
 80005aa:	af00      	add	r7, sp, #0

  buildTable();
 80005ac:	f000 f808 	bl	80005c0 <buildTable>
  currentCRC = CRCDATA_INITIALVAL;
 80005b0:	4b02      	ldr	r3, [pc, #8]	; (80005bc <initCRC+0x14>)
 80005b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80005b6:	601a      	str	r2, [r3, #0]

}
 80005b8:	bd80      	pop	{r7, pc}
 80005ba:	bf00      	nop
 80005bc:	20000420 	.word	0x20000420

080005c0 <buildTable>:
 * This function build the lookup table.
 * @param sCRCdata - CRC data struct
 * @return void.
 * @throws  none
 */
static void buildTable() {
 80005c0:	b480      	push	{r7}
 80005c2:	b085      	sub	sp, #20
 80005c4:	af00      	add	r7, sp, #0
  uint32_t topbit;
  uint32_t dividend;
  uint32_t bit;
  uint32_t remainder;

  topbit = (uint32_t) 1U << (CRCDATA_DATAWIDTH - (uint8_t) 1);
 80005c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80005ca:	603b      	str	r3, [r7, #0]

  //Compute the remainder of each possible dividend.
  for (dividend = 0U; dividend < 256U; dividend++) {
 80005cc:	2300      	movs	r3, #0
 80005ce:	60fb      	str	r3, [r7, #12]
 80005d0:	e026      	b.n	8000620 <buildTable+0x60>
    //Start with the dividend followed by zeros.
    remainder = (dividend << (CRCDATA_DATAWIDTH - (uint8_t) 8)) & CRCDATA_MASK;
 80005d2:	68fb      	ldr	r3, [r7, #12]
 80005d4:	021b      	lsls	r3, r3, #8
 80005d6:	b29b      	uxth	r3, r3
 80005d8:	607b      	str	r3, [r7, #4]

    //Perform modulo-2 division, a bit at a time.
    for (bit = 8U; bit > 0U; bit--) {
 80005da:	2308      	movs	r3, #8
 80005dc:	60bb      	str	r3, [r7, #8]
 80005de:	e014      	b.n	800060a <buildTable+0x4a>
      //Try to divide the current data bit.
      if ((remainder & topbit) > 0U) {
 80005e0:	687a      	ldr	r2, [r7, #4]
 80005e2:	683b      	ldr	r3, [r7, #0]
 80005e4:	4013      	ands	r3, r2
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d008      	beq.n	80005fc <buildTable+0x3c>
        remainder = ((remainder << 1U) ^ CRCDATA_POLYNOMIAL) & CRCDATA_MASK;
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	005b      	lsls	r3, r3, #1
 80005ee:	f483 5381 	eor.w	r3, r3, #4128	; 0x1020
 80005f2:	f083 0301 	eor.w	r3, r3, #1
 80005f6:	b29b      	uxth	r3, r3
 80005f8:	607b      	str	r3, [r7, #4]
 80005fa:	e003      	b.n	8000604 <buildTable+0x44>
      } else {
        remainder = (remainder << 1U) & CRCDATA_MASK;
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	005b      	lsls	r3, r3, #1
 8000600:	b29b      	uxth	r3, r3
 8000602:	607b      	str	r3, [r7, #4]
  for (dividend = 0U; dividend < 256U; dividend++) {
    //Start with the dividend followed by zeros.
    remainder = (dividend << (CRCDATA_DATAWIDTH - (uint8_t) 8)) & CRCDATA_MASK;

    //Perform modulo-2 division, a bit at a time.
    for (bit = 8U; bit > 0U; bit--) {
 8000604:	68bb      	ldr	r3, [r7, #8]
 8000606:	3b01      	subs	r3, #1
 8000608:	60bb      	str	r3, [r7, #8]
 800060a:	68bb      	ldr	r3, [r7, #8]
 800060c:	2b00      	cmp	r3, #0
 800060e:	d1e7      	bne.n	80005e0 <buildTable+0x20>
      } else {
        remainder = (remainder << 1U) & CRCDATA_MASK;
      }
    }
    //Store the result into table.
    crcTable[dividend] = remainder;
 8000610:	4b07      	ldr	r3, [pc, #28]	; (8000630 <buildTable+0x70>)
 8000612:	68fa      	ldr	r2, [r7, #12]
 8000614:	6879      	ldr	r1, [r7, #4]
 8000616:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  uint32_t remainder;

  topbit = (uint32_t) 1U << (CRCDATA_DATAWIDTH - (uint8_t) 1);

  //Compute the remainder of each possible dividend.
  for (dividend = 0U; dividend < 256U; dividend++) {
 800061a:	68fb      	ldr	r3, [r7, #12]
 800061c:	3301      	adds	r3, #1
 800061e:	60fb      	str	r3, [r7, #12]
 8000620:	68fb      	ldr	r3, [r7, #12]
 8000622:	2bff      	cmp	r3, #255	; 0xff
 8000624:	d9d5      	bls.n	80005d2 <buildTable+0x12>
      }
    }
    //Store the result into table.
    crcTable[dividend] = remainder;
  }
}
 8000626:	3714      	adds	r7, #20
 8000628:	46bd      	mov	sp, r7
 800062a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062e:	4770      	bx	lr
 8000630:	20000020 	.word	0x20000020

08000634 <TIM_TimeBaseInit>:
  *         structure that contains the configuration information for the 
  *         specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 8000634:	b480      	push	{r7}
 8000636:	b085      	sub	sp, #20
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
 800063c:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 800063e:	2300      	movs	r3, #0
 8000640:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	881b      	ldrh	r3, [r3, #0]
 8000646:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM2) || (TIMx == TIM3)||
 8000648:	687a      	ldr	r2, [r7, #4]
 800064a:	4b2e      	ldr	r3, [pc, #184]	; (8000704 <TIM_TimeBaseInit+0xd0>)
 800064c:	429a      	cmp	r2, r3
 800064e:	d013      	beq.n	8000678 <TIM_TimeBaseInit+0x44>
 8000650:	687a      	ldr	r2, [r7, #4]
 8000652:	4b2d      	ldr	r3, [pc, #180]	; (8000708 <TIM_TimeBaseInit+0xd4>)
 8000654:	429a      	cmp	r2, r3
 8000656:	d00f      	beq.n	8000678 <TIM_TimeBaseInit+0x44>
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800065e:	d00b      	beq.n	8000678 <TIM_TimeBaseInit+0x44>
 8000660:	687a      	ldr	r2, [r7, #4]
 8000662:	4b2a      	ldr	r3, [pc, #168]	; (800070c <TIM_TimeBaseInit+0xd8>)
 8000664:	429a      	cmp	r2, r3
 8000666:	d007      	beq.n	8000678 <TIM_TimeBaseInit+0x44>
 8000668:	687a      	ldr	r2, [r7, #4]
 800066a:	4b29      	ldr	r3, [pc, #164]	; (8000710 <TIM_TimeBaseInit+0xdc>)
 800066c:	429a      	cmp	r2, r3
 800066e:	d003      	beq.n	8000678 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 8000670:	687a      	ldr	r2, [r7, #4]
 8000672:	4b28      	ldr	r3, [pc, #160]	; (8000714 <TIM_TimeBaseInit+0xe0>)
 8000674:	429a      	cmp	r2, r3
 8000676:	d108      	bne.n	800068a <TIM_TimeBaseInit+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~((uint16_t)(TIM_CR1_DIR | TIM_CR1_CMS)));
 8000678:	89fb      	ldrh	r3, [r7, #14]
 800067a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800067e:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8000680:	683b      	ldr	r3, [r7, #0]
 8000682:	885a      	ldrh	r2, [r3, #2]
 8000684:	89fb      	ldrh	r3, [r7, #14]
 8000686:	4313      	orrs	r3, r2
 8000688:	81fb      	strh	r3, [r7, #14]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 800068a:	687a      	ldr	r2, [r7, #4]
 800068c:	4b22      	ldr	r3, [pc, #136]	; (8000718 <TIM_TimeBaseInit+0xe4>)
 800068e:	429a      	cmp	r2, r3
 8000690:	d00c      	beq.n	80006ac <TIM_TimeBaseInit+0x78>
 8000692:	687a      	ldr	r2, [r7, #4]
 8000694:	4b21      	ldr	r3, [pc, #132]	; (800071c <TIM_TimeBaseInit+0xe8>)
 8000696:	429a      	cmp	r2, r3
 8000698:	d008      	beq.n	80006ac <TIM_TimeBaseInit+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= (uint16_t)(~((uint16_t)TIM_CR1_CKD));
 800069a:	89fb      	ldrh	r3, [r7, #14]
 800069c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80006a0:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 80006a2:	683b      	ldr	r3, [r7, #0]
 80006a4:	88da      	ldrh	r2, [r3, #6]
 80006a6:	89fb      	ldrh	r3, [r7, #14]
 80006a8:	4313      	orrs	r3, r2
 80006aa:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	89fa      	ldrh	r2, [r7, #14]
 80006b0:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 80006b2:	683b      	ldr	r3, [r7, #0]
 80006b4:	889a      	ldrh	r2, [r3, #4]
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	859a      	strh	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 80006ba:	683b      	ldr	r3, [r7, #0]
 80006bc:	881a      	ldrh	r2, [r3, #0]
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	851a      	strh	r2, [r3, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15)|| (TIMx == TIM16) || (TIMx == TIM17))  
 80006c2:	687a      	ldr	r2, [r7, #4]
 80006c4:	4b0f      	ldr	r3, [pc, #60]	; (8000704 <TIM_TimeBaseInit+0xd0>)
 80006c6:	429a      	cmp	r2, r3
 80006c8:	d00f      	beq.n	80006ea <TIM_TimeBaseInit+0xb6>
 80006ca:	687a      	ldr	r2, [r7, #4]
 80006cc:	4b0e      	ldr	r3, [pc, #56]	; (8000708 <TIM_TimeBaseInit+0xd4>)
 80006ce:	429a      	cmp	r2, r3
 80006d0:	d00b      	beq.n	80006ea <TIM_TimeBaseInit+0xb6>
 80006d2:	687a      	ldr	r2, [r7, #4]
 80006d4:	4b12      	ldr	r3, [pc, #72]	; (8000720 <TIM_TimeBaseInit+0xec>)
 80006d6:	429a      	cmp	r2, r3
 80006d8:	d007      	beq.n	80006ea <TIM_TimeBaseInit+0xb6>
 80006da:	687a      	ldr	r2, [r7, #4]
 80006dc:	4b11      	ldr	r3, [pc, #68]	; (8000724 <TIM_TimeBaseInit+0xf0>)
 80006de:	429a      	cmp	r2, r3
 80006e0:	d003      	beq.n	80006ea <TIM_TimeBaseInit+0xb6>
 80006e2:	687a      	ldr	r2, [r7, #4]
 80006e4:	4b10      	ldr	r3, [pc, #64]	; (8000728 <TIM_TimeBaseInit+0xf4>)
 80006e6:	429a      	cmp	r2, r3
 80006e8:	d104      	bne.n	80006f4 <TIM_TimeBaseInit+0xc0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 80006ea:	683b      	ldr	r3, [r7, #0]
 80006ec:	7a1b      	ldrb	r3, [r3, #8]
 80006ee:	461a      	mov	r2, r3
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler and the Repetition counter
     values immediately */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;           
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	2201      	movs	r2, #1
 80006f8:	829a      	strh	r2, [r3, #20]
}
 80006fa:	3714      	adds	r7, #20
 80006fc:	46bd      	mov	sp, r7
 80006fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000702:	4770      	bx	lr
 8000704:	40012c00 	.word	0x40012c00
 8000708:	40013400 	.word	0x40013400
 800070c:	40000400 	.word	0x40000400
 8000710:	40000800 	.word	0x40000800
 8000714:	40000c00 	.word	0x40000c00
 8000718:	40001000 	.word	0x40001000
 800071c:	40001400 	.word	0x40001400
 8000720:	40014000 	.word	0x40014000
 8000724:	40014400 	.word	0x40014400
 8000728:	40014800 	.word	0x40014800

0800072c <TIM_OC1Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC1Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 800072c:	b480      	push	{r7}
 800072e:	b085      	sub	sp, #20
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
 8000734:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 8000736:	2300      	movs	r3, #0
 8000738:	817b      	strh	r3, [r7, #10]
 800073a:	2300      	movs	r3, #0
 800073c:	81fb      	strh	r3, [r7, #14]
 800073e:	2300      	movs	r3, #0
 8000740:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
 /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)(~(uint16_t)TIM_CCER_CC1E);
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	8c1b      	ldrh	r3, [r3, #32]
 8000746:	b29b      	uxth	r3, r3
 8000748:	f023 0301 	bic.w	r3, r3, #1
 800074c:	b29a      	uxth	r2, r3
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	841a      	strh	r2, [r3, #32]
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	8c1b      	ldrh	r3, [r3, #32]
 8000756:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	889b      	ldrh	r3, [r3, #4]
 800075c:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	8b1b      	ldrh	r3, [r3, #24]
 8000762:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_OC1M));
 8000764:	897b      	ldrh	r3, [r7, #10]
 8000766:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800076a:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_CC1S));
 800076c:	897b      	ldrh	r3, [r7, #10]
 800076e:	f023 0303 	bic.w	r3, r3, #3
 8000772:	817b      	strh	r3, [r7, #10]

  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8000774:	683b      	ldr	r3, [r7, #0]
 8000776:	881a      	ldrh	r2, [r3, #0]
 8000778:	897b      	ldrh	r3, [r7, #10]
 800077a:	4313      	orrs	r3, r2
 800077c:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1P));
 800077e:	89fb      	ldrh	r3, [r7, #14]
 8000780:	f023 0302 	bic.w	r3, r3, #2
 8000784:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
 8000786:	683b      	ldr	r3, [r7, #0]
 8000788:	891a      	ldrh	r2, [r3, #8]
 800078a:	89fb      	ldrh	r3, [r7, #14]
 800078c:	4313      	orrs	r3, r2
 800078e:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 8000790:	683b      	ldr	r3, [r7, #0]
 8000792:	885a      	ldrh	r2, [r3, #2]
 8000794:	89fb      	ldrh	r3, [r7, #14]
 8000796:	4313      	orrs	r3, r2
 8000798:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15)||
 800079a:	687a      	ldr	r2, [r7, #4]
 800079c:	4b24      	ldr	r3, [pc, #144]	; (8000830 <TIM_OC1Init+0x104>)
 800079e:	429a      	cmp	r2, r3
 80007a0:	d00f      	beq.n	80007c2 <TIM_OC1Init+0x96>
 80007a2:	687a      	ldr	r2, [r7, #4]
 80007a4:	4b23      	ldr	r3, [pc, #140]	; (8000834 <TIM_OC1Init+0x108>)
 80007a6:	429a      	cmp	r2, r3
 80007a8:	d00b      	beq.n	80007c2 <TIM_OC1Init+0x96>
 80007aa:	687a      	ldr	r2, [r7, #4]
 80007ac:	4b22      	ldr	r3, [pc, #136]	; (8000838 <TIM_OC1Init+0x10c>)
 80007ae:	429a      	cmp	r2, r3
 80007b0:	d007      	beq.n	80007c2 <TIM_OC1Init+0x96>
 80007b2:	687a      	ldr	r2, [r7, #4]
 80007b4:	4b21      	ldr	r3, [pc, #132]	; (800083c <TIM_OC1Init+0x110>)
 80007b6:	429a      	cmp	r2, r3
 80007b8:	d003      	beq.n	80007c2 <TIM_OC1Init+0x96>
     (TIMx == TIM16)|| (TIMx == TIM17))
 80007ba:	687a      	ldr	r2, [r7, #4]
 80007bc:	4b20      	ldr	r3, [pc, #128]	; (8000840 <TIM_OC1Init+0x114>)
 80007be:	429a      	cmp	r2, r3
 80007c0:	d123      	bne.n	800080a <TIM_OC1Init+0xde>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1NP));
 80007c2:	89fb      	ldrh	r3, [r7, #14]
 80007c4:	f023 0308 	bic.w	r3, r3, #8
 80007c8:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 80007ca:	683b      	ldr	r3, [r7, #0]
 80007cc:	895a      	ldrh	r2, [r3, #10]
 80007ce:	89fb      	ldrh	r3, [r7, #14]
 80007d0:	4313      	orrs	r3, r2
 80007d2:	81fb      	strh	r3, [r7, #14]
    
    /* Reset the Output N State */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1NE));    
 80007d4:	89fb      	ldrh	r3, [r7, #14]
 80007d6:	f023 0304 	bic.w	r3, r3, #4
 80007da:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 80007dc:	683b      	ldr	r3, [r7, #0]
 80007de:	889a      	ldrh	r2, [r3, #4]
 80007e0:	89fb      	ldrh	r3, [r7, #14]
 80007e2:	4313      	orrs	r3, r2
 80007e4:	81fb      	strh	r3, [r7, #14]
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS1));
 80007e6:	89bb      	ldrh	r3, [r7, #12]
 80007e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80007ec:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS1N));
 80007ee:	89bb      	ldrh	r3, [r7, #12]
 80007f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80007f4:	81bb      	strh	r3, [r7, #12]
    
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
 80007f6:	683b      	ldr	r3, [r7, #0]
 80007f8:	899a      	ldrh	r2, [r3, #12]
 80007fa:	89bb      	ldrh	r3, [r7, #12]
 80007fc:	4313      	orrs	r3, r2
 80007fe:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 8000800:	683b      	ldr	r3, [r7, #0]
 8000802:	89da      	ldrh	r2, [r3, #14]
 8000804:	89bb      	ldrh	r3, [r7, #12]
 8000806:	4313      	orrs	r3, r2
 8000808:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	89ba      	ldrh	r2, [r7, #12]
 800080e:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	897a      	ldrh	r2, [r7, #10]
 8000814:	831a      	strh	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse; 
 8000816:	683b      	ldr	r3, [r7, #0]
 8000818:	88da      	ldrh	r2, [r3, #6]
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	869a      	strh	r2, [r3, #52]	; 0x34
 
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	89fa      	ldrh	r2, [r7, #14]
 8000822:	841a      	strh	r2, [r3, #32]
}
 8000824:	3714      	adds	r7, #20
 8000826:	46bd      	mov	sp, r7
 8000828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082c:	4770      	bx	lr
 800082e:	bf00      	nop
 8000830:	40012c00 	.word	0x40012c00
 8000834:	40013400 	.word	0x40013400
 8000838:	40014000 	.word	0x40014000
 800083c:	40014400 	.word	0x40014400
 8000840:	40014800 	.word	0x40014800

08000844 <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8000844:	b480      	push	{r7}
 8000846:	b083      	sub	sp, #12
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
 800084c:	460b      	mov	r3, r1
 800084e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000850:	78fb      	ldrb	r3, [r7, #3]
 8000852:	2b00      	cmp	r3, #0
 8000854:	d008      	beq.n	8000868 <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	881b      	ldrh	r3, [r3, #0]
 800085a:	b29b      	uxth	r3, r3
 800085c:	f043 0301 	orr.w	r3, r3, #1
 8000860:	b29a      	uxth	r2, r3
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	801a      	strh	r2, [r3, #0]
 8000866:	e007      	b.n	8000878 <TIM_Cmd+0x34>
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	881b      	ldrh	r3, [r3, #0]
 800086c:	b29b      	uxth	r3, r3
 800086e:	f023 0301 	bic.w	r3, r3, #1
 8000872:	b29a      	uxth	r2, r3
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	801a      	strh	r2, [r3, #0]
  }
}
 8000878:	370c      	adds	r7, #12
 800087a:	46bd      	mov	sp, r7
 800087c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000880:	4770      	bx	lr
 8000882:	bf00      	nop

08000884 <TIM_CtrlPWMOutputs>:
  * @param  NewState: new state of the TIM peripheral Main Outputs.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_CtrlPWMOutputs(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8000884:	b480      	push	{r7}
 8000886:	b083      	sub	sp, #12
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
 800088c:	460b      	mov	r3, r1
 800088e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000890:	78fb      	ldrb	r3, [r7, #3]
 8000892:	2b00      	cmp	r3, #0
 8000894:	d00c      	beq.n	80008b0 <TIM_CtrlPWMOutputs+0x2c>
  {
    /* Enable the TIM Main Output */
    TIMx->BDTR |= TIM_BDTR_MOE;
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800089c:	b29b      	uxth	r3, r3
 800089e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80008a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80008a6:	b29a      	uxth	r2, r3
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 80008ae:	e009      	b.n	80008c4 <TIM_CtrlPWMOutputs+0x40>
  }
  else
  {
    /* Disable the TIM Main Output */
    TIMx->BDTR &= (uint16_t)(~((uint16_t)TIM_BDTR_MOE));
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80008b6:	b29b      	uxth	r3, r3
 80008b8:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80008bc:	b29a      	uxth	r2, r3
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }  
}
 80008c4:	370c      	adds	r7, #12
 80008c6:	46bd      	mov	sp, r7
 80008c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008cc:	4770      	bx	lr
 80008ce:	bf00      	nop

080008d0 <TIM_ITConfig>:
  * @param  NewState: new state of the TIM interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState)
{  
 80008d0:	b480      	push	{r7}
 80008d2:	b083      	sub	sp, #12
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
 80008d8:	4613      	mov	r3, r2
 80008da:	460a      	mov	r2, r1
 80008dc:	807a      	strh	r2, [r7, #2]
 80008de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80008e0:	787b      	ldrb	r3, [r7, #1]
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d008      	beq.n	80008f8 <TIM_ITConfig+0x28>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	899b      	ldrh	r3, [r3, #12]
 80008ea:	b29a      	uxth	r2, r3
 80008ec:	887b      	ldrh	r3, [r7, #2]
 80008ee:	4313      	orrs	r3, r2
 80008f0:	b29a      	uxth	r2, r3
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	819a      	strh	r2, [r3, #12]
 80008f6:	e009      	b.n	800090c <TIM_ITConfig+0x3c>
  }
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	899b      	ldrh	r3, [r3, #12]
 80008fc:	b29a      	uxth	r2, r3
 80008fe:	887b      	ldrh	r3, [r7, #2]
 8000900:	43db      	mvns	r3, r3
 8000902:	b29b      	uxth	r3, r3
 8000904:	4013      	ands	r3, r2
 8000906:	b29a      	uxth	r2, r3
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	819a      	strh	r2, [r3, #12]
  }
}
 800090c:	370c      	adds	r7, #12
 800090e:	46bd      	mov	sp, r7
 8000910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000914:	4770      	bx	lr
 8000916:	bf00      	nop

08000918 <TIM_ARRPreloadConfig>:
  * @param  NewState: new state of the TIMx peripheral Preload register
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ARRPreloadConfig(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8000918:	b480      	push	{r7}
 800091a:	b083      	sub	sp, #12
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
 8000920:	460b      	mov	r3, r1
 8000922:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000924:	78fb      	ldrb	r3, [r7, #3]
 8000926:	2b00      	cmp	r3, #0
 8000928:	d008      	beq.n	800093c <TIM_ARRPreloadConfig+0x24>
  {
    /* Set the ARR Preload Bit */
    TIMx->CR1 |= TIM_CR1_ARPE;
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	881b      	ldrh	r3, [r3, #0]
 800092e:	b29b      	uxth	r3, r3
 8000930:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000934:	b29a      	uxth	r2, r3
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	801a      	strh	r2, [r3, #0]
 800093a:	e007      	b.n	800094c <TIM_ARRPreloadConfig+0x34>
  }
  else
  {
    /* Reset the ARR Preload Bit */
    TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_ARPE);
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	881b      	ldrh	r3, [r3, #0]
 8000940:	b29b      	uxth	r3, r3
 8000942:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000946:	b29a      	uxth	r2, r3
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	801a      	strh	r2, [r3, #0]
  }
}
 800094c:	370c      	adds	r7, #12
 800094e:	46bd      	mov	sp, r7
 8000950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000954:	4770      	bx	lr
 8000956:	bf00      	nop

08000958 <TIM_OC1PreloadConfig>:
  *     @arg TIM_OCPreload_Enable
  *     @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC1PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 8000958:	b480      	push	{r7}
 800095a:	b085      	sub	sp, #20
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
 8000960:	460b      	mov	r3, r1
 8000962:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 8000964:	2300      	movs	r3, #0
 8000966:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
  tmpccmr1 = TIMx->CCMR1;
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	8b1b      	ldrh	r3, [r3, #24]
 800096c:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC1PE Bit */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC1PE);
 800096e:	89fb      	ldrh	r3, [r7, #14]
 8000970:	f023 0308 	bic.w	r3, r3, #8
 8000974:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= TIM_OCPreload;
 8000976:	89fa      	ldrh	r2, [r7, #14]
 8000978:	887b      	ldrh	r3, [r7, #2]
 800097a:	4313      	orrs	r3, r2
 800097c:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	89fa      	ldrh	r2, [r7, #14]
 8000982:	831a      	strh	r2, [r3, #24]
}
 8000984:	3714      	adds	r7, #20
 8000986:	46bd      	mov	sp, r7
 8000988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098c:	4770      	bx	lr
 800098e:	bf00      	nop

08000990 <TIM_SetCompare1>:
  * @param  TIMx: where x can be 1 to 17 except 6 and 7 to select the TIM peripheral.
  * @param  Compare1: specifies the Capture Compare1 register new value.
  * @retval None
  */
void TIM_SetCompare1(TIM_TypeDef* TIMx, uint16_t Compare1)
{
 8000990:	b480      	push	{r7}
 8000992:	b083      	sub	sp, #12
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
 8000998:	460b      	mov	r3, r1
 800099a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  /* Set the Capture Compare1 Register value */
  TIMx->CCR1 = Compare1;
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	887a      	ldrh	r2, [r7, #2]
 80009a0:	869a      	strh	r2, [r3, #52]	; 0x34
}
 80009a2:	370c      	adds	r7, #12
 80009a4:	46bd      	mov	sp, r7
 80009a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009aa:	4770      	bx	lr

080009ac <TIM_GetITStatus>:
  *   - TIM_IT_Break is used only with TIM1, TIM8 and TIM15. 
  *   - TIM_IT_COM is used only with TIM1, TIM8, TIM15, TIM16 and TIM17.  
  * @retval The new state of the TIM_IT(SET or RESET).
  */
ITStatus TIM_GetITStatus(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 80009ac:	b480      	push	{r7}
 80009ae:	b085      	sub	sp, #20
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
 80009b4:	460b      	mov	r3, r1
 80009b6:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;  
 80009b8:	2300      	movs	r3, #0
 80009ba:	73fb      	strb	r3, [r7, #15]
  uint16_t itstatus = 0x0, itenable = 0x0;
 80009bc:	2300      	movs	r3, #0
 80009be:	81bb      	strh	r3, [r7, #12]
 80009c0:	2300      	movs	r3, #0
 80009c2:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	8a1b      	ldrh	r3, [r3, #16]
 80009c8:	b29a      	uxth	r2, r3
 80009ca:	887b      	ldrh	r3, [r7, #2]
 80009cc:	4013      	ands	r3, r2
 80009ce:	81bb      	strh	r3, [r7, #12]
  
  itenable = TIMx->DIER & TIM_IT;
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	899b      	ldrh	r3, [r3, #12]
 80009d4:	b29a      	uxth	r2, r3
 80009d6:	887b      	ldrh	r3, [r7, #2]
 80009d8:	4013      	ands	r3, r2
 80009da:	817b      	strh	r3, [r7, #10]
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 80009dc:	89bb      	ldrh	r3, [r7, #12]
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d005      	beq.n	80009ee <TIM_GetITStatus+0x42>
 80009e2:	897b      	ldrh	r3, [r7, #10]
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d002      	beq.n	80009ee <TIM_GetITStatus+0x42>
  {
    bitstatus = SET;
 80009e8:	2301      	movs	r3, #1
 80009ea:	73fb      	strb	r3, [r7, #15]
 80009ec:	e001      	b.n	80009f2 <TIM_GetITStatus+0x46>
  }
  else
  {
    bitstatus = RESET;
 80009ee:	2300      	movs	r3, #0
 80009f0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80009f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80009f4:	4618      	mov	r0, r3
 80009f6:	3714      	adds	r7, #20
 80009f8:	46bd      	mov	sp, r7
 80009fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fe:	4770      	bx	lr

08000a00 <TIM_ClearITPendingBit>:
  *   - TIM_IT_Break is used only with TIM1, TIM8 and TIM15. 
  *   - TIM_IT_COM is used only with TIM1, TIM8, TIM15, TIM16 and TIM17.    
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 8000a00:	b480      	push	{r7}
 8000a02:	b083      	sub	sp, #12
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
 8000a08:	460b      	mov	r3, r1
 8000a0a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 8000a0c:	887b      	ldrh	r3, [r7, #2]
 8000a0e:	43db      	mvns	r3, r3
 8000a10:	b29a      	uxth	r2, r3
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	821a      	strh	r2, [r3, #16]
}
 8000a16:	370c      	adds	r7, #12
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1e:	4770      	bx	lr

08000a20 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8000a20:	b480      	push	{r7}
 8000a22:	b083      	sub	sp, #12
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
 8000a28:	460b      	mov	r3, r1
 8000a2a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000a2c:	78fb      	ldrb	r3, [r7, #3]
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d006      	beq.n	8000a40 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8000a32:	4b09      	ldr	r3, [pc, #36]	; (8000a58 <RCC_APB2PeriphClockCmd+0x38>)
 8000a34:	4a08      	ldr	r2, [pc, #32]	; (8000a58 <RCC_APB2PeriphClockCmd+0x38>)
 8000a36:	6991      	ldr	r1, [r2, #24]
 8000a38:	687a      	ldr	r2, [r7, #4]
 8000a3a:	430a      	orrs	r2, r1
 8000a3c:	619a      	str	r2, [r3, #24]
 8000a3e:	e006      	b.n	8000a4e <RCC_APB2PeriphClockCmd+0x2e>
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8000a40:	4b05      	ldr	r3, [pc, #20]	; (8000a58 <RCC_APB2PeriphClockCmd+0x38>)
 8000a42:	4a05      	ldr	r2, [pc, #20]	; (8000a58 <RCC_APB2PeriphClockCmd+0x38>)
 8000a44:	6991      	ldr	r1, [r2, #24]
 8000a46:	687a      	ldr	r2, [r7, #4]
 8000a48:	43d2      	mvns	r2, r2
 8000a4a:	400a      	ands	r2, r1
 8000a4c:	619a      	str	r2, [r3, #24]
  }
}
 8000a4e:	370c      	adds	r7, #12
 8000a50:	46bd      	mov	sp, r7
 8000a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a56:	4770      	bx	lr
 8000a58:	40021000 	.word	0x40021000

08000a5c <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	b083      	sub	sp, #12
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
 8000a64:	460b      	mov	r3, r1
 8000a66:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000a68:	78fb      	ldrb	r3, [r7, #3]
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d006      	beq.n	8000a7c <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8000a6e:	4b09      	ldr	r3, [pc, #36]	; (8000a94 <RCC_APB1PeriphClockCmd+0x38>)
 8000a70:	4a08      	ldr	r2, [pc, #32]	; (8000a94 <RCC_APB1PeriphClockCmd+0x38>)
 8000a72:	69d1      	ldr	r1, [r2, #28]
 8000a74:	687a      	ldr	r2, [r7, #4]
 8000a76:	430a      	orrs	r2, r1
 8000a78:	61da      	str	r2, [r3, #28]
 8000a7a:	e006      	b.n	8000a8a <RCC_APB1PeriphClockCmd+0x2e>
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8000a7c:	4b05      	ldr	r3, [pc, #20]	; (8000a94 <RCC_APB1PeriphClockCmd+0x38>)
 8000a7e:	4a05      	ldr	r2, [pc, #20]	; (8000a94 <RCC_APB1PeriphClockCmd+0x38>)
 8000a80:	69d1      	ldr	r1, [r2, #28]
 8000a82:	687a      	ldr	r2, [r7, #4]
 8000a84:	43d2      	mvns	r2, r2
 8000a86:	400a      	ands	r2, r1
 8000a88:	61da      	str	r2, [r3, #28]
  }
}
 8000a8a:	370c      	adds	r7, #12
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a92:	4770      	bx	lr
 8000a94:	40021000 	.word	0x40021000

08000a98 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	b089      	sub	sp, #36	; 0x24
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
 8000aa0:	6039      	str	r1, [r7, #0]
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	61fb      	str	r3, [r7, #28]
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	613b      	str	r3, [r7, #16]
 8000aaa:	2300      	movs	r3, #0
 8000aac:	61bb      	str	r3, [r7, #24]
 8000aae:	2300      	movs	r3, #0
 8000ab0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0x00, pinmask = 0x00;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	617b      	str	r3, [r7, #20]
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
 8000aba:	683b      	ldr	r3, [r7, #0]
 8000abc:	78db      	ldrb	r3, [r3, #3]
 8000abe:	f003 030f 	and.w	r3, r3, #15
 8000ac2:	61fb      	str	r3, [r7, #28]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
 8000ac4:	683b      	ldr	r3, [r7, #0]
 8000ac6:	78db      	ldrb	r3, [r3, #3]
 8000ac8:	f003 0310 	and.w	r3, r3, #16
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d004      	beq.n	8000ada <GPIO_Init+0x42>
  { 
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
 8000ad0:	683b      	ldr	r3, [r7, #0]
 8000ad2:	789b      	ldrb	r3, [r3, #2]
 8000ad4:	69fa      	ldr	r2, [r7, #28]
 8000ad6:	4313      	orrs	r3, r2
 8000ad8:	61fb      	str	r3, [r7, #28]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
 8000ada:	683b      	ldr	r3, [r7, #0]
 8000adc:	881b      	ldrh	r3, [r3, #0]
 8000ade:	b2db      	uxtb	r3, r3
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d044      	beq.n	8000b6e <GPIO_Init+0xd6>
  {
    tmpreg = GPIOx->CRL;
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000aea:	2300      	movs	r3, #0
 8000aec:	61bb      	str	r3, [r7, #24]
 8000aee:	e038      	b.n	8000b62 <GPIO_Init+0xca>
    {
      pos = ((uint32_t)0x01) << pinpos;
 8000af0:	69bb      	ldr	r3, [r7, #24]
 8000af2:	2201      	movs	r2, #1
 8000af4:	fa02 f303 	lsl.w	r3, r2, r3
 8000af8:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000afa:	683b      	ldr	r3, [r7, #0]
 8000afc:	881b      	ldrh	r3, [r3, #0]
 8000afe:	461a      	mov	r2, r3
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	4013      	ands	r3, r2
 8000b04:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 8000b06:	693a      	ldr	r2, [r7, #16]
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	429a      	cmp	r2, r3
 8000b0c:	d126      	bne.n	8000b5c <GPIO_Init+0xc4>
      {
        pos = pinpos << 2;
 8000b0e:	69bb      	ldr	r3, [r7, #24]
 8000b10:	009b      	lsls	r3, r3, #2
 8000b12:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	220f      	movs	r2, #15
 8000b18:	fa02 f303 	lsl.w	r3, r2, r3
 8000b1c:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 8000b1e:	68bb      	ldr	r3, [r7, #8]
 8000b20:	43db      	mvns	r3, r3
 8000b22:	697a      	ldr	r2, [r7, #20]
 8000b24:	4013      	ands	r3, r2
 8000b26:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	69fa      	ldr	r2, [r7, #28]
 8000b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b30:	697a      	ldr	r2, [r7, #20]
 8000b32:	4313      	orrs	r3, r2
 8000b34:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8000b36:	683b      	ldr	r3, [r7, #0]
 8000b38:	78db      	ldrb	r3, [r3, #3]
 8000b3a:	2b28      	cmp	r3, #40	; 0x28
 8000b3c:	d105      	bne.n	8000b4a <GPIO_Init+0xb2>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 8000b3e:	69bb      	ldr	r3, [r7, #24]
 8000b40:	2201      	movs	r2, #1
 8000b42:	409a      	lsls	r2, r3
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	615a      	str	r2, [r3, #20]
 8000b48:	e008      	b.n	8000b5c <GPIO_Init+0xc4>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8000b4a:	683b      	ldr	r3, [r7, #0]
 8000b4c:	78db      	ldrb	r3, [r3, #3]
 8000b4e:	2b48      	cmp	r3, #72	; 0x48
 8000b50:	d104      	bne.n	8000b5c <GPIO_Init+0xc4>
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 8000b52:	69bb      	ldr	r3, [r7, #24]
 8000b54:	2201      	movs	r2, #1
 8000b56:	409a      	lsls	r2, r3
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	611a      	str	r2, [r3, #16]
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
  {
    tmpreg = GPIOx->CRL;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000b5c:	69bb      	ldr	r3, [r7, #24]
 8000b5e:	3301      	adds	r3, #1
 8000b60:	61bb      	str	r3, [r7, #24]
 8000b62:	69bb      	ldr	r3, [r7, #24]
 8000b64:	2b07      	cmp	r3, #7
 8000b66:	d9c3      	bls.n	8000af0 <GPIO_Init+0x58>
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	697a      	ldr	r2, [r7, #20]
 8000b6c:	601a      	str	r2, [r3, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
 8000b6e:	683b      	ldr	r3, [r7, #0]
 8000b70:	881b      	ldrh	r3, [r3, #0]
 8000b72:	2bff      	cmp	r3, #255	; 0xff
 8000b74:	d946      	bls.n	8000c04 <GPIO_Init+0x16c>
  {
    tmpreg = GPIOx->CRH;
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	685b      	ldr	r3, [r3, #4]
 8000b7a:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	61bb      	str	r3, [r7, #24]
 8000b80:	e03a      	b.n	8000bf8 <GPIO_Init+0x160>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
 8000b82:	69bb      	ldr	r3, [r7, #24]
 8000b84:	3308      	adds	r3, #8
 8000b86:	2201      	movs	r2, #1
 8000b88:	fa02 f303 	lsl.w	r3, r2, r3
 8000b8c:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
 8000b8e:	683b      	ldr	r3, [r7, #0]
 8000b90:	881b      	ldrh	r3, [r3, #0]
 8000b92:	461a      	mov	r2, r3
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	4013      	ands	r3, r2
 8000b98:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 8000b9a:	693a      	ldr	r2, [r7, #16]
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	429a      	cmp	r2, r3
 8000ba0:	d127      	bne.n	8000bf2 <GPIO_Init+0x15a>
      {
        pos = pinpos << 2;
 8000ba2:	69bb      	ldr	r3, [r7, #24]
 8000ba4:	009b      	lsls	r3, r3, #2
 8000ba6:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	220f      	movs	r2, #15
 8000bac:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb0:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 8000bb2:	68bb      	ldr	r3, [r7, #8]
 8000bb4:	43db      	mvns	r3, r3
 8000bb6:	697a      	ldr	r2, [r7, #20]
 8000bb8:	4013      	ands	r3, r2
 8000bba:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	69fa      	ldr	r2, [r7, #28]
 8000bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc4:	697a      	ldr	r2, [r7, #20]
 8000bc6:	4313      	orrs	r3, r2
 8000bc8:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8000bca:	683b      	ldr	r3, [r7, #0]
 8000bcc:	78db      	ldrb	r3, [r3, #3]
 8000bce:	2b28      	cmp	r3, #40	; 0x28
 8000bd0:	d105      	bne.n	8000bde <GPIO_Init+0x146>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8000bd2:	69bb      	ldr	r3, [r7, #24]
 8000bd4:	3308      	adds	r3, #8
 8000bd6:	2201      	movs	r2, #1
 8000bd8:	409a      	lsls	r2, r3
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	615a      	str	r2, [r3, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8000bde:	683b      	ldr	r3, [r7, #0]
 8000be0:	78db      	ldrb	r3, [r3, #3]
 8000be2:	2b48      	cmp	r3, #72	; 0x48
 8000be4:	d105      	bne.n	8000bf2 <GPIO_Init+0x15a>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8000be6:	69bb      	ldr	r3, [r7, #24]
 8000be8:	3308      	adds	r3, #8
 8000bea:	2201      	movs	r2, #1
 8000bec:	409a      	lsls	r2, r3
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	611a      	str	r2, [r3, #16]
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
  {
    tmpreg = GPIOx->CRH;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000bf2:	69bb      	ldr	r3, [r7, #24]
 8000bf4:	3301      	adds	r3, #1
 8000bf6:	61bb      	str	r3, [r7, #24]
 8000bf8:	69bb      	ldr	r3, [r7, #24]
 8000bfa:	2b07      	cmp	r3, #7
 8000bfc:	d9c1      	bls.n	8000b82 <GPIO_Init+0xea>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
        }
      }
    }
    GPIOx->CRH = tmpreg;
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	697a      	ldr	r2, [r7, #20]
 8000c02:	605a      	str	r2, [r3, #4]
  }
}
 8000c04:	3724      	adds	r7, #36	; 0x24
 8000c06:	46bd      	mov	sp, r7
 8000c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0c:	4770      	bx	lr
 8000c0e:	bf00      	nop

08000c10 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8000c10:	b480      	push	{r7}
 8000c12:	b087      	sub	sp, #28
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
  uint32_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	617b      	str	r3, [r7, #20]
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	613b      	str	r3, [r7, #16]
 8000c20:	230f      	movs	r3, #15
 8000c22:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	78db      	ldrb	r3, [r3, #3]
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d038      	beq.n	8000c9e <NVIC_Init+0x8e>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8000c2c:	4b26      	ldr	r3, [pc, #152]	; (8000cc8 <NVIC_Init+0xb8>)
 8000c2e:	68db      	ldr	r3, [r3, #12]
 8000c30:	43db      	mvns	r3, r3
 8000c32:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000c36:	0a1b      	lsrs	r3, r3, #8
 8000c38:	617b      	str	r3, [r7, #20]
    tmppre = (0x4 - tmppriority);
 8000c3a:	697b      	ldr	r3, [r7, #20]
 8000c3c:	f1c3 0304 	rsb	r3, r3, #4
 8000c40:	613b      	str	r3, [r7, #16]
    tmpsub = tmpsub >> tmppriority;
 8000c42:	697b      	ldr	r3, [r7, #20]
 8000c44:	68fa      	ldr	r2, [r7, #12]
 8000c46:	fa22 f303 	lsr.w	r3, r2, r3
 8000c4a:	60fb      	str	r3, [r7, #12]

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	785b      	ldrb	r3, [r3, #1]
 8000c50:	461a      	mov	r2, r3
 8000c52:	693b      	ldr	r3, [r7, #16]
 8000c54:	fa02 f303 	lsl.w	r3, r2, r3
 8000c58:	617b      	str	r3, [r7, #20]
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	789b      	ldrb	r3, [r3, #2]
 8000c5e:	461a      	mov	r2, r3
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	4013      	ands	r3, r2
 8000c64:	697a      	ldr	r2, [r7, #20]
 8000c66:	4313      	orrs	r3, r2
 8000c68:	617b      	str	r3, [r7, #20]
    tmppriority = tmppriority << 0x04;
 8000c6a:	697b      	ldr	r3, [r7, #20]
 8000c6c:	011b      	lsls	r3, r3, #4
 8000c6e:	617b      	str	r3, [r7, #20]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8000c70:	4916      	ldr	r1, [pc, #88]	; (8000ccc <NVIC_Init+0xbc>)
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	781b      	ldrb	r3, [r3, #0]
 8000c76:	697a      	ldr	r2, [r7, #20]
 8000c78:	b2d2      	uxtb	r2, r2
 8000c7a:	440b      	add	r3, r1
 8000c7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000c80:	4b12      	ldr	r3, [pc, #72]	; (8000ccc <NVIC_Init+0xbc>)
 8000c82:	687a      	ldr	r2, [r7, #4]
 8000c84:	7812      	ldrb	r2, [r2, #0]
 8000c86:	0952      	lsrs	r2, r2, #5
 8000c88:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000c8a:	6879      	ldr	r1, [r7, #4]
 8000c8c:	7809      	ldrb	r1, [r1, #0]
 8000c8e:	f001 011f 	and.w	r1, r1, #31
 8000c92:	2001      	movs	r0, #1
 8000c94:	fa00 f101 	lsl.w	r1, r0, r1
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000c98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8000c9c:	e00e      	b.n	8000cbc <NVIC_Init+0xac>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000c9e:	4b0b      	ldr	r3, [pc, #44]	; (8000ccc <NVIC_Init+0xbc>)
 8000ca0:	687a      	ldr	r2, [r7, #4]
 8000ca2:	7812      	ldrb	r2, [r2, #0]
 8000ca4:	0952      	lsrs	r2, r2, #5
 8000ca6:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000ca8:	6879      	ldr	r1, [r7, #4]
 8000caa:	7809      	ldrb	r1, [r1, #0]
 8000cac:	f001 011f 	and.w	r1, r1, #31
 8000cb0:	2001      	movs	r0, #1
 8000cb2:	fa00 f101 	lsl.w	r1, r0, r1
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000cb6:	3220      	adds	r2, #32
 8000cb8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8000cbc:	371c      	adds	r7, #28
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop
 8000cc8:	e000ed00 	.word	0xe000ed00
 8000ccc:	e000e100 	.word	0xe000e100

08000cd0 <__libc_init_array>:
 8000cd0:	b570      	push	{r4, r5, r6, lr}
 8000cd2:	4b0e      	ldr	r3, [pc, #56]	; (8000d0c <__libc_init_array+0x3c>)
 8000cd4:	4d0e      	ldr	r5, [pc, #56]	; (8000d10 <__libc_init_array+0x40>)
 8000cd6:	2400      	movs	r4, #0
 8000cd8:	1aed      	subs	r5, r5, r3
 8000cda:	10ad      	asrs	r5, r5, #2
 8000cdc:	461e      	mov	r6, r3
 8000cde:	42ac      	cmp	r4, r5
 8000ce0:	d004      	beq.n	8000cec <__libc_init_array+0x1c>
 8000ce2:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8000ce6:	4790      	blx	r2
 8000ce8:	3401      	adds	r4, #1
 8000cea:	e7f8      	b.n	8000cde <__libc_init_array+0xe>
 8000cec:	f000 f816 	bl	8000d1c <_init>
 8000cf0:	4d08      	ldr	r5, [pc, #32]	; (8000d14 <__libc_init_array+0x44>)
 8000cf2:	4b09      	ldr	r3, [pc, #36]	; (8000d18 <__libc_init_array+0x48>)
 8000cf4:	2400      	movs	r4, #0
 8000cf6:	1aed      	subs	r5, r5, r3
 8000cf8:	10ad      	asrs	r5, r5, #2
 8000cfa:	461e      	mov	r6, r3
 8000cfc:	42ac      	cmp	r4, r5
 8000cfe:	d004      	beq.n	8000d0a <__libc_init_array+0x3a>
 8000d00:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8000d04:	4790      	blx	r2
 8000d06:	3401      	adds	r4, #1
 8000d08:	e7f8      	b.n	8000cfc <__libc_init_array+0x2c>
 8000d0a:	bd70      	pop	{r4, r5, r6, pc}
 8000d0c:	08000d34 	.word	0x08000d34
 8000d10:	08000d34 	.word	0x08000d34
 8000d14:	08000d38 	.word	0x08000d38
 8000d18:	08000d34 	.word	0x08000d34

08000d1c <_init>:
 8000d1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d1e:	bf00      	nop
 8000d20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d22:	bc08      	pop	{r3}
 8000d24:	469e      	mov	lr, r3
 8000d26:	4770      	bx	lr

08000d28 <_fini>:
 8000d28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d2a:	bf00      	nop
 8000d2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d2e:	bc08      	pop	{r3}
 8000d30:	469e      	mov	lr, r3
 8000d32:	4770      	bx	lr
