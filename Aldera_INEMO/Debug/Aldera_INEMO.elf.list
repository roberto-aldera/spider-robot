
Aldera_INEMO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003fac  080001e8  080001e8  000081e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .init_array   00000004  08004194  08004194  0000c194  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .fini_array   00000004  08004198  08004198  0000c198  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000014  20000000  0800419c  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          0000052c  20000014  080041b0  00010014  2**2
                  ALLOC
  6 ._user_heap_stack 00000200  20000540  080041b0  00010540  2**0
                  ALLOC
  7 .ARM.attributes 00000029  00000000  00000000  00010014  2**0
                  CONTENTS, READONLY
  8 .debug_info   000086d5  00000000  00000000  0001003d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00001a3b  00000000  00000000  00018712  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000b18  00000000  00000000  0001a150  2**3
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000009d0  00000000  00000000  0001ac68  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000423b  00000000  00000000  0001b638  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002f93  00000000  00000000  0001f873  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .comment      00000082  00000000  00000000  00022806  2**0
                  CONTENTS, READONLY
 15 .debug_frame  00002188  00000000  00000000  00022888  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	20000014 	.word	0x20000014
 8000204:	00000000 	.word	0x00000000
 8000208:	0800417c 	.word	0x0800417c

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4903      	ldr	r1, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	0800417c 	.word	0x0800417c
 8000224:	20000018 	.word	0x20000018

08000228 <__aeabi_drsub>:
 8000228:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800022c:	e002      	b.n	8000234 <__adddf3>
 800022e:	bf00      	nop

08000230 <__aeabi_dsub>:
 8000230:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000234 <__adddf3>:
 8000234:	b530      	push	{r4, r5, lr}
 8000236:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800023a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800023e:	ea94 0f05 	teq	r4, r5
 8000242:	bf08      	it	eq
 8000244:	ea90 0f02 	teqeq	r0, r2
 8000248:	bf1f      	itttt	ne
 800024a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800024e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000252:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000256:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800025a:	f000 80e2 	beq.w	8000422 <__adddf3+0x1ee>
 800025e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000262:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000266:	bfb8      	it	lt
 8000268:	426d      	neglt	r5, r5
 800026a:	dd0c      	ble.n	8000286 <__adddf3+0x52>
 800026c:	442c      	add	r4, r5
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	ea82 0000 	eor.w	r0, r2, r0
 800027a:	ea83 0101 	eor.w	r1, r3, r1
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	2d36      	cmp	r5, #54	; 0x36
 8000288:	bf88      	it	hi
 800028a:	bd30      	pophi	{r4, r5, pc}
 800028c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000290:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000294:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000298:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800029c:	d002      	beq.n	80002a4 <__adddf3+0x70>
 800029e:	4240      	negs	r0, r0
 80002a0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002a4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002a8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002ac:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b0:	d002      	beq.n	80002b8 <__adddf3+0x84>
 80002b2:	4252      	negs	r2, r2
 80002b4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b8:	ea94 0f05 	teq	r4, r5
 80002bc:	f000 80a7 	beq.w	800040e <__adddf3+0x1da>
 80002c0:	f1a4 0401 	sub.w	r4, r4, #1
 80002c4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002c8:	db0d      	blt.n	80002e6 <__adddf3+0xb2>
 80002ca:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ce:	fa22 f205 	lsr.w	r2, r2, r5
 80002d2:	1880      	adds	r0, r0, r2
 80002d4:	f141 0100 	adc.w	r1, r1, #0
 80002d8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002dc:	1880      	adds	r0, r0, r2
 80002de:	fa43 f305 	asr.w	r3, r3, r5
 80002e2:	4159      	adcs	r1, r3
 80002e4:	e00e      	b.n	8000304 <__adddf3+0xd0>
 80002e6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ea:	f10e 0e20 	add.w	lr, lr, #32
 80002ee:	2a01      	cmp	r2, #1
 80002f0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002f4:	bf28      	it	cs
 80002f6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002fa:	fa43 f305 	asr.w	r3, r3, r5
 80002fe:	18c0      	adds	r0, r0, r3
 8000300:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000304:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000308:	d507      	bpl.n	800031a <__adddf3+0xe6>
 800030a:	f04f 0e00 	mov.w	lr, #0
 800030e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000312:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000316:	eb6e 0101 	sbc.w	r1, lr, r1
 800031a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800031e:	d31b      	bcc.n	8000358 <__adddf3+0x124>
 8000320:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000324:	d30c      	bcc.n	8000340 <__adddf3+0x10c>
 8000326:	0849      	lsrs	r1, r1, #1
 8000328:	ea5f 0030 	movs.w	r0, r0, rrx
 800032c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000330:	f104 0401 	add.w	r4, r4, #1
 8000334:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000338:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800033c:	f080 809a 	bcs.w	8000474 <__adddf3+0x240>
 8000340:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000344:	bf08      	it	eq
 8000346:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800034a:	f150 0000 	adcs.w	r0, r0, #0
 800034e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000352:	ea41 0105 	orr.w	r1, r1, r5
 8000356:	bd30      	pop	{r4, r5, pc}
 8000358:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800035c:	4140      	adcs	r0, r0
 800035e:	eb41 0101 	adc.w	r1, r1, r1
 8000362:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000366:	f1a4 0401 	sub.w	r4, r4, #1
 800036a:	d1e9      	bne.n	8000340 <__adddf3+0x10c>
 800036c:	f091 0f00 	teq	r1, #0
 8000370:	bf04      	itt	eq
 8000372:	4601      	moveq	r1, r0
 8000374:	2000      	moveq	r0, #0
 8000376:	fab1 f381 	clz	r3, r1
 800037a:	bf08      	it	eq
 800037c:	3320      	addeq	r3, #32
 800037e:	f1a3 030b 	sub.w	r3, r3, #11
 8000382:	f1b3 0220 	subs.w	r2, r3, #32
 8000386:	da0c      	bge.n	80003a2 <__adddf3+0x16e>
 8000388:	320c      	adds	r2, #12
 800038a:	dd08      	ble.n	800039e <__adddf3+0x16a>
 800038c:	f102 0c14 	add.w	ip, r2, #20
 8000390:	f1c2 020c 	rsb	r2, r2, #12
 8000394:	fa01 f00c 	lsl.w	r0, r1, ip
 8000398:	fa21 f102 	lsr.w	r1, r1, r2
 800039c:	e00c      	b.n	80003b8 <__adddf3+0x184>
 800039e:	f102 0214 	add.w	r2, r2, #20
 80003a2:	bfd8      	it	le
 80003a4:	f1c2 0c20 	rsble	ip, r2, #32
 80003a8:	fa01 f102 	lsl.w	r1, r1, r2
 80003ac:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b0:	bfdc      	itt	le
 80003b2:	ea41 010c 	orrle.w	r1, r1, ip
 80003b6:	4090      	lslle	r0, r2
 80003b8:	1ae4      	subs	r4, r4, r3
 80003ba:	bfa2      	ittt	ge
 80003bc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c0:	4329      	orrge	r1, r5
 80003c2:	bd30      	popge	{r4, r5, pc}
 80003c4:	ea6f 0404 	mvn.w	r4, r4
 80003c8:	3c1f      	subs	r4, #31
 80003ca:	da1c      	bge.n	8000406 <__adddf3+0x1d2>
 80003cc:	340c      	adds	r4, #12
 80003ce:	dc0e      	bgt.n	80003ee <__adddf3+0x1ba>
 80003d0:	f104 0414 	add.w	r4, r4, #20
 80003d4:	f1c4 0220 	rsb	r2, r4, #32
 80003d8:	fa20 f004 	lsr.w	r0, r0, r4
 80003dc:	fa01 f302 	lsl.w	r3, r1, r2
 80003e0:	ea40 0003 	orr.w	r0, r0, r3
 80003e4:	fa21 f304 	lsr.w	r3, r1, r4
 80003e8:	ea45 0103 	orr.w	r1, r5, r3
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f1c4 040c 	rsb	r4, r4, #12
 80003f2:	f1c4 0220 	rsb	r2, r4, #32
 80003f6:	fa20 f002 	lsr.w	r0, r0, r2
 80003fa:	fa01 f304 	lsl.w	r3, r1, r4
 80003fe:	ea40 0003 	orr.w	r0, r0, r3
 8000402:	4629      	mov	r1, r5
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	fa21 f004 	lsr.w	r0, r1, r4
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	f094 0f00 	teq	r4, #0
 8000412:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000416:	bf06      	itte	eq
 8000418:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800041c:	3401      	addeq	r4, #1
 800041e:	3d01      	subne	r5, #1
 8000420:	e74e      	b.n	80002c0 <__adddf3+0x8c>
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf18      	it	ne
 8000428:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800042c:	d029      	beq.n	8000482 <__adddf3+0x24e>
 800042e:	ea94 0f05 	teq	r4, r5
 8000432:	bf08      	it	eq
 8000434:	ea90 0f02 	teqeq	r0, r2
 8000438:	d005      	beq.n	8000446 <__adddf3+0x212>
 800043a:	ea54 0c00 	orrs.w	ip, r4, r0
 800043e:	bf04      	itt	eq
 8000440:	4619      	moveq	r1, r3
 8000442:	4610      	moveq	r0, r2
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	ea91 0f03 	teq	r1, r3
 800044a:	bf1e      	ittt	ne
 800044c:	2100      	movne	r1, #0
 800044e:	2000      	movne	r0, #0
 8000450:	bd30      	popne	{r4, r5, pc}
 8000452:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000456:	d105      	bne.n	8000464 <__adddf3+0x230>
 8000458:	0040      	lsls	r0, r0, #1
 800045a:	4149      	adcs	r1, r1
 800045c:	bf28      	it	cs
 800045e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000462:	bd30      	pop	{r4, r5, pc}
 8000464:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000468:	bf3c      	itt	cc
 800046a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800046e:	bd30      	popcc	{r4, r5, pc}
 8000470:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000474:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000478:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800047c:	f04f 0000 	mov.w	r0, #0
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000486:	bf1a      	itte	ne
 8000488:	4619      	movne	r1, r3
 800048a:	4610      	movne	r0, r2
 800048c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000490:	bf1c      	itt	ne
 8000492:	460b      	movne	r3, r1
 8000494:	4602      	movne	r2, r0
 8000496:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800049a:	bf06      	itte	eq
 800049c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a0:	ea91 0f03 	teqeq	r1, r3
 80004a4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004a8:	bd30      	pop	{r4, r5, pc}
 80004aa:	bf00      	nop

080004ac <__aeabi_ui2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f04f 0500 	mov.w	r5, #0
 80004c4:	f04f 0100 	mov.w	r1, #0
 80004c8:	e750      	b.n	800036c <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_i2d>:
 80004cc:	f090 0f00 	teq	r0, #0
 80004d0:	bf04      	itt	eq
 80004d2:	2100      	moveq	r1, #0
 80004d4:	4770      	bxeq	lr
 80004d6:	b530      	push	{r4, r5, lr}
 80004d8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004dc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004e4:	bf48      	it	mi
 80004e6:	4240      	negmi	r0, r0
 80004e8:	f04f 0100 	mov.w	r1, #0
 80004ec:	e73e      	b.n	800036c <__adddf3+0x138>
 80004ee:	bf00      	nop

080004f0 <__aeabi_f2d>:
 80004f0:	0042      	lsls	r2, r0, #1
 80004f2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004f6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004fa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004fe:	bf1f      	itttt	ne
 8000500:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000504:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000508:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800050c:	4770      	bxne	lr
 800050e:	f092 0f00 	teq	r2, #0
 8000512:	bf14      	ite	ne
 8000514:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000518:	4770      	bxeq	lr
 800051a:	b530      	push	{r4, r5, lr}
 800051c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000520:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000524:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000528:	e720      	b.n	800036c <__adddf3+0x138>
 800052a:	bf00      	nop

0800052c <__aeabi_ul2d>:
 800052c:	ea50 0201 	orrs.w	r2, r0, r1
 8000530:	bf08      	it	eq
 8000532:	4770      	bxeq	lr
 8000534:	b530      	push	{r4, r5, lr}
 8000536:	f04f 0500 	mov.w	r5, #0
 800053a:	e00a      	b.n	8000552 <__aeabi_l2d+0x16>

0800053c <__aeabi_l2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800054a:	d502      	bpl.n	8000552 <__aeabi_l2d+0x16>
 800054c:	4240      	negs	r0, r0
 800054e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000552:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000556:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800055a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800055e:	f43f aedc 	beq.w	800031a <__adddf3+0xe6>
 8000562:	f04f 0203 	mov.w	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000572:	bf18      	it	ne
 8000574:	3203      	addne	r2, #3
 8000576:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800057a:	f1c2 0320 	rsb	r3, r2, #32
 800057e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000582:	fa20 f002 	lsr.w	r0, r0, r2
 8000586:	fa01 fe03 	lsl.w	lr, r1, r3
 800058a:	ea40 000e 	orr.w	r0, r0, lr
 800058e:	fa21 f102 	lsr.w	r1, r1, r2
 8000592:	4414      	add	r4, r2
 8000594:	e6c1      	b.n	800031a <__adddf3+0xe6>
 8000596:	bf00      	nop

08000598 <__aeabi_dmul>:
 8000598:	b570      	push	{r4, r5, r6, lr}
 800059a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800059e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005a2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005a6:	bf1d      	ittte	ne
 80005a8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005ac:	ea94 0f0c 	teqne	r4, ip
 80005b0:	ea95 0f0c 	teqne	r5, ip
 80005b4:	f000 f8de 	bleq	8000774 <__aeabi_dmul+0x1dc>
 80005b8:	442c      	add	r4, r5
 80005ba:	ea81 0603 	eor.w	r6, r1, r3
 80005be:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005c2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005c6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ca:	bf18      	it	ne
 80005cc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d8:	d038      	beq.n	800064c <__aeabi_dmul+0xb4>
 80005da:	fba0 ce02 	umull	ip, lr, r0, r2
 80005de:	f04f 0500 	mov.w	r5, #0
 80005e2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005e6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ea:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ee:	f04f 0600 	mov.w	r6, #0
 80005f2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005f6:	f09c 0f00 	teq	ip, #0
 80005fa:	bf18      	it	ne
 80005fc:	f04e 0e01 	orrne.w	lr, lr, #1
 8000600:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000604:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000608:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800060c:	d204      	bcs.n	8000618 <__aeabi_dmul+0x80>
 800060e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000612:	416d      	adcs	r5, r5
 8000614:	eb46 0606 	adc.w	r6, r6, r6
 8000618:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800061c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000620:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000624:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000628:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800062c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000630:	bf88      	it	hi
 8000632:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000636:	d81e      	bhi.n	8000676 <__aeabi_dmul+0xde>
 8000638:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800063c:	bf08      	it	eq
 800063e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000642:	f150 0000 	adcs.w	r0, r0, #0
 8000646:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800064a:	bd70      	pop	{r4, r5, r6, pc}
 800064c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000650:	ea46 0101 	orr.w	r1, r6, r1
 8000654:	ea40 0002 	orr.w	r0, r0, r2
 8000658:	ea81 0103 	eor.w	r1, r1, r3
 800065c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000660:	bfc2      	ittt	gt
 8000662:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000666:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800066a:	bd70      	popgt	{r4, r5, r6, pc}
 800066c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000670:	f04f 0e00 	mov.w	lr, #0
 8000674:	3c01      	subs	r4, #1
 8000676:	f300 80ab 	bgt.w	80007d0 <__aeabi_dmul+0x238>
 800067a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800067e:	bfde      	ittt	le
 8000680:	2000      	movle	r0, #0
 8000682:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000686:	bd70      	pople	{r4, r5, r6, pc}
 8000688:	f1c4 0400 	rsb	r4, r4, #0
 800068c:	3c20      	subs	r4, #32
 800068e:	da35      	bge.n	80006fc <__aeabi_dmul+0x164>
 8000690:	340c      	adds	r4, #12
 8000692:	dc1b      	bgt.n	80006cc <__aeabi_dmul+0x134>
 8000694:	f104 0414 	add.w	r4, r4, #20
 8000698:	f1c4 0520 	rsb	r5, r4, #32
 800069c:	fa00 f305 	lsl.w	r3, r0, r5
 80006a0:	fa20 f004 	lsr.w	r0, r0, r4
 80006a4:	fa01 f205 	lsl.w	r2, r1, r5
 80006a8:	ea40 0002 	orr.w	r0, r0, r2
 80006ac:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006b0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b8:	fa21 f604 	lsr.w	r6, r1, r4
 80006bc:	eb42 0106 	adc.w	r1, r2, r6
 80006c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c4:	bf08      	it	eq
 80006c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f1c4 040c 	rsb	r4, r4, #12
 80006d0:	f1c4 0520 	rsb	r5, r4, #32
 80006d4:	fa00 f304 	lsl.w	r3, r0, r4
 80006d8:	fa20 f005 	lsr.w	r0, r0, r5
 80006dc:	fa01 f204 	lsl.w	r2, r1, r4
 80006e0:	ea40 0002 	orr.w	r0, r0, r2
 80006e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ec:	f141 0100 	adc.w	r1, r1, #0
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f1c4 0520 	rsb	r5, r4, #32
 8000700:	fa00 f205 	lsl.w	r2, r0, r5
 8000704:	ea4e 0e02 	orr.w	lr, lr, r2
 8000708:	fa20 f304 	lsr.w	r3, r0, r4
 800070c:	fa01 f205 	lsl.w	r2, r1, r5
 8000710:	ea43 0302 	orr.w	r3, r3, r2
 8000714:	fa21 f004 	lsr.w	r0, r1, r4
 8000718:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800071c:	fa21 f204 	lsr.w	r2, r1, r4
 8000720:	ea20 0002 	bic.w	r0, r0, r2
 8000724:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000728:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800072c:	bf08      	it	eq
 800072e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000732:	bd70      	pop	{r4, r5, r6, pc}
 8000734:	f094 0f00 	teq	r4, #0
 8000738:	d10f      	bne.n	800075a <__aeabi_dmul+0x1c2>
 800073a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800073e:	0040      	lsls	r0, r0, #1
 8000740:	eb41 0101 	adc.w	r1, r1, r1
 8000744:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000748:	bf08      	it	eq
 800074a:	3c01      	subeq	r4, #1
 800074c:	d0f7      	beq.n	800073e <__aeabi_dmul+0x1a6>
 800074e:	ea41 0106 	orr.w	r1, r1, r6
 8000752:	f095 0f00 	teq	r5, #0
 8000756:	bf18      	it	ne
 8000758:	4770      	bxne	lr
 800075a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800075e:	0052      	lsls	r2, r2, #1
 8000760:	eb43 0303 	adc.w	r3, r3, r3
 8000764:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000768:	bf08      	it	eq
 800076a:	3d01      	subeq	r5, #1
 800076c:	d0f7      	beq.n	800075e <__aeabi_dmul+0x1c6>
 800076e:	ea43 0306 	orr.w	r3, r3, r6
 8000772:	4770      	bx	lr
 8000774:	ea94 0f0c 	teq	r4, ip
 8000778:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800077c:	bf18      	it	ne
 800077e:	ea95 0f0c 	teqne	r5, ip
 8000782:	d00c      	beq.n	800079e <__aeabi_dmul+0x206>
 8000784:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000788:	bf18      	it	ne
 800078a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800078e:	d1d1      	bne.n	8000734 <__aeabi_dmul+0x19c>
 8000790:	ea81 0103 	eor.w	r1, r1, r3
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	f04f 0000 	mov.w	r0, #0
 800079c:	bd70      	pop	{r4, r5, r6, pc}
 800079e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a2:	bf06      	itte	eq
 80007a4:	4610      	moveq	r0, r2
 80007a6:	4619      	moveq	r1, r3
 80007a8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ac:	d019      	beq.n	80007e2 <__aeabi_dmul+0x24a>
 80007ae:	ea94 0f0c 	teq	r4, ip
 80007b2:	d102      	bne.n	80007ba <__aeabi_dmul+0x222>
 80007b4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b8:	d113      	bne.n	80007e2 <__aeabi_dmul+0x24a>
 80007ba:	ea95 0f0c 	teq	r5, ip
 80007be:	d105      	bne.n	80007cc <__aeabi_dmul+0x234>
 80007c0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007c4:	bf1c      	itt	ne
 80007c6:	4610      	movne	r0, r2
 80007c8:	4619      	movne	r1, r3
 80007ca:	d10a      	bne.n	80007e2 <__aeabi_dmul+0x24a>
 80007cc:	ea81 0103 	eor.w	r1, r1, r3
 80007d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007d4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007dc:	f04f 0000 	mov.w	r0, #0
 80007e0:	bd70      	pop	{r4, r5, r6, pc}
 80007e2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ea:	bd70      	pop	{r4, r5, r6, pc}

080007ec <__aeabi_ddiv>:
 80007ec:	b570      	push	{r4, r5, r6, lr}
 80007ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007fa:	bf1d      	ittte	ne
 80007fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000800:	ea94 0f0c 	teqne	r4, ip
 8000804:	ea95 0f0c 	teqne	r5, ip
 8000808:	f000 f8a7 	bleq	800095a <__aeabi_ddiv+0x16e>
 800080c:	eba4 0405 	sub.w	r4, r4, r5
 8000810:	ea81 0e03 	eor.w	lr, r1, r3
 8000814:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000818:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800081c:	f000 8088 	beq.w	8000930 <__aeabi_ddiv+0x144>
 8000820:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000824:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000828:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800082c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000830:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000834:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000838:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800083c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000840:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000844:	429d      	cmp	r5, r3
 8000846:	bf08      	it	eq
 8000848:	4296      	cmpeq	r6, r2
 800084a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800084e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000852:	d202      	bcs.n	800085a <__aeabi_ddiv+0x6e>
 8000854:	085b      	lsrs	r3, r3, #1
 8000856:	ea4f 0232 	mov.w	r2, r2, rrx
 800085a:	1ab6      	subs	r6, r6, r2
 800085c:	eb65 0503 	sbc.w	r5, r5, r3
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800086a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008cc:	d018      	beq.n	8000900 <__aeabi_ddiv+0x114>
 80008ce:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008d2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008d6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008da:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008de:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008e2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008e6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ea:	d1c0      	bne.n	800086e <__aeabi_ddiv+0x82>
 80008ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008f0:	d10b      	bne.n	800090a <__aeabi_ddiv+0x11e>
 80008f2:	ea41 0100 	orr.w	r1, r1, r0
 80008f6:	f04f 0000 	mov.w	r0, #0
 80008fa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008fe:	e7b6      	b.n	800086e <__aeabi_ddiv+0x82>
 8000900:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000904:	bf04      	itt	eq
 8000906:	4301      	orreq	r1, r0
 8000908:	2000      	moveq	r0, #0
 800090a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800090e:	bf88      	it	hi
 8000910:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000914:	f63f aeaf 	bhi.w	8000676 <__aeabi_dmul+0xde>
 8000918:	ebb5 0c03 	subs.w	ip, r5, r3
 800091c:	bf04      	itt	eq
 800091e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000922:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000926:	f150 0000 	adcs.w	r0, r0, #0
 800092a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800092e:	bd70      	pop	{r4, r5, r6, pc}
 8000930:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000934:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000938:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800093c:	bfc2      	ittt	gt
 800093e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000942:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000946:	bd70      	popgt	{r4, r5, r6, pc}
 8000948:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800094c:	f04f 0e00 	mov.w	lr, #0
 8000950:	3c01      	subs	r4, #1
 8000952:	e690      	b.n	8000676 <__aeabi_dmul+0xde>
 8000954:	ea45 0e06 	orr.w	lr, r5, r6
 8000958:	e68d      	b.n	8000676 <__aeabi_dmul+0xde>
 800095a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800095e:	ea94 0f0c 	teq	r4, ip
 8000962:	bf08      	it	eq
 8000964:	ea95 0f0c 	teqeq	r5, ip
 8000968:	f43f af3b 	beq.w	80007e2 <__aeabi_dmul+0x24a>
 800096c:	ea94 0f0c 	teq	r4, ip
 8000970:	d10a      	bne.n	8000988 <__aeabi_ddiv+0x19c>
 8000972:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000976:	f47f af34 	bne.w	80007e2 <__aeabi_dmul+0x24a>
 800097a:	ea95 0f0c 	teq	r5, ip
 800097e:	f47f af25 	bne.w	80007cc <__aeabi_dmul+0x234>
 8000982:	4610      	mov	r0, r2
 8000984:	4619      	mov	r1, r3
 8000986:	e72c      	b.n	80007e2 <__aeabi_dmul+0x24a>
 8000988:	ea95 0f0c 	teq	r5, ip
 800098c:	d106      	bne.n	800099c <__aeabi_ddiv+0x1b0>
 800098e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000992:	f43f aefd 	beq.w	8000790 <__aeabi_dmul+0x1f8>
 8000996:	4610      	mov	r0, r2
 8000998:	4619      	mov	r1, r3
 800099a:	e722      	b.n	80007e2 <__aeabi_dmul+0x24a>
 800099c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009a0:	bf18      	it	ne
 80009a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009a6:	f47f aec5 	bne.w	8000734 <__aeabi_dmul+0x19c>
 80009aa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009ae:	f47f af0d 	bne.w	80007cc <__aeabi_dmul+0x234>
 80009b2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009b6:	f47f aeeb 	bne.w	8000790 <__aeabi_dmul+0x1f8>
 80009ba:	e712      	b.n	80007e2 <__aeabi_dmul+0x24a>

080009bc <__aeabi_d2f>:
 80009bc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009c0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009c4:	bf24      	itt	cs
 80009c6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009ca:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009ce:	d90d      	bls.n	80009ec <__aeabi_d2f+0x30>
 80009d0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009d4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009d8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009dc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009e0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009e4:	bf08      	it	eq
 80009e6:	f020 0001 	biceq.w	r0, r0, #1
 80009ea:	4770      	bx	lr
 80009ec:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009f0:	d121      	bne.n	8000a36 <__aeabi_d2f+0x7a>
 80009f2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009f6:	bfbc      	itt	lt
 80009f8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009fc:	4770      	bxlt	lr
 80009fe:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a02:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a06:	f1c2 0218 	rsb	r2, r2, #24
 8000a0a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a0e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a12:	fa20 f002 	lsr.w	r0, r0, r2
 8000a16:	bf18      	it	ne
 8000a18:	f040 0001 	orrne.w	r0, r0, #1
 8000a1c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a20:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a24:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a28:	ea40 000c 	orr.w	r0, r0, ip
 8000a2c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a30:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a34:	e7cc      	b.n	80009d0 <__aeabi_d2f+0x14>
 8000a36:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a3a:	d107      	bne.n	8000a4c <__aeabi_d2f+0x90>
 8000a3c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a40:	bf1e      	ittt	ne
 8000a42:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a46:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a4a:	4770      	bxne	lr
 8000a4c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a50:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a54:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop

08000a5c <__aeabi_frsub>:
 8000a5c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a60:	e002      	b.n	8000a68 <__addsf3>
 8000a62:	bf00      	nop

08000a64 <__aeabi_fsub>:
 8000a64:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a68 <__addsf3>:
 8000a68:	0042      	lsls	r2, r0, #1
 8000a6a:	bf1f      	itttt	ne
 8000a6c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a70:	ea92 0f03 	teqne	r2, r3
 8000a74:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000a78:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a7c:	d06a      	beq.n	8000b54 <__addsf3+0xec>
 8000a7e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000a82:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000a86:	bfc1      	itttt	gt
 8000a88:	18d2      	addgt	r2, r2, r3
 8000a8a:	4041      	eorgt	r1, r0
 8000a8c:	4048      	eorgt	r0, r1
 8000a8e:	4041      	eorgt	r1, r0
 8000a90:	bfb8      	it	lt
 8000a92:	425b      	neglt	r3, r3
 8000a94:	2b19      	cmp	r3, #25
 8000a96:	bf88      	it	hi
 8000a98:	4770      	bxhi	lr
 8000a9a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000a9e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000aa2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000aa6:	bf18      	it	ne
 8000aa8:	4240      	negne	r0, r0
 8000aaa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aae:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ab2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000ab6:	bf18      	it	ne
 8000ab8:	4249      	negne	r1, r1
 8000aba:	ea92 0f03 	teq	r2, r3
 8000abe:	d03f      	beq.n	8000b40 <__addsf3+0xd8>
 8000ac0:	f1a2 0201 	sub.w	r2, r2, #1
 8000ac4:	fa41 fc03 	asr.w	ip, r1, r3
 8000ac8:	eb10 000c 	adds.w	r0, r0, ip
 8000acc:	f1c3 0320 	rsb	r3, r3, #32
 8000ad0:	fa01 f103 	lsl.w	r1, r1, r3
 8000ad4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ad8:	d502      	bpl.n	8000ae0 <__addsf3+0x78>
 8000ada:	4249      	negs	r1, r1
 8000adc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000ae0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000ae4:	d313      	bcc.n	8000b0e <__addsf3+0xa6>
 8000ae6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000aea:	d306      	bcc.n	8000afa <__addsf3+0x92>
 8000aec:	0840      	lsrs	r0, r0, #1
 8000aee:	ea4f 0131 	mov.w	r1, r1, rrx
 8000af2:	f102 0201 	add.w	r2, r2, #1
 8000af6:	2afe      	cmp	r2, #254	; 0xfe
 8000af8:	d251      	bcs.n	8000b9e <__addsf3+0x136>
 8000afa:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000afe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b02:	bf08      	it	eq
 8000b04:	f020 0001 	biceq.w	r0, r0, #1
 8000b08:	ea40 0003 	orr.w	r0, r0, r3
 8000b0c:	4770      	bx	lr
 8000b0e:	0049      	lsls	r1, r1, #1
 8000b10:	eb40 0000 	adc.w	r0, r0, r0
 8000b14:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000b18:	f1a2 0201 	sub.w	r2, r2, #1
 8000b1c:	d1ed      	bne.n	8000afa <__addsf3+0x92>
 8000b1e:	fab0 fc80 	clz	ip, r0
 8000b22:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b26:	ebb2 020c 	subs.w	r2, r2, ip
 8000b2a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b2e:	bfaa      	itet	ge
 8000b30:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b34:	4252      	neglt	r2, r2
 8000b36:	4318      	orrge	r0, r3
 8000b38:	bfbc      	itt	lt
 8000b3a:	40d0      	lsrlt	r0, r2
 8000b3c:	4318      	orrlt	r0, r3
 8000b3e:	4770      	bx	lr
 8000b40:	f092 0f00 	teq	r2, #0
 8000b44:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b48:	bf06      	itte	eq
 8000b4a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b4e:	3201      	addeq	r2, #1
 8000b50:	3b01      	subne	r3, #1
 8000b52:	e7b5      	b.n	8000ac0 <__addsf3+0x58>
 8000b54:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b58:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b5c:	bf18      	it	ne
 8000b5e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b62:	d021      	beq.n	8000ba8 <__addsf3+0x140>
 8000b64:	ea92 0f03 	teq	r2, r3
 8000b68:	d004      	beq.n	8000b74 <__addsf3+0x10c>
 8000b6a:	f092 0f00 	teq	r2, #0
 8000b6e:	bf08      	it	eq
 8000b70:	4608      	moveq	r0, r1
 8000b72:	4770      	bx	lr
 8000b74:	ea90 0f01 	teq	r0, r1
 8000b78:	bf1c      	itt	ne
 8000b7a:	2000      	movne	r0, #0
 8000b7c:	4770      	bxne	lr
 8000b7e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000b82:	d104      	bne.n	8000b8e <__addsf3+0x126>
 8000b84:	0040      	lsls	r0, r0, #1
 8000b86:	bf28      	it	cs
 8000b88:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000b8c:	4770      	bx	lr
 8000b8e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000b92:	bf3c      	itt	cc
 8000b94:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000b98:	4770      	bxcc	lr
 8000b9a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b9e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000ba2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ba6:	4770      	bx	lr
 8000ba8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bac:	bf16      	itet	ne
 8000bae:	4608      	movne	r0, r1
 8000bb0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000bb4:	4601      	movne	r1, r0
 8000bb6:	0242      	lsls	r2, r0, #9
 8000bb8:	bf06      	itte	eq
 8000bba:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bbe:	ea90 0f01 	teqeq	r0, r1
 8000bc2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000bc6:	4770      	bx	lr

08000bc8 <__aeabi_ui2f>:
 8000bc8:	f04f 0300 	mov.w	r3, #0
 8000bcc:	e004      	b.n	8000bd8 <__aeabi_i2f+0x8>
 8000bce:	bf00      	nop

08000bd0 <__aeabi_i2f>:
 8000bd0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000bd4:	bf48      	it	mi
 8000bd6:	4240      	negmi	r0, r0
 8000bd8:	ea5f 0c00 	movs.w	ip, r0
 8000bdc:	bf08      	it	eq
 8000bde:	4770      	bxeq	lr
 8000be0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000be4:	4601      	mov	r1, r0
 8000be6:	f04f 0000 	mov.w	r0, #0
 8000bea:	e01c      	b.n	8000c26 <__aeabi_l2f+0x2a>

08000bec <__aeabi_ul2f>:
 8000bec:	ea50 0201 	orrs.w	r2, r0, r1
 8000bf0:	bf08      	it	eq
 8000bf2:	4770      	bxeq	lr
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e00a      	b.n	8000c10 <__aeabi_l2f+0x14>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_l2f>:
 8000bfc:	ea50 0201 	orrs.w	r2, r0, r1
 8000c00:	bf08      	it	eq
 8000c02:	4770      	bxeq	lr
 8000c04:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c08:	d502      	bpl.n	8000c10 <__aeabi_l2f+0x14>
 8000c0a:	4240      	negs	r0, r0
 8000c0c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c10:	ea5f 0c01 	movs.w	ip, r1
 8000c14:	bf02      	ittt	eq
 8000c16:	4684      	moveq	ip, r0
 8000c18:	4601      	moveq	r1, r0
 8000c1a:	2000      	moveq	r0, #0
 8000c1c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c20:	bf08      	it	eq
 8000c22:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c26:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c2a:	fabc f28c 	clz	r2, ip
 8000c2e:	3a08      	subs	r2, #8
 8000c30:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c34:	db10      	blt.n	8000c58 <__aeabi_l2f+0x5c>
 8000c36:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c40:	f1c2 0220 	rsb	r2, r2, #32
 8000c44:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c48:	fa20 f202 	lsr.w	r2, r0, r2
 8000c4c:	eb43 0002 	adc.w	r0, r3, r2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f102 0220 	add.w	r2, r2, #32
 8000c5c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c60:	f1c2 0220 	rsb	r2, r2, #32
 8000c64:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c68:	fa21 f202 	lsr.w	r2, r1, r2
 8000c6c:	eb43 0002 	adc.w	r0, r3, r2
 8000c70:	bf08      	it	eq
 8000c72:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c76:	4770      	bx	lr

08000c78 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000c7c:	4b15      	ldr	r3, [pc, #84]	; (8000cd4 <SystemInit+0x5c>)
 8000c7e:	4a15      	ldr	r2, [pc, #84]	; (8000cd4 <SystemInit+0x5c>)
 8000c80:	6812      	ldr	r2, [r2, #0]
 8000c82:	f042 0201 	orr.w	r2, r2, #1
 8000c86:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8000c88:	4a12      	ldr	r2, [pc, #72]	; (8000cd4 <SystemInit+0x5c>)
 8000c8a:	4b12      	ldr	r3, [pc, #72]	; (8000cd4 <SystemInit+0x5c>)
 8000c8c:	6859      	ldr	r1, [r3, #4]
 8000c8e:	4b12      	ldr	r3, [pc, #72]	; (8000cd8 <SystemInit+0x60>)
 8000c90:	400b      	ands	r3, r1
 8000c92:	6053      	str	r3, [r2, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000c94:	4a0f      	ldr	r2, [pc, #60]	; (8000cd4 <SystemInit+0x5c>)
 8000c96:	4b0f      	ldr	r3, [pc, #60]	; (8000cd4 <SystemInit+0x5c>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000c9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ca2:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000ca4:	4b0b      	ldr	r3, [pc, #44]	; (8000cd4 <SystemInit+0x5c>)
 8000ca6:	4a0b      	ldr	r2, [pc, #44]	; (8000cd4 <SystemInit+0x5c>)
 8000ca8:	6812      	ldr	r2, [r2, #0]
 8000caa:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000cae:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8000cb0:	4b08      	ldr	r3, [pc, #32]	; (8000cd4 <SystemInit+0x5c>)
 8000cb2:	4a08      	ldr	r2, [pc, #32]	; (8000cd4 <SystemInit+0x5c>)
 8000cb4:	6852      	ldr	r2, [r2, #4]
 8000cb6:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8000cba:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 8000cbc:	4b05      	ldr	r3, [pc, #20]	; (8000cd4 <SystemInit+0x5c>)
 8000cbe:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000cc2:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
 8000cc4:	f000 f80c 	bl	8000ce0 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000cc8:	4b04      	ldr	r3, [pc, #16]	; (8000cdc <SystemInit+0x64>)
 8000cca:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000cce:	609a      	str	r2, [r3, #8]
#endif 
}
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	40021000 	.word	0x40021000
 8000cd8:	f8ff0000 	.word	0xf8ff0000
 8000cdc:	e000ed00 	.word	0xe000ed00

08000ce0 <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();  
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
 8000ce4:	f000 f802 	bl	8000cec <SetSysClockTo72>
#endif
 
 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */ 
}
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop

08000cec <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	b083      	sub	sp, #12
 8000cf0:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	607b      	str	r3, [r7, #4]
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8000cfa:	4b3a      	ldr	r3, [pc, #232]	; (8000de4 <SetSysClockTo72+0xf8>)
 8000cfc:	4a39      	ldr	r2, [pc, #228]	; (8000de4 <SetSysClockTo72+0xf8>)
 8000cfe:	6812      	ldr	r2, [r2, #0]
 8000d00:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000d04:	601a      	str	r2, [r3, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8000d06:	4b37      	ldr	r3, [pc, #220]	; (8000de4 <SetSysClockTo72+0xf8>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d0e:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	3301      	adds	r3, #1
 8000d14:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d103      	bne.n	8000d24 <SetSysClockTo72+0x38>
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8000d22:	d1f0      	bne.n	8000d06 <SetSysClockTo72+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8000d24:	4b2f      	ldr	r3, [pc, #188]	; (8000de4 <SetSysClockTo72+0xf8>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d002      	beq.n	8000d36 <SetSysClockTo72+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8000d30:	2301      	movs	r3, #1
 8000d32:	603b      	str	r3, [r7, #0]
 8000d34:	e001      	b.n	8000d3a <SetSysClockTo72+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8000d36:	2300      	movs	r3, #0
 8000d38:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	2b01      	cmp	r3, #1
 8000d3e:	d14b      	bne.n	8000dd8 <SetSysClockTo72+0xec>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 8000d40:	4b29      	ldr	r3, [pc, #164]	; (8000de8 <SetSysClockTo72+0xfc>)
 8000d42:	4a29      	ldr	r2, [pc, #164]	; (8000de8 <SetSysClockTo72+0xfc>)
 8000d44:	6812      	ldr	r2, [r2, #0]
 8000d46:	f042 0210 	orr.w	r2, r2, #16
 8000d4a:	601a      	str	r2, [r3, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 8000d4c:	4b26      	ldr	r3, [pc, #152]	; (8000de8 <SetSysClockTo72+0xfc>)
 8000d4e:	4a26      	ldr	r2, [pc, #152]	; (8000de8 <SetSysClockTo72+0xfc>)
 8000d50:	6812      	ldr	r2, [r2, #0]
 8000d52:	f022 0203 	bic.w	r2, r2, #3
 8000d56:	601a      	str	r2, [r3, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 8000d58:	4b23      	ldr	r3, [pc, #140]	; (8000de8 <SetSysClockTo72+0xfc>)
 8000d5a:	4a23      	ldr	r2, [pc, #140]	; (8000de8 <SetSysClockTo72+0xfc>)
 8000d5c:	6812      	ldr	r2, [r2, #0]
 8000d5e:	f042 0202 	orr.w	r2, r2, #2
 8000d62:	601a      	str	r2, [r3, #0]

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8000d64:	4b1f      	ldr	r3, [pc, #124]	; (8000de4 <SetSysClockTo72+0xf8>)
 8000d66:	4a1f      	ldr	r2, [pc, #124]	; (8000de4 <SetSysClockTo72+0xf8>)
 8000d68:	6852      	ldr	r2, [r2, #4]
 8000d6a:	605a      	str	r2, [r3, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8000d6c:	4b1d      	ldr	r3, [pc, #116]	; (8000de4 <SetSysClockTo72+0xf8>)
 8000d6e:	4a1d      	ldr	r2, [pc, #116]	; (8000de4 <SetSysClockTo72+0xf8>)
 8000d70:	6852      	ldr	r2, [r2, #4]
 8000d72:	605a      	str	r2, [r3, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 8000d74:	4b1b      	ldr	r3, [pc, #108]	; (8000de4 <SetSysClockTo72+0xf8>)
 8000d76:	4a1b      	ldr	r2, [pc, #108]	; (8000de4 <SetSysClockTo72+0xf8>)
 8000d78:	6852      	ldr	r2, [r2, #4]
 8000d7a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000d7e:	605a      	str	r2, [r3, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
                            RCC_CFGR_PLLMULL9); 
#else    
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 8000d80:	4b18      	ldr	r3, [pc, #96]	; (8000de4 <SetSysClockTo72+0xf8>)
 8000d82:	4a18      	ldr	r2, [pc, #96]	; (8000de4 <SetSysClockTo72+0xf8>)
 8000d84:	6852      	ldr	r2, [r2, #4]
 8000d86:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
 8000d8a:	605a      	str	r2, [r3, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
 8000d8c:	4b15      	ldr	r3, [pc, #84]	; (8000de4 <SetSysClockTo72+0xf8>)
 8000d8e:	4a15      	ldr	r2, [pc, #84]	; (8000de4 <SetSysClockTo72+0xf8>)
 8000d90:	6852      	ldr	r2, [r2, #4]
 8000d92:	f442 12e8 	orr.w	r2, r2, #1900544	; 0x1d0000
 8000d96:	605a      	str	r2, [r3, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 8000d98:	4b12      	ldr	r3, [pc, #72]	; (8000de4 <SetSysClockTo72+0xf8>)
 8000d9a:	4a12      	ldr	r2, [pc, #72]	; (8000de4 <SetSysClockTo72+0xf8>)
 8000d9c:	6812      	ldr	r2, [r2, #0]
 8000d9e:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8000da2:	601a      	str	r2, [r3, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8000da4:	bf00      	nop
 8000da6:	4b0f      	ldr	r3, [pc, #60]	; (8000de4 <SetSysClockTo72+0xf8>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d0f9      	beq.n	8000da6 <SetSysClockTo72+0xba>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8000db2:	4b0c      	ldr	r3, [pc, #48]	; (8000de4 <SetSysClockTo72+0xf8>)
 8000db4:	4a0b      	ldr	r2, [pc, #44]	; (8000de4 <SetSysClockTo72+0xf8>)
 8000db6:	6852      	ldr	r2, [r2, #4]
 8000db8:	f022 0203 	bic.w	r2, r2, #3
 8000dbc:	605a      	str	r2, [r3, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 8000dbe:	4b09      	ldr	r3, [pc, #36]	; (8000de4 <SetSysClockTo72+0xf8>)
 8000dc0:	4a08      	ldr	r2, [pc, #32]	; (8000de4 <SetSysClockTo72+0xf8>)
 8000dc2:	6852      	ldr	r2, [r2, #4]
 8000dc4:	f042 0202 	orr.w	r2, r2, #2
 8000dc8:	605a      	str	r2, [r3, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 8000dca:	bf00      	nop
 8000dcc:	4b05      	ldr	r3, [pc, #20]	; (8000de4 <SetSysClockTo72+0xf8>)
 8000dce:	685b      	ldr	r3, [r3, #4]
 8000dd0:	f003 030c 	and.w	r3, r3, #12
 8000dd4:	2b08      	cmp	r3, #8
 8000dd6:	d1f9      	bne.n	8000dcc <SetSysClockTo72+0xe0>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  }
}
 8000dd8:	370c      	adds	r7, #12
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop
 8000de4:	40021000 	.word	0x40021000
 8000de8:	40022000 	.word	0x40022000

08000dec <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0
}
 8000df0:	46bd      	mov	sp, r7
 8000df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df6:	4770      	bx	lr

08000df8 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
  }
 8000dfc:	e7fe      	b.n	8000dfc <HardFault_Handler+0x4>
 8000dfe:	bf00      	nop

08000e00 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
  {
  }
 8000e04:	e7fe      	b.n	8000e04 <MemManage_Handler+0x4>
 8000e06:	bf00      	nop

08000e08 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
  {
  }
 8000e0c:	e7fe      	b.n	8000e0c <BusFault_Handler+0x4>
 8000e0e:	bf00      	nop

08000e10 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
  {
  }
 8000e14:	e7fe      	b.n	8000e14 <UsageFault_Handler+0x4>
 8000e16:	bf00      	nop

08000e18 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0
}
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e22:	4770      	bx	lr

08000e24 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0
}
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2e:	4770      	bx	lr

08000e30 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
}
 8000e34:	46bd      	mov	sp, r7
 8000e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3a:	4770      	bx	lr

08000e3c <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0
}
 8000e40:	46bd      	mov	sp, r7
 8000e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e46:	4770      	bx	lr

08000e48 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000e48:	f8df d03c 	ldr.w	sp, [pc, #60]	; 8000e88 <LoopFillZerobss+0x16>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000e4c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000e4e:	f000 b804 	b.w	8000e5a <LoopCopyDataInit>

08000e52 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000e52:	4b0e      	ldr	r3, [pc, #56]	; (8000e8c <LoopFillZerobss+0x1a>)
	ldr	r3, [r3, r1]
 8000e54:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000e56:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000e58:	3104      	adds	r1, #4

08000e5a <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000e5a:	480d      	ldr	r0, [pc, #52]	; (8000e90 <LoopFillZerobss+0x1e>)
	ldr	r3, =_edata
 8000e5c:	4b0d      	ldr	r3, [pc, #52]	; (8000e94 <LoopFillZerobss+0x22>)
	adds	r2, r0, r1
 8000e5e:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000e60:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000e62:	f4ff aff6 	bcc.w	8000e52 <CopyDataInit>
	ldr	r2, =_sbss
 8000e66:	4a0c      	ldr	r2, [pc, #48]	; (8000e98 <LoopFillZerobss+0x26>)
	b	LoopFillZerobss
 8000e68:	f000 b803 	b.w	8000e72 <LoopFillZerobss>

08000e6c <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000e6c:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000e6e:	f842 3b04 	str.w	r3, [r2], #4

08000e72 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000e72:	4b0a      	ldr	r3, [pc, #40]	; (8000e9c <LoopFillZerobss+0x2a>)
	cmp	r2, r3
 8000e74:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000e76:	f4ff aff9 	bcc.w	8000e6c <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000e7a:	f7ff fefd 	bl	8000c78 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e7e:	f003 f957 	bl	8004130 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e82:	f000 fa6b 	bl	800135c <main>
	bx	lr
 8000e86:	4770      	bx	lr

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000e88:	20010000 	.word	0x20010000
/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
  b	LoopCopyDataInit

CopyDataInit:
	ldr	r3, =_sidata
 8000e8c:	0800419c 	.word	0x0800419c
	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
	adds	r1, r1, #4

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000e90:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000e94:	20000014 	.word	0x20000014
	adds	r2, r0, r1
	cmp	r2, r3
	bcc	CopyDataInit
	ldr	r2, =_sbss
 8000e98:	20000014 	.word	0x20000014
FillZerobss:
	movs	r3, #0
	str	r3, [r2], #4

LoopFillZerobss:
	ldr	r3, = _ebss
 8000e9c:	20000540 	.word	0x20000540

08000ea0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ea0:	f7ff bffe 	b.w	8000ea0 <ADC1_2_IRQHandler>

08000ea4 <serialTerminal_Init>:
#include "serial_terminal.h"
#include "CRC.h"


void serialTerminal_Init(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0
  initCRC();
 8000ea8:	f000 ff8c 	bl	8001dc4 <initCRC>
}
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop

08000eb0 <serialTerminal_packetize>:

void serialTerminal_packetize(uint8_t* payload_to_packS1,uint8_t* payload_to_packS2,uint8_t* payload_to_packS3,uint8_t* payload_to_packS4, uint16_t length_of_payloadS1,uint16_t length_of_payloadS2,uint16_t length_of_payloadS3,uint16_t length_of_payloadS4)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b096      	sub	sp, #88	; 0x58
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	60f8      	str	r0, [r7, #12]
 8000eb8:	60b9      	str	r1, [r7, #8]
 8000eba:	607a      	str	r2, [r7, #4]
 8000ebc:	603b      	str	r3, [r7, #0]
  CommsTask_TransmitPacketStruct pkt_to_tx;
  uint16_t raw_data_pointer = 0;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t packet_data_pointer = 4;
 8000ec4:	2304      	movs	r3, #4
 8000ec6:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
  uint16_t crcCalculated;
  uint8_t char_to_pack;

  //put data
  for (raw_data_pointer = 0; raw_data_pointer < length_of_payloadS1; raw_data_pointer++, packet_data_pointer++)
 8000eca:	2300      	movs	r3, #0
 8000ecc:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8000ed0:	e049      	b.n	8000f66 <serialTerminal_packetize+0xb6>
  { //for both bytes of the pkt_code,
    char_to_pack = payload_to_packS1[raw_data_pointer];
 8000ed2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8000ed6:	68fa      	ldr	r2, [r7, #12]
 8000ed8:	4413      	add	r3, r2
 8000eda:	781b      	ldrb	r3, [r3, #0]
 8000edc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    if (char_to_pack == 0x7E)
 8000ee0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000ee4:	2b7e      	cmp	r3, #126	; 0x7e
 8000ee6:	d113      	bne.n	8000f10 <serialTerminal_packetize+0x60>
    {
      pkt_to_tx.data[packet_data_pointer++] = 0x7D;
 8000ee8:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8000eec:	1c5a      	adds	r2, r3, #1
 8000eee:	f8a7 2054 	strh.w	r2, [r7, #84]	; 0x54
 8000ef2:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8000ef6:	4413      	add	r3, r2
 8000ef8:	227d      	movs	r2, #125	; 0x7d
 8000efa:	f803 2c40 	strb.w	r2, [r3, #-64]
      pkt_to_tx.data[packet_data_pointer] = 0x5E;
 8000efe:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8000f02:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8000f06:	4413      	add	r3, r2
 8000f08:	225e      	movs	r2, #94	; 0x5e
 8000f0a:	f803 2c40 	strb.w	r2, [r3, #-64]
 8000f0e:	e020      	b.n	8000f52 <serialTerminal_packetize+0xa2>
    }
    else if (char_to_pack == 0x7D)
 8000f10:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000f14:	2b7d      	cmp	r3, #125	; 0x7d
 8000f16:	d113      	bne.n	8000f40 <serialTerminal_packetize+0x90>
    {
      pkt_to_tx.data[packet_data_pointer++] = 0x7D;
 8000f18:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8000f1c:	1c5a      	adds	r2, r3, #1
 8000f1e:	f8a7 2054 	strh.w	r2, [r7, #84]	; 0x54
 8000f22:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8000f26:	4413      	add	r3, r2
 8000f28:	227d      	movs	r2, #125	; 0x7d
 8000f2a:	f803 2c40 	strb.w	r2, [r3, #-64]
      pkt_to_tx.data[packet_data_pointer] = 0x5D;
 8000f2e:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8000f32:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8000f36:	4413      	add	r3, r2
 8000f38:	225d      	movs	r2, #93	; 0x5d
 8000f3a:	f803 2c40 	strb.w	r2, [r3, #-64]
 8000f3e:	e008      	b.n	8000f52 <serialTerminal_packetize+0xa2>
    }
    else
    {
      pkt_to_tx.data[packet_data_pointer] = char_to_pack;
 8000f40:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8000f44:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8000f48:	4413      	add	r3, r2
 8000f4a:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8000f4e:	f803 2c40 	strb.w	r2, [r3, #-64]
  uint16_t packet_data_pointer = 4;
  uint16_t crcCalculated;
  uint8_t char_to_pack;

  //put data
  for (raw_data_pointer = 0; raw_data_pointer < length_of_payloadS1; raw_data_pointer++, packet_data_pointer++)
 8000f52:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8000f56:	3301      	adds	r3, #1
 8000f58:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8000f5c:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8000f60:	3301      	adds	r3, #1
 8000f62:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
 8000f66:	f8b7 2056 	ldrh.w	r2, [r7, #86]	; 0x56
 8000f6a:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 8000f6e:	429a      	cmp	r2, r3
 8000f70:	d3af      	bcc.n	8000ed2 <serialTerminal_packetize+0x22>
    else
    {
      pkt_to_tx.data[packet_data_pointer] = char_to_pack;
    }
  }
  for (raw_data_pointer = 0; raw_data_pointer < length_of_payloadS2; raw_data_pointer++, packet_data_pointer++)
 8000f72:	2300      	movs	r3, #0
 8000f74:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8000f78:	e049      	b.n	800100e <serialTerminal_packetize+0x15e>
  { //for both bytes of the pkt_code,
    char_to_pack = payload_to_packS2[raw_data_pointer];
 8000f7a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8000f7e:	68ba      	ldr	r2, [r7, #8]
 8000f80:	4413      	add	r3, r2
 8000f82:	781b      	ldrb	r3, [r3, #0]
 8000f84:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    if (char_to_pack == 0x7E)
 8000f88:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000f8c:	2b7e      	cmp	r3, #126	; 0x7e
 8000f8e:	d113      	bne.n	8000fb8 <serialTerminal_packetize+0x108>
    {
      pkt_to_tx.data[packet_data_pointer++] = 0x7D;
 8000f90:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8000f94:	1c5a      	adds	r2, r3, #1
 8000f96:	f8a7 2054 	strh.w	r2, [r7, #84]	; 0x54
 8000f9a:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8000f9e:	4413      	add	r3, r2
 8000fa0:	227d      	movs	r2, #125	; 0x7d
 8000fa2:	f803 2c40 	strb.w	r2, [r3, #-64]
      pkt_to_tx.data[packet_data_pointer] = 0x5E;
 8000fa6:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8000faa:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8000fae:	4413      	add	r3, r2
 8000fb0:	225e      	movs	r2, #94	; 0x5e
 8000fb2:	f803 2c40 	strb.w	r2, [r3, #-64]
 8000fb6:	e020      	b.n	8000ffa <serialTerminal_packetize+0x14a>
    }
    else if (char_to_pack == 0x7D)
 8000fb8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000fbc:	2b7d      	cmp	r3, #125	; 0x7d
 8000fbe:	d113      	bne.n	8000fe8 <serialTerminal_packetize+0x138>
    {
      pkt_to_tx.data[packet_data_pointer++] = 0x7D;
 8000fc0:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8000fc4:	1c5a      	adds	r2, r3, #1
 8000fc6:	f8a7 2054 	strh.w	r2, [r7, #84]	; 0x54
 8000fca:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8000fce:	4413      	add	r3, r2
 8000fd0:	227d      	movs	r2, #125	; 0x7d
 8000fd2:	f803 2c40 	strb.w	r2, [r3, #-64]
      pkt_to_tx.data[packet_data_pointer] = 0x5D;
 8000fd6:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8000fda:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8000fde:	4413      	add	r3, r2
 8000fe0:	225d      	movs	r2, #93	; 0x5d
 8000fe2:	f803 2c40 	strb.w	r2, [r3, #-64]
 8000fe6:	e008      	b.n	8000ffa <serialTerminal_packetize+0x14a>
    }
    else
    {
      pkt_to_tx.data[packet_data_pointer] = char_to_pack;
 8000fe8:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8000fec:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8000ff0:	4413      	add	r3, r2
 8000ff2:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8000ff6:	f803 2c40 	strb.w	r2, [r3, #-64]
    else
    {
      pkt_to_tx.data[packet_data_pointer] = char_to_pack;
    }
  }
  for (raw_data_pointer = 0; raw_data_pointer < length_of_payloadS2; raw_data_pointer++, packet_data_pointer++)
 8000ffa:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8000ffe:	3301      	adds	r3, #1
 8001000:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8001004:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8001008:	3301      	adds	r3, #1
 800100a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
 800100e:	f8b7 2056 	ldrh.w	r2, [r7, #86]	; 0x56
 8001012:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8001016:	429a      	cmp	r2, r3
 8001018:	d3af      	bcc.n	8000f7a <serialTerminal_packetize+0xca>
    else
    {
      pkt_to_tx.data[packet_data_pointer] = char_to_pack;
    }
  }
  for (raw_data_pointer = 0; raw_data_pointer < length_of_payloadS3; raw_data_pointer++, packet_data_pointer++)
 800101a:	2300      	movs	r3, #0
 800101c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8001020:	e049      	b.n	80010b6 <serialTerminal_packetize+0x206>
  { //for both bytes of the pkt_code,
    char_to_pack = payload_to_packS3[raw_data_pointer];
 8001022:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8001026:	687a      	ldr	r2, [r7, #4]
 8001028:	4413      	add	r3, r2
 800102a:	781b      	ldrb	r3, [r3, #0]
 800102c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    if (char_to_pack == 0x7E)
 8001030:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001034:	2b7e      	cmp	r3, #126	; 0x7e
 8001036:	d113      	bne.n	8001060 <serialTerminal_packetize+0x1b0>
    {
      pkt_to_tx.data[packet_data_pointer++] = 0x7D;
 8001038:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800103c:	1c5a      	adds	r2, r3, #1
 800103e:	f8a7 2054 	strh.w	r2, [r7, #84]	; 0x54
 8001042:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8001046:	4413      	add	r3, r2
 8001048:	227d      	movs	r2, #125	; 0x7d
 800104a:	f803 2c40 	strb.w	r2, [r3, #-64]
      pkt_to_tx.data[packet_data_pointer] = 0x5E;
 800104e:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8001052:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8001056:	4413      	add	r3, r2
 8001058:	225e      	movs	r2, #94	; 0x5e
 800105a:	f803 2c40 	strb.w	r2, [r3, #-64]
 800105e:	e020      	b.n	80010a2 <serialTerminal_packetize+0x1f2>
    }
    else if (char_to_pack == 0x7D)
 8001060:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001064:	2b7d      	cmp	r3, #125	; 0x7d
 8001066:	d113      	bne.n	8001090 <serialTerminal_packetize+0x1e0>
    {
      pkt_to_tx.data[packet_data_pointer++] = 0x7D;
 8001068:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800106c:	1c5a      	adds	r2, r3, #1
 800106e:	f8a7 2054 	strh.w	r2, [r7, #84]	; 0x54
 8001072:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8001076:	4413      	add	r3, r2
 8001078:	227d      	movs	r2, #125	; 0x7d
 800107a:	f803 2c40 	strb.w	r2, [r3, #-64]
      pkt_to_tx.data[packet_data_pointer] = 0x5D;
 800107e:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8001082:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8001086:	4413      	add	r3, r2
 8001088:	225d      	movs	r2, #93	; 0x5d
 800108a:	f803 2c40 	strb.w	r2, [r3, #-64]
 800108e:	e008      	b.n	80010a2 <serialTerminal_packetize+0x1f2>
    }
    else
    {
      pkt_to_tx.data[packet_data_pointer] = char_to_pack;
 8001090:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8001094:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8001098:	4413      	add	r3, r2
 800109a:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800109e:	f803 2c40 	strb.w	r2, [r3, #-64]
    else
    {
      pkt_to_tx.data[packet_data_pointer] = char_to_pack;
    }
  }
  for (raw_data_pointer = 0; raw_data_pointer < length_of_payloadS3; raw_data_pointer++, packet_data_pointer++)
 80010a2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80010a6:	3301      	adds	r3, #1
 80010a8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80010ac:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80010b0:	3301      	adds	r3, #1
 80010b2:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
 80010b6:	f8b7 2056 	ldrh.w	r2, [r7, #86]	; 0x56
 80010ba:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 80010be:	429a      	cmp	r2, r3
 80010c0:	d3af      	bcc.n	8001022 <serialTerminal_packetize+0x172>
    else
    {
      pkt_to_tx.data[packet_data_pointer] = char_to_pack;
    }
  }
  for (raw_data_pointer = 0; raw_data_pointer < length_of_payloadS4; raw_data_pointer++, packet_data_pointer++)
 80010c2:	2300      	movs	r3, #0
 80010c4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80010c8:	e049      	b.n	800115e <serialTerminal_packetize+0x2ae>
  { //for both bytes of the pkt_code,
    char_to_pack = payload_to_packS4[raw_data_pointer];
 80010ca:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80010ce:	683a      	ldr	r2, [r7, #0]
 80010d0:	4413      	add	r3, r2
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    if (char_to_pack == 0x7E)
 80010d8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80010dc:	2b7e      	cmp	r3, #126	; 0x7e
 80010de:	d113      	bne.n	8001108 <serialTerminal_packetize+0x258>
    {
      pkt_to_tx.data[packet_data_pointer++] = 0x7D;
 80010e0:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80010e4:	1c5a      	adds	r2, r3, #1
 80010e6:	f8a7 2054 	strh.w	r2, [r7, #84]	; 0x54
 80010ea:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80010ee:	4413      	add	r3, r2
 80010f0:	227d      	movs	r2, #125	; 0x7d
 80010f2:	f803 2c40 	strb.w	r2, [r3, #-64]
      pkt_to_tx.data[packet_data_pointer] = 0x5E;
 80010f6:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80010fa:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80010fe:	4413      	add	r3, r2
 8001100:	225e      	movs	r2, #94	; 0x5e
 8001102:	f803 2c40 	strb.w	r2, [r3, #-64]
 8001106:	e020      	b.n	800114a <serialTerminal_packetize+0x29a>
    }
    else if (char_to_pack == 0x7D)
 8001108:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800110c:	2b7d      	cmp	r3, #125	; 0x7d
 800110e:	d113      	bne.n	8001138 <serialTerminal_packetize+0x288>
    {
      pkt_to_tx.data[packet_data_pointer++] = 0x7D;
 8001110:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8001114:	1c5a      	adds	r2, r3, #1
 8001116:	f8a7 2054 	strh.w	r2, [r7, #84]	; 0x54
 800111a:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800111e:	4413      	add	r3, r2
 8001120:	227d      	movs	r2, #125	; 0x7d
 8001122:	f803 2c40 	strb.w	r2, [r3, #-64]
      pkt_to_tx.data[packet_data_pointer] = 0x5D;
 8001126:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800112a:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800112e:	4413      	add	r3, r2
 8001130:	225d      	movs	r2, #93	; 0x5d
 8001132:	f803 2c40 	strb.w	r2, [r3, #-64]
 8001136:	e008      	b.n	800114a <serialTerminal_packetize+0x29a>
    }
    else
    {
      pkt_to_tx.data[packet_data_pointer] = char_to_pack;
 8001138:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800113c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8001140:	4413      	add	r3, r2
 8001142:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8001146:	f803 2c40 	strb.w	r2, [r3, #-64]
    else
    {
      pkt_to_tx.data[packet_data_pointer] = char_to_pack;
    }
  }
  for (raw_data_pointer = 0; raw_data_pointer < length_of_payloadS4; raw_data_pointer++, packet_data_pointer++)
 800114a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800114e:	3301      	adds	r3, #1
 8001150:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8001154:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8001158:	3301      	adds	r3, #1
 800115a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
 800115e:	f8b7 2056 	ldrh.w	r2, [r7, #86]	; 0x56
 8001162:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8001166:	429a      	cmp	r2, r3
 8001168:	d3af      	bcc.n	80010ca <serialTerminal_packetize+0x21a>
    else
    {
      pkt_to_tx.data[packet_data_pointer] = char_to_pack;
    }
  }
 uint16_t l=packet_data_pointer-4;
 800116a:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800116e:	3b04      	subs	r3, #4
 8001170:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 	 union
 	  {
 	  	char temp_char[2];
 	  	uint16_t temp_16;
 	  }buffer_to_char_union1;
 	  buffer_to_char_union1.temp_16=0x0101;
 8001174:	f240 1301 	movw	r3, #257	; 0x101
 8001178:	82bb      	strh	r3, [r7, #20]




 pkt_to_tx.data[0]=buffer_to_char_union1.temp_char[0];
 800117a:	7d3b      	ldrb	r3, [r7, #20]
 800117c:	763b      	strb	r3, [r7, #24]
  pkt_to_tx.data[1]=buffer_to_char_union1.temp_char[1];//TODO: double check this - might have to switch the order
 800117e:	7d7b      	ldrb	r3, [r7, #21]
 8001180:	767b      	strb	r3, [r7, #25]
  	  union
   	  {
   	  	char temp_char[2];
   	  	uint16_t temp_16;
   	  }buffer_to_char_union2;
   	  buffer_to_char_union2.temp_16=l;
 8001182:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8001186:	823b      	strh	r3, [r7, #16]

  pkt_to_tx.data[2]=buffer_to_char_union2.temp_char[0];
 8001188:	7c3b      	ldrb	r3, [r7, #16]
 800118a:	76bb      	strb	r3, [r7, #26]
  pkt_to_tx.data[3]=buffer_to_char_union2.temp_char[1];
 800118c:	7c7b      	ldrb	r3, [r7, #17]
 800118e:	76fb      	strb	r3, [r7, #27]
  //calculate CRC
  crcCalculated = (uint16_t) crcCalc(pkt_to_tx.data, 4, l);////////////////////COULD BE ERROR HERE
 8001190:	f107 0218 	add.w	r2, r7, #24
 8001194:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8001198:	4610      	mov	r0, r2
 800119a:	2104      	movs	r1, #4
 800119c:	461a      	mov	r2, r3
 800119e:	f000 fe1d 	bl	8001ddc <crcCalc>
 80011a2:	4603      	mov	r3, r0
 80011a4:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

  //put CRC
  for (raw_data_pointer = 0; raw_data_pointer < 2; raw_data_pointer++, packet_data_pointer++)
 80011a8:	2300      	movs	r3, #0
 80011aa:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80011ae:	e04d      	b.n	800124c <serialTerminal_packetize+0x39c>
  {
    char_to_pack = (uint8_t) ((crcCalculated >> 8 * (1 - raw_data_pointer)) & 0x00FF);
 80011b0:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 80011b4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80011b8:	f1c3 0301 	rsb	r3, r3, #1
 80011bc:	00db      	lsls	r3, r3, #3
 80011be:	fa42 f303 	asr.w	r3, r2, r3
 80011c2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    if (char_to_pack == 0x7E)
 80011c6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80011ca:	2b7e      	cmp	r3, #126	; 0x7e
 80011cc:	d113      	bne.n	80011f6 <serialTerminal_packetize+0x346>
    {
      pkt_to_tx.data[packet_data_pointer++] = 0x7D;
 80011ce:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80011d2:	1c5a      	adds	r2, r3, #1
 80011d4:	f8a7 2054 	strh.w	r2, [r7, #84]	; 0x54
 80011d8:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80011dc:	4413      	add	r3, r2
 80011de:	227d      	movs	r2, #125	; 0x7d
 80011e0:	f803 2c40 	strb.w	r2, [r3, #-64]
      pkt_to_tx.data[packet_data_pointer] = 0x5E;
 80011e4:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80011e8:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80011ec:	4413      	add	r3, r2
 80011ee:	225e      	movs	r2, #94	; 0x5e
 80011f0:	f803 2c40 	strb.w	r2, [r3, #-64]
 80011f4:	e020      	b.n	8001238 <serialTerminal_packetize+0x388>
    }
    else if (char_to_pack == 0x7D)
 80011f6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80011fa:	2b7d      	cmp	r3, #125	; 0x7d
 80011fc:	d113      	bne.n	8001226 <serialTerminal_packetize+0x376>
    {
      pkt_to_tx.data[packet_data_pointer++] = 0x7D;
 80011fe:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8001202:	1c5a      	adds	r2, r3, #1
 8001204:	f8a7 2054 	strh.w	r2, [r7, #84]	; 0x54
 8001208:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800120c:	4413      	add	r3, r2
 800120e:	227d      	movs	r2, #125	; 0x7d
 8001210:	f803 2c40 	strb.w	r2, [r3, #-64]
      pkt_to_tx.data[packet_data_pointer] = 0x5D;
 8001214:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8001218:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800121c:	4413      	add	r3, r2
 800121e:	225d      	movs	r2, #93	; 0x5d
 8001220:	f803 2c40 	strb.w	r2, [r3, #-64]
 8001224:	e008      	b.n	8001238 <serialTerminal_packetize+0x388>
    }
    else
    {
      pkt_to_tx.data[packet_data_pointer] = char_to_pack;
 8001226:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800122a:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800122e:	4413      	add	r3, r2
 8001230:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8001234:	f803 2c40 	strb.w	r2, [r3, #-64]
  pkt_to_tx.data[3]=buffer_to_char_union2.temp_char[1];
  //calculate CRC
  crcCalculated = (uint16_t) crcCalc(pkt_to_tx.data, 4, l);////////////////////COULD BE ERROR HERE

  //put CRC
  for (raw_data_pointer = 0; raw_data_pointer < 2; raw_data_pointer++, packet_data_pointer++)
 8001238:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800123c:	3301      	adds	r3, #1
 800123e:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8001242:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8001246:	3301      	adds	r3, #1
 8001248:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
 800124c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8001250:	2b01      	cmp	r3, #1
 8001252:	d9ad      	bls.n	80011b0 <serialTerminal_packetize+0x300>
      pkt_to_tx.data[packet_data_pointer] = char_to_pack;
    }
  }

  //set pkt length
  pkt_to_tx.bytes_to_tx = packet_data_pointer+2;//add 2 for the two 7E's
 8001254:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8001258:	3302      	adds	r3, #2
 800125a:	b29b      	uxth	r3, r3
 800125c:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

  //add 7E
  TxBuff[0]=0x7E;//start character
 8001260:	4b13      	ldr	r3, [pc, #76]	; (80012b0 <serialTerminal_packetize+0x400>)
 8001262:	227e      	movs	r2, #126	; 0x7e
 8001264:	701a      	strb	r2, [r3, #0]
  //add type

  int i;
  for(i=1;i<pkt_to_tx.bytes_to_tx-1;i++)
 8001266:	2301      	movs	r3, #1
 8001268:	653b      	str	r3, [r7, #80]	; 0x50
 800126a:	e00d      	b.n	8001288 <serialTerminal_packetize+0x3d8>
  {
	  TxBuff[i]=pkt_to_tx.data[i-1];
 800126c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800126e:	3b01      	subs	r3, #1
 8001270:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8001274:	4413      	add	r3, r2
 8001276:	f813 2c40 	ldrb.w	r2, [r3, #-64]
 800127a:	490d      	ldr	r1, [pc, #52]	; (80012b0 <serialTerminal_packetize+0x400>)
 800127c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800127e:	440b      	add	r3, r1
 8001280:	701a      	strb	r2, [r3, #0]
  //add 7E
  TxBuff[0]=0x7E;//start character
  //add type

  int i;
  for(i=1;i<pkt_to_tx.bytes_to_tx-1;i++)
 8001282:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001284:	3301      	adds	r3, #1
 8001286:	653b      	str	r3, [r7, #80]	; 0x50
 8001288:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800128c:	1e5a      	subs	r2, r3, #1
 800128e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001290:	429a      	cmp	r2, r3
 8001292:	dceb      	bgt.n	800126c <serialTerminal_packetize+0x3bc>
  {
	  TxBuff[i]=pkt_to_tx.data[i-1];
  }
  //add 7E
  TxBuff[pkt_to_tx.bytes_to_tx-1]=0x7E;
 8001294:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001298:	3b01      	subs	r3, #1
 800129a:	4a05      	ldr	r2, [pc, #20]	; (80012b0 <serialTerminal_packetize+0x400>)
 800129c:	217e      	movs	r1, #126	; 0x7e
 800129e:	54d1      	strb	r1, [r2, r3]
  //set number of characters to tx
  Tx_chars=pkt_to_tx.bytes_to_tx;
 80012a0:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 80012a4:	4b03      	ldr	r3, [pc, #12]	; (80012b4 <serialTerminal_packetize+0x404>)
 80012a6:	801a      	strh	r2, [r3, #0]
}
 80012a8:	3758      	adds	r7, #88	; 0x58
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	2000050c 	.word	0x2000050c
 80012b4:	20000438 	.word	0x20000438

080012b8 <setUpPWM>:
 *      Author: Callen Fisher
 */
#include "pwm.h"

void setUpPWM()
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b088      	sub	sp, #32
 80012bc:	af00      	add	r7, sp, #0
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA,ENABLE);//tim3 ch1 //PA6
 80012be:	2004      	movs	r0, #4
 80012c0:	2101      	movs	r1, #1
 80012c2:	f002 fa33 	bl	800372c <RCC_APB2PeriphClockCmd>
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3,ENABLE);
 80012c6:	2002      	movs	r0, #2
 80012c8:	2101      	movs	r1, #1
 80012ca:	f002 fa4d 	bl	8003768 <RCC_APB1PeriphClockCmd>

	GPIO_InitTypeDef GPIO_InitStructure;

	GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_6;
 80012ce:	2340      	movs	r3, #64	; 0x40
 80012d0:	83bb      	strh	r3, [r7, #28]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80012d2:	2303      	movs	r3, #3
 80012d4:	77bb      	strb	r3, [r7, #30]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 80012d6:	2318      	movs	r3, #24
 80012d8:	77fb      	strb	r3, [r7, #31]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 80012da:	f107 031c 	add.w	r3, r7, #28
 80012de:	481d      	ldr	r0, [pc, #116]	; (8001354 <setUpPWM+0x9c>)
 80012e0:	4619      	mov	r1, r3
 80012e2:	f002 fc9f 	bl	8003c24 <GPIO_Init>

	//set up timer

	TIM_TimeBaseInitTypeDef TIM_TimeBaseStruct;

	TIM_TimeBaseStruct.TIM_ClockDivision=TIM_CKD_DIV1;
 80012e6:	2300      	movs	r3, #0
 80012e8:	82fb      	strh	r3, [r7, #22]
	TIM_TimeBaseStruct.TIM_CounterMode=TIM_CounterMode_Up;
 80012ea:	2300      	movs	r3, #0
 80012ec:	827b      	strh	r3, [r7, #18]
	TIM_TimeBaseStruct.TIM_Period=40000;//makes it 100Hz
 80012ee:	f649 4340 	movw	r3, #40000	; 0x9c40
 80012f2:	82bb      	strh	r3, [r7, #20]
	TIM_TimeBaseStruct.TIM_Prescaler=0;
 80012f4:	2300      	movs	r3, #0
 80012f6:	823b      	strh	r3, [r7, #16]
	TIM_TimeBaseStruct.TIM_RepetitionCounter=0x0000;
 80012f8:	2300      	movs	r3, #0
 80012fa:	763b      	strb	r3, [r7, #24]

	TIM_TimeBaseInit(TIM3,&TIM_TimeBaseStruct);
 80012fc:	f107 0310 	add.w	r3, r7, #16
 8001300:	4815      	ldr	r0, [pc, #84]	; (8001358 <setUpPWM+0xa0>)
 8001302:	4619      	mov	r1, r3
 8001304:	f001 fe68 	bl	8002fd8 <TIM_TimeBaseInit>

	TIM_OCInitTypeDef OC;

	OC.TIM_OCMode=TIM_OCMode_PWM1;
 8001308:	2360      	movs	r3, #96	; 0x60
 800130a:	803b      	strh	r3, [r7, #0]
	OC.TIM_OutputState=TIM_OutputState_Enable;
 800130c:	2301      	movs	r3, #1
 800130e:	807b      	strh	r3, [r7, #2]
	OC.TIM_Pulse=20000;
 8001310:	f644 6320 	movw	r3, #20000	; 0x4e20
 8001314:	80fb      	strh	r3, [r7, #6]
	OC.TIM_OCPolarity=TIM_OCPolarity_Low;
 8001316:	2302      	movs	r3, #2
 8001318:	813b      	strh	r3, [r7, #8]



	TIM_OC1Init(TIM3,&OC);
 800131a:	463b      	mov	r3, r7
 800131c:	480e      	ldr	r0, [pc, #56]	; (8001358 <setUpPWM+0xa0>)
 800131e:	4619      	mov	r1, r3
 8001320:	f001 fed6 	bl	80030d0 <TIM_OC1Init>
	TIM_OC1PreloadConfig(TIM3,TIM_OCPreload_Enable);
 8001324:	480c      	ldr	r0, [pc, #48]	; (8001358 <setUpPWM+0xa0>)
 8001326:	2108      	movs	r1, #8
 8001328:	f001 ffe8 	bl	80032fc <TIM_OC1PreloadConfig>

	TIM_ARRPreloadConfig(TIM3,DISABLE);
 800132c:	480a      	ldr	r0, [pc, #40]	; (8001358 <setUpPWM+0xa0>)
 800132e:	2100      	movs	r1, #0
 8001330:	f001 ffc4 	bl	80032bc <TIM_ARRPreloadConfig>
	TIM_CtrlPWMOutputs(TIM3, ENABLE);
 8001334:	4808      	ldr	r0, [pc, #32]	; (8001358 <setUpPWM+0xa0>)
 8001336:	2101      	movs	r1, #1
 8001338:	f001 ff76 	bl	8003228 <TIM_CtrlPWMOutputs>
	TIM_Cmd(TIM3,ENABLE);
 800133c:	4806      	ldr	r0, [pc, #24]	; (8001358 <setUpPWM+0xa0>)
 800133e:	2101      	movs	r1, #1
 8001340:	f001 ff52 	bl	80031e8 <TIM_Cmd>
	TIM_SetCompare1(TIM3,10000);//inversed//set compare sets the duty (val between 0 and 40 000 where 40000 is 0% and 0 is 100%
 8001344:	4804      	ldr	r0, [pc, #16]	; (8001358 <setUpPWM+0xa0>)
 8001346:	f242 7110 	movw	r1, #10000	; 0x2710
 800134a:	f002 f801 	bl	8003350 <TIM_SetCompare1>





}
 800134e:	3720      	adds	r7, #32
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}
 8001354:	40010800 	.word	0x40010800
 8001358:	40000400 	.word	0x40000400

0800135c <main>:
uint32_t temp=0;
uint16_t recVal;
void setUpPWM(void);

int main(void)
{
 800135c:	b590      	push	{r4, r7, lr}
 800135e:	b0a5      	sub	sp, #148	; 0x94
 8001360:	af04      	add	r7, sp, #16
  serialTerminal_Init();
 8001362:	f7ff fd9f 	bl	8000ea4 <serialTerminal_Init>
  setUpLoopTimer();
 8001366:	f000 fc45 	bl	8001bf4 <setUpLoopTimer>
  setUpGPIO();
 800136a:	f000 fc1d 	bl	8001ba8 <setUpGPIO>
  setUpEcompass();
 800136e:	f000 fda3 	bl	8001eb8 <setUpEcompass>
  setUpGyro();
 8001372:	f000 f8d1 	bl	8001518 <setUpGyro>
  setUpXbee();
 8001376:	f000 fcad 	bl	8001cd4 <setUpXbee>
  setUpPWM();
 800137a:	f7ff ff9d 	bl	80012b8 <setUpPWM>

  uint8_t acc8[12];
  uint8_t mag8[12];
  uint8_t gyro8[12];
  uint8_t temp8;
  USART_Cmd(USART2,ENABLE);
 800137e:	4862      	ldr	r0, [pc, #392]	; (8001508 <main+0x1ac>)
 8001380:	2101      	movs	r1, #1
 8001382:	f001 fda9 	bl	8002ed8 <USART_Cmd>

  while (1)
  {
	  controlMethod(&acc[0],&mag[0],&gyro[0],&temp);//get the data
 8001386:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 800138a:	f107 0160 	add.w	r1, r7, #96	; 0x60
 800138e:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8001392:	f107 0353 	add.w	r3, r7, #83	; 0x53
 8001396:	f000 fc87 	bl	8001ca8 <controlMethod>

	  //Toggle PA11 to test loop frequency
	  uint8_t status = GPIO_ReadOutputData(GPIOA);
 800139a:	485c      	ldr	r0, [pc, #368]	; (800150c <main+0x1b0>)
 800139c:	f002 fcfe 	bl	8003d9c <GPIO_ReadOutputData>
 80013a0:	4603      	mov	r3, r0
 80013a2:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
	  if (status == 0) {
 80013a6:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d105      	bne.n	80013ba <main+0x5e>
		  GPIO_SetBits(GPIOA,GPIO_Pin_11);
 80013ae:	4857      	ldr	r0, [pc, #348]	; (800150c <main+0x1b0>)
 80013b0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80013b4:	f002 fd00 	bl	8003db8 <GPIO_SetBits>
 80013b8:	e004      	b.n	80013c4 <main+0x68>
	  }else{
		  GPIO_ResetBits(GPIOA,GPIO_Pin_11);
 80013ba:	4854      	ldr	r0, [pc, #336]	; (800150c <main+0x1b0>)
 80013bc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80013c0:	f002 fd08 	bl	8003dd4 <GPIO_ResetBits>
	  }



	  recVal=0;
 80013c4:	4b52      	ldr	r3, [pc, #328]	; (8001510 <main+0x1b4>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	801a      	strh	r2, [r3, #0]
	  recVal=USART_ReceiveData(USART2);
 80013ca:	484f      	ldr	r0, [pc, #316]	; (8001508 <main+0x1ac>)
 80013cc:	f001 fdc8 	bl	8002f60 <USART_ReceiveData>
 80013d0:	4603      	mov	r3, r0
 80013d2:	461a      	mov	r2, r3
 80013d4:	4b4e      	ldr	r3, [pc, #312]	; (8001510 <main+0x1b4>)
 80013d6:	801a      	strh	r2, [r3, #0]
	  if(recVal==0x7E&&USART_GetFlagStatus(USART2,USART_IT_RXNE))
 80013d8:	4b4d      	ldr	r3, [pc, #308]	; (8001510 <main+0x1b4>)
 80013da:	881b      	ldrh	r3, [r3, #0]
 80013dc:	2b7e      	cmp	r3, #126	; 0x7e
 80013de:	f040 8091 	bne.w	8001504 <main+0x1a8>
 80013e2:	4849      	ldr	r0, [pc, #292]	; (8001508 <main+0x1ac>)
 80013e4:	f240 5125 	movw	r1, #1317	; 0x525
 80013e8:	f001 fdca 	bl	8002f80 <USART_GetFlagStatus>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	f000 8088 	beq.w	8001504 <main+0x1a8>
	  {
		  USART_ClearFlag(USART2,USART_IT_RXNE);
 80013f4:	4844      	ldr	r0, [pc, #272]	; (8001508 <main+0x1ac>)
 80013f6:	f240 5125 	movw	r1, #1317	; 0x525
 80013fa:	f001 fddd 	bl	8002fb8 <USART_ClearFlag>
		  TIM_SetCounter(TIM2,0x00);//TODO: This could force an interrupt, not sure, double check
 80013fe:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001402:	2100      	movs	r1, #0
 8001404:	f001 ff96 	bl	8003334 <TIM_SetCounter>

	  USART_Cmd(USART2,DISABLE);
 8001408:	483f      	ldr	r0, [pc, #252]	; (8001508 <main+0x1ac>)
 800140a:	2100      	movs	r1, #0
 800140c:	f001 fd64 	bl	8002ed8 <USART_Cmd>
	  DMA_DeInit(DMA1_Channel7);
 8001410:	4840      	ldr	r0, [pc, #256]	; (8001514 <main+0x1b8>)
 8001412:	f002 fced 	bl	8003df0 <DMA_DeInit>
	  controlMethod(&acc[0],&mag[0],&gyro[0],&temp);//get the data
 8001416:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 800141a:	f107 0160 	add.w	r1, r7, #96	; 0x60
 800141e:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8001422:	f107 0353 	add.w	r3, r7, #83	; 0x53
 8001426:	f000 fc3f 	bl	8001ca8 <controlMethod>
	  union
	  {
	  	char temp_char[12];
	  	float temp_float_buffer[3];
	  }buffer_to_char_union1;
	  buffer_to_char_union1.temp_float_buffer[0]=acc[0];
 800142a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800142c:	61fb      	str	r3, [r7, #28]
	  buffer_to_char_union1.temp_float_buffer[1]=acc[1];
 800142e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001430:	623b      	str	r3, [r7, #32]
	  buffer_to_char_union1.temp_float_buffer[2]=acc[2];
 8001432:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001434:	627b      	str	r3, [r7, #36]	; 0x24
	  int i;
	  for(i=0;i<12;i++)
 8001436:	2300      	movs	r3, #0
 8001438:	67fb      	str	r3, [r7, #124]	; 0x7c
 800143a:	e00c      	b.n	8001456 <main+0xfa>
	  {
		  acc8[i]=buffer_to_char_union1.temp_char[i];
 800143c:	f107 021c 	add.w	r2, r7, #28
 8001440:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001442:	4413      	add	r3, r2
 8001444:	781a      	ldrb	r2, [r3, #0]
 8001446:	f107 0144 	add.w	r1, r7, #68	; 0x44
 800144a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800144c:	440b      	add	r3, r1
 800144e:	701a      	strb	r2, [r3, #0]
	  }buffer_to_char_union1;
	  buffer_to_char_union1.temp_float_buffer[0]=acc[0];
	  buffer_to_char_union1.temp_float_buffer[1]=acc[1];
	  buffer_to_char_union1.temp_float_buffer[2]=acc[2];
	  int i;
	  for(i=0;i<12;i++)
 8001450:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001452:	3301      	adds	r3, #1
 8001454:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001456:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001458:	2b0b      	cmp	r3, #11
 800145a:	ddef      	ble.n	800143c <main+0xe0>
	  union
	  {
	   	char temp_char[12];
	   	float temp_float_buffer[3];
	  }buffer_to_char_union2;
	  buffer_to_char_union2.temp_float_buffer[0]=mag[0];
 800145c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800145e:	613b      	str	r3, [r7, #16]
	  buffer_to_char_union2.temp_float_buffer[1]=mag[1];
 8001460:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001462:	617b      	str	r3, [r7, #20]
	  buffer_to_char_union2.temp_float_buffer[2]=mag[2];
 8001464:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001466:	61bb      	str	r3, [r7, #24]
	  for(i=0;i<12;i++)
 8001468:	2300      	movs	r3, #0
 800146a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800146c:	e00c      	b.n	8001488 <main+0x12c>
	  {
		  mag8[i]=buffer_to_char_union2.temp_char[i];
 800146e:	f107 0210 	add.w	r2, r7, #16
 8001472:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001474:	4413      	add	r3, r2
 8001476:	781a      	ldrb	r2, [r3, #0]
 8001478:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800147c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800147e:	440b      	add	r3, r1
 8001480:	701a      	strb	r2, [r3, #0]
	   	float temp_float_buffer[3];
	  }buffer_to_char_union2;
	  buffer_to_char_union2.temp_float_buffer[0]=mag[0];
	  buffer_to_char_union2.temp_float_buffer[1]=mag[1];
	  buffer_to_char_union2.temp_float_buffer[2]=mag[2];
	  for(i=0;i<12;i++)
 8001482:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001484:	3301      	adds	r3, #1
 8001486:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001488:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800148a:	2b0b      	cmp	r3, #11
 800148c:	ddef      	ble.n	800146e <main+0x112>
	  union
	  {
	   	char temp_char[12];
	   	float temp_float_buffer[3];
	  }buffer_to_char_union3;
	  buffer_to_char_union3.temp_float_buffer[0]=gyro[0];
 800148e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001490:	607b      	str	r3, [r7, #4]
	  buffer_to_char_union3.temp_float_buffer[1]=gyro[1];
 8001492:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001494:	60bb      	str	r3, [r7, #8]
	  buffer_to_char_union3.temp_float_buffer[2]=gyro[2];
 8001496:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001498:	60fb      	str	r3, [r7, #12]
	  for(i=0;i<12;i++)
 800149a:	2300      	movs	r3, #0
 800149c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800149e:	e00b      	b.n	80014b8 <main+0x15c>
	  {
		  gyro8[i]=buffer_to_char_union3.temp_char[i];
 80014a0:	1d3a      	adds	r2, r7, #4
 80014a2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80014a4:	4413      	add	r3, r2
 80014a6:	781a      	ldrb	r2, [r3, #0]
 80014a8:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 80014ac:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80014ae:	440b      	add	r3, r1
 80014b0:	701a      	strb	r2, [r3, #0]
	   	float temp_float_buffer[3];
	  }buffer_to_char_union3;
	  buffer_to_char_union3.temp_float_buffer[0]=gyro[0];
	  buffer_to_char_union3.temp_float_buffer[1]=gyro[1];
	  buffer_to_char_union3.temp_float_buffer[2]=gyro[2];
	  for(i=0;i<12;i++)
 80014b2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80014b4:	3301      	adds	r3, #1
 80014b6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80014b8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80014ba:	2b0b      	cmp	r3, #11
 80014bc:	ddf0      	ble.n	80014a0 <main+0x144>
	  union
	  {
	   	s8 temp_signed;
	   	uint8_t temp_unsigned;
	  }buffer_to_char_union4;
	  buffer_to_char_union4.temp_signed=temp;
 80014be:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 80014c2:	703b      	strb	r3, [r7, #0]
	  temp8=buffer_to_char_union4.temp_unsigned;
 80014c4:	783b      	ldrb	r3, [r7, #0]
 80014c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

	  serialTerminal_packetize(gyro8,acc8,mag8,&temp8,12,12,12,1);
 80014ca:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 80014ce:	f107 0144 	add.w	r1, r7, #68	; 0x44
 80014d2:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80014d6:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 80014da:	240c      	movs	r4, #12
 80014dc:	9400      	str	r4, [sp, #0]
 80014de:	240c      	movs	r4, #12
 80014e0:	9401      	str	r4, [sp, #4]
 80014e2:	240c      	movs	r4, #12
 80014e4:	9402      	str	r4, [sp, #8]
 80014e6:	2401      	movs	r4, #1
 80014e8:	9403      	str	r4, [sp, #12]
 80014ea:	f7ff fce1 	bl	8000eb0 <serialTerminal_packetize>
	  USART_Cmd(USART2,ENABLE);
 80014ee:	4806      	ldr	r0, [pc, #24]	; (8001508 <main+0x1ac>)
 80014f0:	2101      	movs	r1, #1
 80014f2:	f001 fcf1 	bl	8002ed8 <USART_Cmd>
	  S_DMA();//re init the DMA and then it will send
 80014f6:	f000 fc2d 	bl	8001d54 <S_DMA>

	  wait();
 80014fa:	f000 fbc5 	bl	8001c88 <wait>
	  wait();
 80014fe:	f000 fbc3 	bl	8001c88 <wait>
	  }
  }
 8001502:	e740      	b.n	8001386 <main+0x2a>
 8001504:	e73f      	b.n	8001386 <main+0x2a>
 8001506:	bf00      	nop
 8001508:	40004400 	.word	0x40004400
 800150c:	40010800 	.word	0x40010800
 8001510:	2000053e 	.word	0x2000053e
 8001514:	40020080 	.word	0x40020080

08001518 <setUpGyro>:
#include "gyro.h"
//////////////////////////////////////////////////////////////////////////
////////////////GYRO FUNCTIONS////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
void setUpGyro()
{
 8001518:	b580      	push	{r7, lr}
 800151a:	af00      	add	r7, sp, #0
	initSPIgyro();
 800151c:	f000 f804 	bl	8001528 <initSPIgyro>
	spiGyroRegisterSetup();
 8001520:	f000 f854 	bl	80015cc <spiGyroRegisterSetup>
}
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop

08001528 <initSPIgyro>:

void initSPIgyro(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b086      	sub	sp, #24
 800152c:	af00      	add	r7, sp, #0
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB,ENABLE);
 800152e:	2008      	movs	r0, #8
 8001530:	2101      	movs	r1, #1
 8001532:	f002 f8fb 	bl	800372c <RCC_APB2PeriphClockCmd>
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_SPI2,ENABLE);
 8001536:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800153a:	2101      	movs	r1, #1
 800153c:	f002 f914 	bl	8003768 <RCC_APB1PeriphClockCmd>


	GPIO_InitTypeDef GPIO_InitStruct;

	/* Pack the struct */
	GPIO_InitStruct.GPIO_Pin =GPIO_Pin_13 | GPIO_Pin_14| GPIO_Pin_15;
 8001540:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001544:	82bb      	strh	r3, [r7, #20]
	GPIO_InitStruct.GPIO_Mode =GPIO_Mode_AF_PP;
 8001546:	2318      	movs	r3, #24
 8001548:	75fb      	strb	r3, [r7, #23]
	GPIO_InitStruct.GPIO_Speed =GPIO_Speed_50MHz;
 800154a:	2303      	movs	r3, #3
 800154c:	75bb      	strb	r3, [r7, #22]
	GPIO_Init(GPIOB, &GPIO_InitStruct);
 800154e:	f107 0314 	add.w	r3, r7, #20
 8001552:	481c      	ldr	r0, [pc, #112]	; (80015c4 <initSPIgyro+0x9c>)
 8001554:	4619      	mov	r1, r3
 8001556:	f002 fb65 	bl	8003c24 <GPIO_Init>

	//Init CS-Pin
	GPIO_InitStruct.GPIO_Pin =GPIO_Pin_12;
 800155a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800155e:	82bb      	strh	r3, [r7, #20]
	GPIO_InitStruct.GPIO_Mode =GPIO_Mode_Out_PP;
 8001560:	2310      	movs	r3, #16
 8001562:	75fb      	strb	r3, [r7, #23]
	GPIO_InitStruct.GPIO_Speed =GPIO_Speed_50MHz;
 8001564:	2303      	movs	r3, #3
 8001566:	75bb      	strb	r3, [r7, #22]
	GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001568:	f107 0314 	add.w	r3, r7, #20
 800156c:	4815      	ldr	r0, [pc, #84]	; (80015c4 <initSPIgyro+0x9c>)
 800156e:	4619      	mov	r1, r3
 8001570:	f002 fb58 	bl	8003c24 <GPIO_Init>

	GPIO_SetBits(GPIOB, GPIO_Pin_12);  //Set CS high
 8001574:	4813      	ldr	r0, [pc, #76]	; (80015c4 <initSPIgyro+0x9c>)
 8001576:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800157a:	f002 fc1d 	bl	8003db8 <GPIO_SetBits>

	SPI_InitTypeDef  SPI_InitStructure;

	SPI_I2S_DeInit(SPI2);
 800157e:	4812      	ldr	r0, [pc, #72]	; (80015c8 <initSPIgyro+0xa0>)
 8001580:	f001 ff2e 	bl	80033e0 <SPI_I2S_DeInit>
	SPI_InitStructure.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 8001584:	2300      	movs	r3, #0
 8001586:	803b      	strh	r3, [r7, #0]
	SPI_InitStructure.SPI_Mode = SPI_Mode_Master;
 8001588:	f44f 7382 	mov.w	r3, #260	; 0x104
 800158c:	807b      	strh	r3, [r7, #2]
	SPI_InitStructure.SPI_DataSize = SPI_DataSize_8b ;
 800158e:	2300      	movs	r3, #0
 8001590:	80bb      	strh	r3, [r7, #4]
	SPI_InitStructure.SPI_CPOL = SPI_CPOL_Low;
 8001592:	2300      	movs	r3, #0
 8001594:	80fb      	strh	r3, [r7, #6]
	SPI_InitStructure.SPI_CPHA = SPI_CPHA_1Edge;
 8001596:	2300      	movs	r3, #0
 8001598:	813b      	strh	r3, [r7, #8]
	SPI_InitStructure.SPI_NSS = SPI_NSS_Soft;
 800159a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800159e:	817b      	strh	r3, [r7, #10]
	SPI_InitStructure.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_8;
 80015a0:	2310      	movs	r3, #16
 80015a2:	81bb      	strh	r3, [r7, #12]
	SPI_InitStructure.SPI_FirstBit = SPI_FirstBit_MSB;
 80015a4:	2300      	movs	r3, #0
 80015a6:	81fb      	strh	r3, [r7, #14]
	SPI_InitStructure.SPI_CRCPolynomial = 7;
 80015a8:	2307      	movs	r3, #7
 80015aa:	823b      	strh	r3, [r7, #16]

	SPI_Init(SPI2, &SPI_InitStructure);
 80015ac:	463b      	mov	r3, r7
 80015ae:	4806      	ldr	r0, [pc, #24]	; (80015c8 <initSPIgyro+0xa0>)
 80015b0:	4619      	mov	r1, r3
 80015b2:	f001 ff4f 	bl	8003454 <SPI_Init>

	SPI_Cmd(SPI2, ENABLE);
 80015b6:	4804      	ldr	r0, [pc, #16]	; (80015c8 <initSPIgyro+0xa0>)
 80015b8:	2101      	movs	r1, #1
 80015ba:	f001 ff8f 	bl	80034dc <SPI_Cmd>
}
 80015be:	3718      	adds	r7, #24
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}
 80015c4:	40010c00 	.word	0x40010c00
 80015c8:	40003800 	.word	0x40003800

080015cc <spiGyroRegisterSetup>:
void spiGyroRegisterSetup(void)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	af00      	add	r7, sp, #0
	//10 11=380
	//11 00=760
	//11 01=760
	//11 10=760
	//11 11=760
	(void)writeSPIgyro(0b00100000,0b01001111);//reg 0x20-ctrl_Reg1 (first 2 bits are "write" and "no increment"
 80015d0:	2020      	movs	r0, #32
 80015d2:	214f      	movs	r1, #79	; 0x4f
 80015d4:	f000 f80a 	bl	80015ec <writeSPIgyro>
	//BDU BLE FS1 FS0 - 0 0 SIM
	//BDU 0=continuous update 1=not updated until both read
	//BLE 0=data LSB at lower address
	//FS 00=250dps 01=500dps 10=2000dps 11=2000dps
	//SIM-SPI serial interface 0=4wire 1=3wire
	(void)writeSPIgyro(0b00100011,0b10000000);//reg 0x23-ctrl_Reg4
 80015d8:	2023      	movs	r0, #35	; 0x23
 80015da:	2180      	movs	r1, #128	; 0x80
 80015dc:	f000 f806 	bl	80015ec <writeSPIgyro>
	//BOOT 0=normal
	//FIFO 0=disable
	//Hpen high pass filter 0=disable
	//INT default 0 to disable
	//out out selection configuration default 0
	(void)writeSPIgyro(0b00100100,0b00000000);//reg 0x24-ctrl_Reg5
 80015e0:	2024      	movs	r0, #36	; 0x24
 80015e2:	2100      	movs	r1, #0
 80015e4:	f000 f802 	bl	80015ec <writeSPIgyro>
}
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop

080015ec <writeSPIgyro>:
uint16_t writeSPIgyro(uint8_t regAdr, uint8_t data)//also reads the register
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b084      	sub	sp, #16
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	4602      	mov	r2, r0
 80015f4:	460b      	mov	r3, r1
 80015f6:	71fa      	strb	r2, [r7, #7]
 80015f8:	71bb      	strb	r3, [r7, #6]
	uint8_t dummyVar;
	int32_t val;

	/* Pull CS line low */
	GPIO_ResetBits(GPIOB, GPIO_Pin_12);
 80015fa:	4823      	ldr	r0, [pc, #140]	; (8001688 <writeSPIgyro+0x9c>)
 80015fc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001600:	f002 fbe8 	bl	8003dd4 <GPIO_ResetBits>

	while (SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_TXE) == RESET)
 8001604:	bf00      	nop
 8001606:	4821      	ldr	r0, [pc, #132]	; (800168c <writeSPIgyro+0xa0>)
 8001608:	2102      	movs	r1, #2
 800160a:	f001 ffa3 	bl	8003554 <SPI_I2S_GetFlagStatus>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	d0f8      	beq.n	8001606 <writeSPIgyro+0x1a>
	{
		/* Wait for all transmissions to complete */
	}
	SPI_I2S_SendData(SPI2, regAdr);    //Sensor Address that we are WRITING to
 8001614:	79fb      	ldrb	r3, [r7, #7]
 8001616:	b29b      	uxth	r3, r3
 8001618:	481c      	ldr	r0, [pc, #112]	; (800168c <writeSPIgyro+0xa0>)
 800161a:	4619      	mov	r1, r3
 800161c:	f001 ff7e 	bl	800351c <SPI_I2S_SendData>
	while (SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_RXNE) == RESET)
 8001620:	bf00      	nop
 8001622:	481a      	ldr	r0, [pc, #104]	; (800168c <writeSPIgyro+0xa0>)
 8001624:	2101      	movs	r1, #1
 8001626:	f001 ff95 	bl	8003554 <SPI_I2S_GetFlagStatus>
 800162a:	4603      	mov	r3, r0
 800162c:	2b00      	cmp	r3, #0
 800162e:	d0f8      	beq.n	8001622 <writeSPIgyro+0x36>
	{
		/* Wait for data */
	}
	dummyVar = SPI_I2S_ReceiveData(SPI2);
 8001630:	4816      	ldr	r0, [pc, #88]	; (800168c <writeSPIgyro+0xa0>)
 8001632:	f001 ff81 	bl	8003538 <SPI_I2S_ReceiveData>
 8001636:	4603      	mov	r3, r0
 8001638:	73fb      	strb	r3, [r7, #15]

	while (SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_TXE) == RESET)
 800163a:	bf00      	nop
 800163c:	4813      	ldr	r0, [pc, #76]	; (800168c <writeSPIgyro+0xa0>)
 800163e:	2102      	movs	r1, #2
 8001640:	f001 ff88 	bl	8003554 <SPI_I2S_GetFlagStatus>
 8001644:	4603      	mov	r3, r0
 8001646:	2b00      	cmp	r3, #0
 8001648:	d0f8      	beq.n	800163c <writeSPIgyro+0x50>
	{
		/* Wait for all transmissions to complete */
	}
	SPI_I2S_SendData(SPI2, data);    //Sensor Config
 800164a:	79bb      	ldrb	r3, [r7, #6]
 800164c:	b29b      	uxth	r3, r3
 800164e:	480f      	ldr	r0, [pc, #60]	; (800168c <writeSPIgyro+0xa0>)
 8001650:	4619      	mov	r1, r3
 8001652:	f001 ff63 	bl	800351c <SPI_I2S_SendData>

	while (SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_RXNE) == RESET)
 8001656:	bf00      	nop
 8001658:	480c      	ldr	r0, [pc, #48]	; (800168c <writeSPIgyro+0xa0>)
 800165a:	2101      	movs	r1, #1
 800165c:	f001 ff7a 	bl	8003554 <SPI_I2S_GetFlagStatus>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d0f8      	beq.n	8001658 <writeSPIgyro+0x6c>
	{
		/* Wait for data */
	}
	val = (u8)SPI_I2S_ReceiveData(SPI2);
 8001666:	4809      	ldr	r0, [pc, #36]	; (800168c <writeSPIgyro+0xa0>)
 8001668:	f001 ff66 	bl	8003538 <SPI_I2S_ReceiveData>
 800166c:	4603      	mov	r3, r0
 800166e:	b2db      	uxtb	r3, r3
 8001670:	60bb      	str	r3, [r7, #8]

	/* Pull CS line high */
	GPIO_SetBits(GPIOB, GPIO_Pin_12);
 8001672:	4805      	ldr	r0, [pc, #20]	; (8001688 <writeSPIgyro+0x9c>)
 8001674:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001678:	f002 fb9e 	bl	8003db8 <GPIO_SetBits>
	return (u16)val;
 800167c:	68bb      	ldr	r3, [r7, #8]
 800167e:	b29b      	uxth	r3, r3

}
 8001680:	4618      	mov	r0, r3
 8001682:	3710      	adds	r7, #16
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}
 8001688:	40010c00 	.word	0x40010c00
 800168c:	40003800 	.word	0x40003800

08001690 <getGyro>:
void getGyro(float* out )
{
 8001690:	b590      	push	{r4, r7, lr}
 8001692:	b08f      	sub	sp, #60	; 0x3c
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
	//expressed as 2s compliment
	u8 crtlB;
	u16 buffer[6];
	crtlB=(u8)writeSPIgyro(0b10100011,0x00);
 8001698:	20a3      	movs	r0, #163	; 0xa3
 800169a:	2100      	movs	r1, #0
 800169c:	f7ff ffa6 	bl	80015ec <writeSPIgyro>
 80016a0:	4603      	mov	r3, r0
 80016a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	u16 gyroXL=writeSPIgyro(0b10101000,0x00);
 80016a6:	20a8      	movs	r0, #168	; 0xa8
 80016a8:	2100      	movs	r1, #0
 80016aa:	f7ff ff9f 	bl	80015ec <writeSPIgyro>
 80016ae:	4603      	mov	r3, r0
 80016b0:	863b      	strh	r3, [r7, #48]	; 0x30
	u16 gyroXH=writeSPIgyro(0b10101001,0x00);
 80016b2:	20a9      	movs	r0, #169	; 0xa9
 80016b4:	2100      	movs	r1, #0
 80016b6:	f7ff ff99 	bl	80015ec <writeSPIgyro>
 80016ba:	4603      	mov	r3, r0
 80016bc:	85fb      	strh	r3, [r7, #46]	; 0x2e
	u16 gyroYL=writeSPIgyro(0b10101010,0x00);
 80016be:	20aa      	movs	r0, #170	; 0xaa
 80016c0:	2100      	movs	r1, #0
 80016c2:	f7ff ff93 	bl	80015ec <writeSPIgyro>
 80016c6:	4603      	mov	r3, r0
 80016c8:	85bb      	strh	r3, [r7, #44]	; 0x2c
	u16 gyroYH=writeSPIgyro(0b10101011,0x00);
 80016ca:	20ab      	movs	r0, #171	; 0xab
 80016cc:	2100      	movs	r1, #0
 80016ce:	f7ff ff8d 	bl	80015ec <writeSPIgyro>
 80016d2:	4603      	mov	r3, r0
 80016d4:	857b      	strh	r3, [r7, #42]	; 0x2a
	u16 gyroZL=writeSPIgyro(0b10101100,0x00);
 80016d6:	20ac      	movs	r0, #172	; 0xac
 80016d8:	2100      	movs	r1, #0
 80016da:	f7ff ff87 	bl	80015ec <writeSPIgyro>
 80016de:	4603      	mov	r3, r0
 80016e0:	853b      	strh	r3, [r7, #40]	; 0x28
	u16 gyroZH=writeSPIgyro(0b10101101,0x00);
 80016e2:	20ad      	movs	r0, #173	; 0xad
 80016e4:	2100      	movs	r1, #0
 80016e6:	f7ff ff81 	bl	80015ec <writeSPIgyro>
 80016ea:	4603      	mov	r3, r0
 80016ec:	84fb      	strh	r3, [r7, #38]	; 0x26

	buffer[1]=gyroXL;
 80016ee:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80016f0:	81fb      	strh	r3, [r7, #14]
	buffer[0]=gyroXH;
 80016f2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80016f4:	81bb      	strh	r3, [r7, #12]
	buffer[3]=gyroYL;
 80016f6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80016f8:	827b      	strh	r3, [r7, #18]
	buffer[2]=gyroYH;
 80016fa:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80016fc:	823b      	strh	r3, [r7, #16]
	buffer[5]=gyroZL;
 80016fe:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001700:	82fb      	strh	r3, [r7, #22]
	buffer[4]=gyroZH;
 8001702:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001704:	82bb      	strh	r3, [r7, #20]
	u16 t=0;
 8001706:	2300      	movs	r3, #0
 8001708:	84bb      	strh	r3, [r7, #36]	; 0x24
	int i=0;
 800170a:	2300      	movs	r3, #0
 800170c:	637b      	str	r3, [r7, #52]	; 0x34
	u8 temp=(u8)(crtlB & 0x30);
 800170e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001712:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001716:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	switch(temp)
 800171a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800171e:	2b10      	cmp	r3, #16
 8001720:	d055      	beq.n	80017ce <getGyro+0x13e>
 8001722:	2b10      	cmp	r3, #16
 8001724:	dc02      	bgt.n	800172c <getGyro+0x9c>
 8001726:	2b00      	cmp	r3, #0
 8001728:	d007      	beq.n	800173a <getGyro+0xaa>
 800172a:	e122      	b.n	8001972 <getGyro+0x2e2>
 800172c:	2b20      	cmp	r3, #32
 800172e:	f000 8098 	beq.w	8001862 <getGyro+0x1d2>
 8001732:	2b30      	cmp	r3, #48	; 0x30
 8001734:	f000 80d9 	beq.w	80018ea <getGyro+0x25a>
 8001738:	e11b      	b.n	8001972 <getGyro+0x2e2>
	{
	case (u8)0x00://250dps
	  for(i=0; i<3; i++)
 800173a:	2300      	movs	r3, #0
 800173c:	637b      	str	r3, [r7, #52]	; 0x34
 800173e:	e042      	b.n	80017c6 <getGyro+0x136>
	  {
		  t=(((u16)buffer[2*i] << 8) | buffer[2*i+1]);
 8001740:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001742:	005b      	lsls	r3, r3, #1
 8001744:	005b      	lsls	r3, r3, #1
 8001746:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800174a:	440b      	add	r3, r1
 800174c:	f833 3c2c 	ldrh.w	r3, [r3, #-44]
 8001750:	021b      	lsls	r3, r3, #8
 8001752:	b29a      	uxth	r2, r3
 8001754:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001756:	005b      	lsls	r3, r3, #1
 8001758:	3301      	adds	r3, #1
 800175a:	005b      	lsls	r3, r3, #1
 800175c:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8001760:	440b      	add	r3, r1
 8001762:	f833 3c2c 	ldrh.w	r3, [r3, #-44]
 8001766:	b29b      	uxth	r3, r3
 8001768:	4313      	orrs	r3, r2
 800176a:	b29b      	uxth	r3, r3
 800176c:	84bb      	strh	r3, [r7, #36]	; 0x24
		  s16 temp2=twosCompToDec16(t);
 800176e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001770:	4618      	mov	r0, r3
 8001772:	f000 f91f 	bl	80019b4 <twosCompToDec16>
 8001776:	4603      	mov	r3, r0
 8001778:	843b      	strh	r3, [r7, #32]
		  out[i]=(float)((temp2*8.75/1000.0));
 800177a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800177c:	009b      	lsls	r3, r3, #2
 800177e:	687a      	ldr	r2, [r7, #4]
 8001780:	18d4      	adds	r4, r2, r3
 8001782:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8001786:	4618      	mov	r0, r3
 8001788:	f7fe fea0 	bl	80004cc <__aeabi_i2d>
 800178c:	4602      	mov	r2, r0
 800178e:	460b      	mov	r3, r1
 8001790:	4610      	mov	r0, r2
 8001792:	4619      	mov	r1, r3
 8001794:	f04f 0200 	mov.w	r2, #0
 8001798:	4b77      	ldr	r3, [pc, #476]	; (8001978 <getGyro+0x2e8>)
 800179a:	f7fe fefd 	bl	8000598 <__aeabi_dmul>
 800179e:	4602      	mov	r2, r0
 80017a0:	460b      	mov	r3, r1
 80017a2:	4610      	mov	r0, r2
 80017a4:	4619      	mov	r1, r3
 80017a6:	f04f 0200 	mov.w	r2, #0
 80017aa:	4b74      	ldr	r3, [pc, #464]	; (800197c <getGyro+0x2ec>)
 80017ac:	f7ff f81e 	bl	80007ec <__aeabi_ddiv>
 80017b0:	4602      	mov	r2, r0
 80017b2:	460b      	mov	r3, r1
 80017b4:	4610      	mov	r0, r2
 80017b6:	4619      	mov	r1, r3
 80017b8:	f7ff f900 	bl	80009bc <__aeabi_d2f>
 80017bc:	4603      	mov	r3, r0
 80017be:	6023      	str	r3, [r4, #0]
	int i=0;
	u8 temp=(u8)(crtlB & 0x30);
	switch(temp)
	{
	case (u8)0x00://250dps
	  for(i=0; i<3; i++)
 80017c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017c2:	3301      	adds	r3, #1
 80017c4:	637b      	str	r3, [r7, #52]	; 0x34
 80017c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017c8:	2b02      	cmp	r3, #2
 80017ca:	ddb9      	ble.n	8001740 <getGyro+0xb0>
	  {
		  t=(((u16)buffer[2*i] << 8) | buffer[2*i+1]);
		  s16 temp2=twosCompToDec16(t);
		  out[i]=(float)((temp2*8.75/1000.0));
	  }
	  break;
 80017cc:	e0d1      	b.n	8001972 <getGyro+0x2e2>
	case (u8)0x10://500dps
	  for(i=0; i<3; i++)
 80017ce:	2300      	movs	r3, #0
 80017d0:	637b      	str	r3, [r7, #52]	; 0x34
 80017d2:	e042      	b.n	800185a <getGyro+0x1ca>
	  {
		  t=(((u16)buffer[2*i] << 8) |buffer[2*i+1]);
 80017d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017d6:	005b      	lsls	r3, r3, #1
 80017d8:	005b      	lsls	r3, r3, #1
 80017da:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80017de:	4413      	add	r3, r2
 80017e0:	f833 3c2c 	ldrh.w	r3, [r3, #-44]
 80017e4:	021b      	lsls	r3, r3, #8
 80017e6:	b29a      	uxth	r2, r3
 80017e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017ea:	005b      	lsls	r3, r3, #1
 80017ec:	3301      	adds	r3, #1
 80017ee:	005b      	lsls	r3, r3, #1
 80017f0:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80017f4:	440b      	add	r3, r1
 80017f6:	f833 3c2c 	ldrh.w	r3, [r3, #-44]
 80017fa:	b29b      	uxth	r3, r3
 80017fc:	4313      	orrs	r3, r2
 80017fe:	b29b      	uxth	r3, r3
 8001800:	84bb      	strh	r3, [r7, #36]	; 0x24
		  s16 temp2=twosCompToDec16(t);
 8001802:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001804:	4618      	mov	r0, r3
 8001806:	f000 f8d5 	bl	80019b4 <twosCompToDec16>
 800180a:	4603      	mov	r3, r0
 800180c:	83fb      	strh	r3, [r7, #30]
		  out[i]=(float)((temp2*17.5/1000.0));
 800180e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001810:	009b      	lsls	r3, r3, #2
 8001812:	687a      	ldr	r2, [r7, #4]
 8001814:	18d4      	adds	r4, r2, r3
 8001816:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800181a:	4618      	mov	r0, r3
 800181c:	f7fe fe56 	bl	80004cc <__aeabi_i2d>
 8001820:	4602      	mov	r2, r0
 8001822:	460b      	mov	r3, r1
 8001824:	4610      	mov	r0, r2
 8001826:	4619      	mov	r1, r3
 8001828:	f04f 0200 	mov.w	r2, #0
 800182c:	4b54      	ldr	r3, [pc, #336]	; (8001980 <getGyro+0x2f0>)
 800182e:	f7fe feb3 	bl	8000598 <__aeabi_dmul>
 8001832:	4602      	mov	r2, r0
 8001834:	460b      	mov	r3, r1
 8001836:	4610      	mov	r0, r2
 8001838:	4619      	mov	r1, r3
 800183a:	f04f 0200 	mov.w	r2, #0
 800183e:	4b4f      	ldr	r3, [pc, #316]	; (800197c <getGyro+0x2ec>)
 8001840:	f7fe ffd4 	bl	80007ec <__aeabi_ddiv>
 8001844:	4602      	mov	r2, r0
 8001846:	460b      	mov	r3, r1
 8001848:	4610      	mov	r0, r2
 800184a:	4619      	mov	r1, r3
 800184c:	f7ff f8b6 	bl	80009bc <__aeabi_d2f>
 8001850:	4603      	mov	r3, r0
 8001852:	6023      	str	r3, [r4, #0]
		  s16 temp2=twosCompToDec16(t);
		  out[i]=(float)((temp2*8.75/1000.0));
	  }
	  break;
	case (u8)0x10://500dps
	  for(i=0; i<3; i++)
 8001854:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001856:	3301      	adds	r3, #1
 8001858:	637b      	str	r3, [r7, #52]	; 0x34
 800185a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800185c:	2b02      	cmp	r3, #2
 800185e:	ddb9      	ble.n	80017d4 <getGyro+0x144>
	  {
		  t=(((u16)buffer[2*i] << 8) |buffer[2*i+1]);
		  s16 temp2=twosCompToDec16(t);
		  out[i]=(float)((temp2*17.5/1000.0));
	  }
	  break;
 8001860:	e087      	b.n	8001972 <getGyro+0x2e2>
	case (u8)0x20://2000dps
	  for(i=0; i<3; i++)
 8001862:	2300      	movs	r3, #0
 8001864:	637b      	str	r3, [r7, #52]	; 0x34
 8001866:	e03c      	b.n	80018e2 <getGyro+0x252>
	  {
		  t=(((u16)buffer[2*i] << 8) |buffer[2*i+1]);
 8001868:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800186a:	005b      	lsls	r3, r3, #1
 800186c:	005b      	lsls	r3, r3, #1
 800186e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001872:	4413      	add	r3, r2
 8001874:	f833 3c2c 	ldrh.w	r3, [r3, #-44]
 8001878:	021b      	lsls	r3, r3, #8
 800187a:	b29a      	uxth	r2, r3
 800187c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800187e:	005b      	lsls	r3, r3, #1
 8001880:	3301      	adds	r3, #1
 8001882:	005b      	lsls	r3, r3, #1
 8001884:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8001888:	440b      	add	r3, r1
 800188a:	f833 3c2c 	ldrh.w	r3, [r3, #-44]
 800188e:	b29b      	uxth	r3, r3
 8001890:	4313      	orrs	r3, r2
 8001892:	b29b      	uxth	r3, r3
 8001894:	84bb      	strh	r3, [r7, #36]	; 0x24
		  s16 temp2=twosCompToDec16(t);
 8001896:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001898:	4618      	mov	r0, r3
 800189a:	f000 f88b 	bl	80019b4 <twosCompToDec16>
 800189e:	4603      	mov	r3, r0
 80018a0:	83bb      	strh	r3, [r7, #28]
		  out[i]=(float)((temp2*70/1000.0));
 80018a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018a4:	009b      	lsls	r3, r3, #2
 80018a6:	687a      	ldr	r2, [r7, #4]
 80018a8:	18d4      	adds	r4, r2, r3
 80018aa:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80018ae:	2246      	movs	r2, #70	; 0x46
 80018b0:	fb02 f303 	mul.w	r3, r2, r3
 80018b4:	4618      	mov	r0, r3
 80018b6:	f7fe fe09 	bl	80004cc <__aeabi_i2d>
 80018ba:	4602      	mov	r2, r0
 80018bc:	460b      	mov	r3, r1
 80018be:	4610      	mov	r0, r2
 80018c0:	4619      	mov	r1, r3
 80018c2:	f04f 0200 	mov.w	r2, #0
 80018c6:	4b2d      	ldr	r3, [pc, #180]	; (800197c <getGyro+0x2ec>)
 80018c8:	f7fe ff90 	bl	80007ec <__aeabi_ddiv>
 80018cc:	4602      	mov	r2, r0
 80018ce:	460b      	mov	r3, r1
 80018d0:	4610      	mov	r0, r2
 80018d2:	4619      	mov	r1, r3
 80018d4:	f7ff f872 	bl	80009bc <__aeabi_d2f>
 80018d8:	4603      	mov	r3, r0
 80018da:	6023      	str	r3, [r4, #0]
		  s16 temp2=twosCompToDec16(t);
		  out[i]=(float)((temp2*17.5/1000.0));
	  }
	  break;
	case (u8)0x20://2000dps
	  for(i=0; i<3; i++)
 80018dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018de:	3301      	adds	r3, #1
 80018e0:	637b      	str	r3, [r7, #52]	; 0x34
 80018e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018e4:	2b02      	cmp	r3, #2
 80018e6:	ddbf      	ble.n	8001868 <getGyro+0x1d8>
	  {
		  t=(((u16)buffer[2*i] << 8) |buffer[2*i+1]);
		  s16 temp2=twosCompToDec16(t);
		  out[i]=(float)((temp2*70/1000.0));
	  }
	  break;
 80018e8:	e043      	b.n	8001972 <getGyro+0x2e2>
	case (u8)0x30://20000dps
	  for(i=0; i<3; i++)
 80018ea:	2300      	movs	r3, #0
 80018ec:	637b      	str	r3, [r7, #52]	; 0x34
 80018ee:	e03c      	b.n	800196a <getGyro+0x2da>
	  {
		  t=(((u16)buffer[2*i] << 8) | buffer[2*i+1]);
 80018f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018f2:	005b      	lsls	r3, r3, #1
 80018f4:	005b      	lsls	r3, r3, #1
 80018f6:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80018fa:	4413      	add	r3, r2
 80018fc:	f833 3c2c 	ldrh.w	r3, [r3, #-44]
 8001900:	021b      	lsls	r3, r3, #8
 8001902:	b29a      	uxth	r2, r3
 8001904:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001906:	005b      	lsls	r3, r3, #1
 8001908:	3301      	adds	r3, #1
 800190a:	005b      	lsls	r3, r3, #1
 800190c:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8001910:	440b      	add	r3, r1
 8001912:	f833 3c2c 	ldrh.w	r3, [r3, #-44]
 8001916:	b29b      	uxth	r3, r3
 8001918:	4313      	orrs	r3, r2
 800191a:	b29b      	uxth	r3, r3
 800191c:	84bb      	strh	r3, [r7, #36]	; 0x24
		  s16 temp2=twosCompToDec16(t);
 800191e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001920:	4618      	mov	r0, r3
 8001922:	f000 f847 	bl	80019b4 <twosCompToDec16>
 8001926:	4603      	mov	r3, r0
 8001928:	837b      	strh	r3, [r7, #26]
		  out[i]=(float)((temp2*70/1000.0));
 800192a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800192c:	009b      	lsls	r3, r3, #2
 800192e:	687a      	ldr	r2, [r7, #4]
 8001930:	18d4      	adds	r4, r2, r3
 8001932:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001936:	2246      	movs	r2, #70	; 0x46
 8001938:	fb02 f303 	mul.w	r3, r2, r3
 800193c:	4618      	mov	r0, r3
 800193e:	f7fe fdc5 	bl	80004cc <__aeabi_i2d>
 8001942:	4602      	mov	r2, r0
 8001944:	460b      	mov	r3, r1
 8001946:	4610      	mov	r0, r2
 8001948:	4619      	mov	r1, r3
 800194a:	f04f 0200 	mov.w	r2, #0
 800194e:	4b0b      	ldr	r3, [pc, #44]	; (800197c <getGyro+0x2ec>)
 8001950:	f7fe ff4c 	bl	80007ec <__aeabi_ddiv>
 8001954:	4602      	mov	r2, r0
 8001956:	460b      	mov	r3, r1
 8001958:	4610      	mov	r0, r2
 800195a:	4619      	mov	r1, r3
 800195c:	f7ff f82e 	bl	80009bc <__aeabi_d2f>
 8001960:	4603      	mov	r3, r0
 8001962:	6023      	str	r3, [r4, #0]
		  s16 temp2=twosCompToDec16(t);
		  out[i]=(float)((temp2*70/1000.0));
	  }
	  break;
	case (u8)0x30://20000dps
	  for(i=0; i<3; i++)
 8001964:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001966:	3301      	adds	r3, #1
 8001968:	637b      	str	r3, [r7, #52]	; 0x34
 800196a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800196c:	2b02      	cmp	r3, #2
 800196e:	ddbf      	ble.n	80018f0 <getGyro+0x260>
	  {
		  t=(((u16)buffer[2*i] << 8) | buffer[2*i+1]);
		  s16 temp2=twosCompToDec16(t);
		  out[i]=(float)((temp2*70/1000.0));
	  }
	  break;
 8001970:	bf00      	nop
	}
}
 8001972:	373c      	adds	r7, #60	; 0x3c
 8001974:	46bd      	mov	sp, r7
 8001976:	bd90      	pop	{r4, r7, pc}
 8001978:	40218000 	.word	0x40218000
 800197c:	408f4000 	.word	0x408f4000
 8001980:	40318000 	.word	0x40318000

08001984 <getTemp>:

void getTemp(s8*temp)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b084      	sub	sp, #16
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
	u8 t=0;
 800198c:	2300      	movs	r3, #0
 800198e:	73fb      	strb	r3, [r7, #15]
	t=(u8)writeSPIgyro(0b10100110,0x00);
 8001990:	20a6      	movs	r0, #166	; 0xa6
 8001992:	2100      	movs	r1, #0
 8001994:	f7ff fe2a 	bl	80015ec <writeSPIgyro>
 8001998:	4603      	mov	r3, r0
 800199a:	73fb      	strb	r3, [r7, #15]
	*temp=twosCompToDec8(t);
 800199c:	7bfb      	ldrb	r3, [r7, #15]
 800199e:	4618      	mov	r0, r3
 80019a0:	f000 f8ae 	bl	8001b00 <twosCompToDec8>
 80019a4:	4603      	mov	r3, r0
 80019a6:	461a      	mov	r2, r3
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	701a      	strb	r2, [r3, #0]
}
 80019ac:	3710      	adds	r7, #16
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop

080019b4 <twosCompToDec16>:
s16 twosCompToDec16(u16 val)//for 16 bit
{
 80019b4:	b480      	push	{r7}
 80019b6:	b085      	sub	sp, #20
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	4603      	mov	r3, r0
 80019bc:	80fb      	strh	r3, [r7, #6]
	u16 v=val;
 80019be:	88fb      	ldrh	r3, [r7, #6]
 80019c0:	81bb      	strh	r3, [r7, #12]
	s16 temp=0;
 80019c2:	2300      	movs	r3, #0
 80019c4:	81fb      	strh	r3, [r7, #14]
	if((v & 0b1000000000000000)==0b1000000000000000)
 80019c6:	89bb      	ldrh	r3, [r7, #12]
 80019c8:	b21b      	sxth	r3, r3
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	da02      	bge.n	80019d4 <twosCompToDec16+0x20>
	{
		temp=-32768;
 80019ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80019d2:	81fb      	strh	r3, [r7, #14]
	}
	if((v & 0b0000000000000001)==0b0000000000000001)
 80019d4:	89bb      	ldrh	r3, [r7, #12]
 80019d6:	f003 0301 	and.w	r3, r3, #1
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d003      	beq.n	80019e6 <twosCompToDec16+0x32>
	{
		temp=temp+1;
 80019de:	89fb      	ldrh	r3, [r7, #14]
 80019e0:	3301      	adds	r3, #1
 80019e2:	b29b      	uxth	r3, r3
 80019e4:	81fb      	strh	r3, [r7, #14]
	}
	if((v & 0b0000000000000010)==0b0000000000000010)
 80019e6:	89bb      	ldrh	r3, [r7, #12]
 80019e8:	f003 0302 	and.w	r3, r3, #2
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d003      	beq.n	80019f8 <twosCompToDec16+0x44>
	{
		temp=temp+2;
 80019f0:	89fb      	ldrh	r3, [r7, #14]
 80019f2:	3302      	adds	r3, #2
 80019f4:	b29b      	uxth	r3, r3
 80019f6:	81fb      	strh	r3, [r7, #14]
	}
	if((v & 0b0000000000000100)==0b0000000000000100)
 80019f8:	89bb      	ldrh	r3, [r7, #12]
 80019fa:	f003 0304 	and.w	r3, r3, #4
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d003      	beq.n	8001a0a <twosCompToDec16+0x56>
	{
		temp=temp+4;
 8001a02:	89fb      	ldrh	r3, [r7, #14]
 8001a04:	3304      	adds	r3, #4
 8001a06:	b29b      	uxth	r3, r3
 8001a08:	81fb      	strh	r3, [r7, #14]
	}
	if((v & 0b0000000000001000)==0b0000000000001000)
 8001a0a:	89bb      	ldrh	r3, [r7, #12]
 8001a0c:	f003 0308 	and.w	r3, r3, #8
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d003      	beq.n	8001a1c <twosCompToDec16+0x68>
	{
		temp=temp+8;
 8001a14:	89fb      	ldrh	r3, [r7, #14]
 8001a16:	3308      	adds	r3, #8
 8001a18:	b29b      	uxth	r3, r3
 8001a1a:	81fb      	strh	r3, [r7, #14]
	}
	if((v & 0b0000000000010000)==0b0000000000010000)
 8001a1c:	89bb      	ldrh	r3, [r7, #12]
 8001a1e:	f003 0310 	and.w	r3, r3, #16
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d003      	beq.n	8001a2e <twosCompToDec16+0x7a>
	{
		temp=temp+16;
 8001a26:	89fb      	ldrh	r3, [r7, #14]
 8001a28:	3310      	adds	r3, #16
 8001a2a:	b29b      	uxth	r3, r3
 8001a2c:	81fb      	strh	r3, [r7, #14]
	}
	if((v & 0b0000000000100000)==0b0000000000100000)
 8001a2e:	89bb      	ldrh	r3, [r7, #12]
 8001a30:	f003 0320 	and.w	r3, r3, #32
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d003      	beq.n	8001a40 <twosCompToDec16+0x8c>
	{
		temp=temp+32;
 8001a38:	89fb      	ldrh	r3, [r7, #14]
 8001a3a:	3320      	adds	r3, #32
 8001a3c:	b29b      	uxth	r3, r3
 8001a3e:	81fb      	strh	r3, [r7, #14]
	}
	if((v & 0b0000000001000000)==0b0000000001000000)
 8001a40:	89bb      	ldrh	r3, [r7, #12]
 8001a42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d003      	beq.n	8001a52 <twosCompToDec16+0x9e>
	{
		temp=temp+64;
 8001a4a:	89fb      	ldrh	r3, [r7, #14]
 8001a4c:	3340      	adds	r3, #64	; 0x40
 8001a4e:	b29b      	uxth	r3, r3
 8001a50:	81fb      	strh	r3, [r7, #14]
	}
	if((v & 0b0000000010000000)==0b0000000010000000)
 8001a52:	89bb      	ldrh	r3, [r7, #12]
 8001a54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d003      	beq.n	8001a64 <twosCompToDec16+0xb0>
	{
		temp=temp+128;
 8001a5c:	89fb      	ldrh	r3, [r7, #14]
 8001a5e:	3380      	adds	r3, #128	; 0x80
 8001a60:	b29b      	uxth	r3, r3
 8001a62:	81fb      	strh	r3, [r7, #14]
	}
	if((v & 0b0000000100000000)==0b0000000100000000)
 8001a64:	89bb      	ldrh	r3, [r7, #12]
 8001a66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d004      	beq.n	8001a78 <twosCompToDec16+0xc4>
	{
		temp=temp+256;
 8001a6e:	89fb      	ldrh	r3, [r7, #14]
 8001a70:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001a74:	b29b      	uxth	r3, r3
 8001a76:	81fb      	strh	r3, [r7, #14]
	}
	if((v & 0b0000001000000000)==0b0000001000000000)
 8001a78:	89bb      	ldrh	r3, [r7, #12]
 8001a7a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d004      	beq.n	8001a8c <twosCompToDec16+0xd8>
	{
		temp=temp+512;
 8001a82:	89fb      	ldrh	r3, [r7, #14]
 8001a84:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001a88:	b29b      	uxth	r3, r3
 8001a8a:	81fb      	strh	r3, [r7, #14]
	}
	if((v & 0b0000010000000000)==0b0000010000000000)
 8001a8c:	89bb      	ldrh	r3, [r7, #12]
 8001a8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d004      	beq.n	8001aa0 <twosCompToDec16+0xec>
	{
		temp=temp+1024;
 8001a96:	89fb      	ldrh	r3, [r7, #14]
 8001a98:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001a9c:	b29b      	uxth	r3, r3
 8001a9e:	81fb      	strh	r3, [r7, #14]
	}
	if((v & 0b0000100000000000)==0b0000100000000000)
 8001aa0:	89bb      	ldrh	r3, [r7, #12]
 8001aa2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d004      	beq.n	8001ab4 <twosCompToDec16+0x100>
	{
		temp=temp+2048;
 8001aaa:	89fb      	ldrh	r3, [r7, #14]
 8001aac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001ab0:	b29b      	uxth	r3, r3
 8001ab2:	81fb      	strh	r3, [r7, #14]
	}
	if((v & 0b0001000000000000)==0b0001000000000000)
 8001ab4:	89bb      	ldrh	r3, [r7, #12]
 8001ab6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d004      	beq.n	8001ac8 <twosCompToDec16+0x114>
	{
		temp=temp+4096;
 8001abe:	89fb      	ldrh	r3, [r7, #14]
 8001ac0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ac4:	b29b      	uxth	r3, r3
 8001ac6:	81fb      	strh	r3, [r7, #14]
	}
	if((v & 0b0010000000000000)==0b0010000000000000)
 8001ac8:	89bb      	ldrh	r3, [r7, #12]
 8001aca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d004      	beq.n	8001adc <twosCompToDec16+0x128>
	{
		temp=temp+8192;
 8001ad2:	89fb      	ldrh	r3, [r7, #14]
 8001ad4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8001ad8:	b29b      	uxth	r3, r3
 8001ada:	81fb      	strh	r3, [r7, #14]
	}
	if((v & 0b0100000000000000)==0b0100000000000000)
 8001adc:	89bb      	ldrh	r3, [r7, #12]
 8001ade:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d004      	beq.n	8001af0 <twosCompToDec16+0x13c>
	{
		temp=temp+16384;
 8001ae6:	89fb      	ldrh	r3, [r7, #14]
 8001ae8:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8001aec:	b29b      	uxth	r3, r3
 8001aee:	81fb      	strh	r3, [r7, #14]
	}

	return (s16)temp;
 8001af0:	89fb      	ldrh	r3, [r7, #14]
 8001af2:	b21b      	sxth	r3, r3
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	3714      	adds	r7, #20
 8001af8:	46bd      	mov	sp, r7
 8001afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afe:	4770      	bx	lr

08001b00 <twosCompToDec8>:
s8 twosCompToDec8(u8 val)//for 8 bit
{
 8001b00:	b480      	push	{r7}
 8001b02:	b085      	sub	sp, #20
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	4603      	mov	r3, r0
 8001b08:	71fb      	strb	r3, [r7, #7]
	s8 temp=0;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	73fb      	strb	r3, [r7, #15]
	if((val&0b10000000)==0b10000000)
 8001b0e:	79fb      	ldrb	r3, [r7, #7]
 8001b10:	b25b      	sxtb	r3, r3
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	da01      	bge.n	8001b1a <twosCompToDec8+0x1a>
	{
		temp=-128;
 8001b16:	2380      	movs	r3, #128	; 0x80
 8001b18:	73fb      	strb	r3, [r7, #15]
	}
	if((val&0b00000001)==0b00000001)
 8001b1a:	79fb      	ldrb	r3, [r7, #7]
 8001b1c:	f003 0301 	and.w	r3, r3, #1
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d003      	beq.n	8001b2c <twosCompToDec8+0x2c>
	{
		temp=temp+1;
 8001b24:	7bfb      	ldrb	r3, [r7, #15]
 8001b26:	3301      	adds	r3, #1
 8001b28:	b2db      	uxtb	r3, r3
 8001b2a:	73fb      	strb	r3, [r7, #15]
	}
	if((val&0b00000010)==0b00000010)
 8001b2c:	79fb      	ldrb	r3, [r7, #7]
 8001b2e:	f003 0302 	and.w	r3, r3, #2
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d003      	beq.n	8001b3e <twosCompToDec8+0x3e>
	{
		temp=temp+2;
 8001b36:	7bfb      	ldrb	r3, [r7, #15]
 8001b38:	3302      	adds	r3, #2
 8001b3a:	b2db      	uxtb	r3, r3
 8001b3c:	73fb      	strb	r3, [r7, #15]
	}
	if((val&0b00000100)==0b00000100)
 8001b3e:	79fb      	ldrb	r3, [r7, #7]
 8001b40:	f003 0304 	and.w	r3, r3, #4
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d003      	beq.n	8001b50 <twosCompToDec8+0x50>
	{
		temp=temp+4;
 8001b48:	7bfb      	ldrb	r3, [r7, #15]
 8001b4a:	3304      	adds	r3, #4
 8001b4c:	b2db      	uxtb	r3, r3
 8001b4e:	73fb      	strb	r3, [r7, #15]
	}
	if((val&0b00001000)==0b00001000)
 8001b50:	79fb      	ldrb	r3, [r7, #7]
 8001b52:	f003 0308 	and.w	r3, r3, #8
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d003      	beq.n	8001b62 <twosCompToDec8+0x62>
	{
		temp=temp+8;
 8001b5a:	7bfb      	ldrb	r3, [r7, #15]
 8001b5c:	3308      	adds	r3, #8
 8001b5e:	b2db      	uxtb	r3, r3
 8001b60:	73fb      	strb	r3, [r7, #15]
	}
	if((val&0b00010000)==0b00010000)
 8001b62:	79fb      	ldrb	r3, [r7, #7]
 8001b64:	f003 0310 	and.w	r3, r3, #16
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d003      	beq.n	8001b74 <twosCompToDec8+0x74>
	{
		temp=temp+16;
 8001b6c:	7bfb      	ldrb	r3, [r7, #15]
 8001b6e:	3310      	adds	r3, #16
 8001b70:	b2db      	uxtb	r3, r3
 8001b72:	73fb      	strb	r3, [r7, #15]
	}
	if((val&0b00100000)==0b00100000)
 8001b74:	79fb      	ldrb	r3, [r7, #7]
 8001b76:	f003 0320 	and.w	r3, r3, #32
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d003      	beq.n	8001b86 <twosCompToDec8+0x86>
	{
		temp=temp+32;
 8001b7e:	7bfb      	ldrb	r3, [r7, #15]
 8001b80:	3320      	adds	r3, #32
 8001b82:	b2db      	uxtb	r3, r3
 8001b84:	73fb      	strb	r3, [r7, #15]
	}
	if((val&0b01000000)==0b01000000)
 8001b86:	79fb      	ldrb	r3, [r7, #7]
 8001b88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d003      	beq.n	8001b98 <twosCompToDec8+0x98>
	{
		temp=temp+64;
 8001b90:	7bfb      	ldrb	r3, [r7, #15]
 8001b92:	3340      	adds	r3, #64	; 0x40
 8001b94:	b2db      	uxtb	r3, r3
 8001b96:	73fb      	strb	r3, [r7, #15]
	}
	return temp;
 8001b98:	7bfb      	ldrb	r3, [r7, #15]
 8001b9a:	b25b      	sxtb	r3, r3
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	3714      	adds	r7, #20
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba6:	4770      	bx	lr

08001ba8 <setUpGPIO>:
//GPIO_Pin_6	GPIOA	SPI1_MISO / TIM8_BKIN / ADC12_IN6 / TIM3_CH1 with alternative function TIM1_BKIN
//GPIO_Pin_7	GPIOA	SPI1_MOSI / TIM8_CH1N / ADC12_IN7 / TIM3_CH2 with alternative function TIM1_CH1N
//GPIO_Pin_1	GPIOA	USART2_RTS / ADC123_IN1 / TIM5_CH2 / TIM2_CH2

void setUpGPIO(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b082      	sub	sp, #8
 8001bac:	af00      	add	r7, sp, #0
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA|RCC_APB2Periph_GPIOB,ENABLE);
 8001bae:	200c      	movs	r0, #12
 8001bb0:	2101      	movs	r1, #1
 8001bb2:	f001 fdbb 	bl	800372c <RCC_APB2PeriphClockCmd>

	GPIO_InitTypeDef GPIO_InitStructure;

	GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_11 | GPIO_Pin_12|GPIO_Pin_0|GPIO_Pin_10|GPIO_Pin_9;
 8001bb6:	f641 6301 	movw	r3, #7681	; 0x1e01
 8001bba:	80bb      	strh	r3, [r7, #4]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8001bbc:	2303      	movs	r3, #3
 8001bbe:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 8001bc0:	2310      	movs	r3, #16
 8001bc2:	71fb      	strb	r3, [r7, #7]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 8001bc4:	1d3b      	adds	r3, r7, #4
 8001bc6:	4809      	ldr	r0, [pc, #36]	; (8001bec <setUpGPIO+0x44>)
 8001bc8:	4619      	mov	r1, r3
 8001bca:	f002 f82b 	bl	8003c24 <GPIO_Init>

	GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_8|GPIO_Pin_9;
 8001bce:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001bd2:	80bb      	strh	r3, [r7, #4]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8001bd4:	2303      	movs	r3, #3
 8001bd6:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 8001bd8:	2310      	movs	r3, #16
 8001bda:	71fb      	strb	r3, [r7, #7]
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 8001bdc:	1d3b      	adds	r3, r7, #4
 8001bde:	4804      	ldr	r0, [pc, #16]	; (8001bf0 <setUpGPIO+0x48>)
 8001be0:	4619      	mov	r1, r3
 8001be2:	f002 f81f 	bl	8003c24 <GPIO_Init>
}
 8001be6:	3708      	adds	r7, #8
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}
 8001bec:	40010800 	.word	0x40010800
 8001bf0:	40010c00 	.word	0x40010c00

08001bf4 <setUpLoopTimer>:
int proceed=0;
///////////////////////////////////////////////////////////////////////////
////////////////main loop timer ///////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////
void setUpLoopTimer(void)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b084      	sub	sp, #16
 8001bf8:	af00      	add	r7, sp, #0
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2,ENABLE);
 8001bfa:	2001      	movs	r0, #1
 8001bfc:	2101      	movs	r1, #1
 8001bfe:	f001 fdb3 	bl	8003768 <RCC_APB1PeriphClockCmd>

	NVIC_InitTypeDef NVIC_InitStructure;
	/* Enable the TIM2 global Interrupt */
	NVIC_InitStructure.NVIC_IRQChannel = TIM2_IRQn;//set up the interrupt handler for TIM2
 8001c02:	231c      	movs	r3, #28
 8001c04:	733b      	strb	r3, [r7, #12]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 8001c06:	2300      	movs	r3, #0
 8001c08:	737b      	strb	r3, [r7, #13]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 1;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	73bb      	strb	r3, [r7, #14]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	73fb      	strb	r3, [r7, #15]

	NVIC_Init(&NVIC_InitStructure);
 8001c12:	f107 030c 	add.w	r3, r7, #12
 8001c16:	4618      	mov	r0, r3
 8001c18:	f002 fa2a 	bl	8004070 <NVIC_Init>


	TIM_TimeBaseInitTypeDef TIM_TimeBaseStruct;

	TIM_TimeBaseStruct.TIM_ClockDivision=TIM_CKD_DIV1;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	80fb      	strh	r3, [r7, #6]
	TIM_TimeBaseStruct.TIM_CounterMode=TIM_CounterMode_Up;
 8001c20:	2300      	movs	r3, #0
 8001c22:	807b      	strh	r3, [r7, #2]
	TIM_TimeBaseStruct.TIM_Period=(3600/4-1);//makes it 100Hz - check on scope
 8001c24:	f240 3383 	movw	r3, #899	; 0x383
 8001c28:	80bb      	strh	r3, [r7, #4]
	TIM_TimeBaseStruct.TIM_Prescaler=400-1;
 8001c2a:	f240 138f 	movw	r3, #399	; 0x18f
 8001c2e:	803b      	strh	r3, [r7, #0]
	TIM_TimeBaseStruct.TIM_RepetitionCounter=0x0000;
 8001c30:	2300      	movs	r3, #0
 8001c32:	723b      	strb	r3, [r7, #8]

	TIM_TimeBaseInit(TIM2,&TIM_TimeBaseStruct);
 8001c34:	463b      	mov	r3, r7
 8001c36:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001c3a:	4619      	mov	r1, r3
 8001c3c:	f001 f9cc 	bl	8002fd8 <TIM_TimeBaseInit>

	TIM_Cmd(TIM2,ENABLE);
 8001c40:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001c44:	2101      	movs	r1, #1
 8001c46:	f001 facf 	bl	80031e8 <TIM_Cmd>

	TIM_ITConfig(TIM2,TIM_IT_Update,ENABLE);
 8001c4a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001c4e:	2101      	movs	r1, #1
 8001c50:	2201      	movs	r2, #1
 8001c52:	f001 fb0f 	bl	8003274 <TIM_ITConfig>
}
 8001c56:	3710      	adds	r7, #16
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}

08001c5c <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	af00      	add	r7, sp, #0
  if (TIM_GetITStatus(TIM2, TIM_IT_Update) != RESET)
 8001c60:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001c64:	2101      	movs	r1, #1
 8001c66:	f001 fb81 	bl	800336c <TIM_GetITStatus>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d007      	beq.n	8001c80 <TIM2_IRQHandler+0x24>
  {
    TIM_ClearITPendingBit(TIM2, TIM_IT_Update);
 8001c70:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001c74:	2101      	movs	r1, #1
 8001c76:	f001 fba3 	bl	80033c0 <TIM_ClearITPendingBit>
    proceed=1;
 8001c7a:	4b02      	ldr	r3, [pc, #8]	; (8001c84 <TIM2_IRQHandler+0x28>)
 8001c7c:	2201      	movs	r2, #1
 8001c7e:	601a      	str	r2, [r3, #0]

  }
}
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	bf00      	nop
 8001c84:	20000030 	.word	0x20000030

08001c88 <wait>:
void wait(void)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	af00      	add	r7, sp, #0
	while(proceed==0)//interrupt will set proceed to 1;
 8001c8c:	bf00      	nop
 8001c8e:	4b05      	ldr	r3, [pc, #20]	; (8001ca4 <wait+0x1c>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d0fb      	beq.n	8001c8e <wait+0x6>
	{

	}
	proceed=0;
 8001c96:	4b03      	ldr	r3, [pc, #12]	; (8001ca4 <wait+0x1c>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	601a      	str	r2, [r3, #0]
}
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca2:	4770      	bx	lr
 8001ca4:	20000030 	.word	0x20000030

08001ca8 <controlMethod>:
 */

#include "control.h"

void controlMethod(float*acc,float*mag,float*gyro,s8*temp)//perform all control in this method
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b084      	sub	sp, #16
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	60f8      	str	r0, [r7, #12]
 8001cb0:	60b9      	str	r1, [r7, #8]
 8001cb2:	607a      	str	r2, [r7, #4]
 8001cb4:	603b      	str	r3, [r7, #0]
	//read all the data
	getAcc(acc);
 8001cb6:	68f8      	ldr	r0, [r7, #12]
 8001cb8:	f000 fb8e 	bl	80023d8 <getAcc>
	getMag(mag);
 8001cbc:	68b8      	ldr	r0, [r7, #8]
 8001cbe:	f000 fcd3 	bl	8002668 <getMag>
	getGyro(gyro);
 8001cc2:	6878      	ldr	r0, [r7, #4]
 8001cc4:	f7ff fce4 	bl	8001690 <getGyro>
	getTemp(temp);
 8001cc8:	6838      	ldr	r0, [r7, #0]
 8001cca:	f7ff fe5b 	bl	8001984 <getTemp>

	//perform the control here

}
 8001cce:	3710      	adds	r7, #16
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd80      	pop	{r7, pc}

08001cd4 <setUpXbee>:

///////////////////////////////////////////////////////////////////////////
/////////////XBEE//////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////
void setUpXbee(void)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b086      	sub	sp, #24
 8001cd8:	af00      	add	r7, sp, #0
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2,ENABLE);
 8001cda:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001cde:	2101      	movs	r1, #1
 8001ce0:	f001 fd42 	bl	8003768 <RCC_APB1PeriphClockCmd>
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO,ENABLE);
 8001ce4:	2001      	movs	r0, #1
 8001ce6:	2101      	movs	r1, #1
 8001ce8:	f001 fd20 	bl	800372c <RCC_APB2PeriphClockCmd>
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA,ENABLE);
 8001cec:	2004      	movs	r0, #4
 8001cee:	2101      	movs	r1, #1
 8001cf0:	f001 fd1c 	bl	800372c <RCC_APB2PeriphClockCmd>
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_DMA1,ENABLE);
 8001cf4:	2001      	movs	r0, #1
 8001cf6:	2101      	movs	r1, #1
 8001cf8:	f001 fcfa 	bl	80036f0 <RCC_AHBPeriphClockCmd>
	GPIO_InitTypeDef GPIO_InitStruct;

	/* Pack the struct */
	GPIO_InitStruct.GPIO_Pin =GPIO_Pin_2|GPIO_Pin_3;
 8001cfc:	230c      	movs	r3, #12
 8001cfe:	82bb      	strh	r3, [r7, #20]
	GPIO_InitStruct.GPIO_Mode =GPIO_Mode_AF_PP;
 8001d00:	2318      	movs	r3, #24
 8001d02:	75fb      	strb	r3, [r7, #23]
	GPIO_InitStruct.GPIO_Speed =GPIO_Speed_50MHz;
 8001d04:	2303      	movs	r3, #3
 8001d06:	75bb      	strb	r3, [r7, #22]
	GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d08:	f107 0314 	add.w	r3, r7, #20
 8001d0c:	480f      	ldr	r0, [pc, #60]	; (8001d4c <setUpXbee+0x78>)
 8001d0e:	4619      	mov	r1, r3
 8001d10:	f001 ff88 	bl	8003c24 <GPIO_Init>

	USART_InitTypeDef USART_InitStructure;

	USART_InitStructure.USART_BaudRate=115200;
 8001d14:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001d18:	607b      	str	r3, [r7, #4]
	USART_InitStructure.USART_WordLength=USART_WordLength_8b;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	813b      	strh	r3, [r7, #8]
	USART_InitStructure.USART_StopBits=USART_StopBits_1;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	817b      	strh	r3, [r7, #10]
	USART_InitStructure.USART_Parity=USART_Parity_No;
 8001d22:	2300      	movs	r3, #0
 8001d24:	81bb      	strh	r3, [r7, #12]
	USART_InitStructure.USART_Mode=USART_Mode_Tx|USART_Mode_Rx;
 8001d26:	230c      	movs	r3, #12
 8001d28:	81fb      	strh	r3, [r7, #14]
	USART_InitStructure.USART_HardwareFlowControl=USART_HardwareFlowControl_None;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	823b      	strh	r3, [r7, #16]

	USART_Init(USART2, &USART_InitStructure);
 8001d2e:	1d3b      	adds	r3, r7, #4
 8001d30:	4807      	ldr	r0, [pc, #28]	; (8001d50 <setUpXbee+0x7c>)
 8001d32:	4619      	mov	r1, r3
 8001d34:	f001 f816 	bl	8002d64 <USART_Init>
	//USART_ITConfig(USART2,USART_IT_RXNE);

	S_DMA();
 8001d38:	f000 f80c 	bl	8001d54 <S_DMA>
	USART_Cmd(USART2,ENABLE);
 8001d3c:	4804      	ldr	r0, [pc, #16]	; (8001d50 <setUpXbee+0x7c>)
 8001d3e:	2101      	movs	r1, #1
 8001d40:	f001 f8ca 	bl	8002ed8 <USART_Cmd>

}
 8001d44:	3718      	adds	r7, #24
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	40010800 	.word	0x40010800
 8001d50:	40004400 	.word	0x40004400

08001d54 <S_DMA>:
void S_DMA()
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b08c      	sub	sp, #48	; 0x30
 8001d58:	af00      	add	r7, sp, #0
		DMA_InitTypeDef DMA_InitStructure;
		//DMA_DeInit(DMA1_Channel7);
		DMA_StructInit(&DMA_InitStructure);
 8001d5a:	1d3b      	adds	r3, r7, #4
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f002 f941 	bl	8003fe4 <DMA_StructInit>
		//DMA_InitStructure.DMA_Channel = DMA_Channel_4;
		DMA_InitStructure.DMA_PeripheralBaseAddr =  (uint32_t) (USART2_BASE+0x04); //USART Data Register
 8001d62:	4b14      	ldr	r3, [pc, #80]	; (8001db4 <S_DMA+0x60>)
 8001d64:	607b      	str	r3, [r7, #4]
		DMA_InitStructure.DMA_MemoryBaseAddr = (uint32_t) TxBuff;
 8001d66:	4b14      	ldr	r3, [pc, #80]	; (8001db8 <S_DMA+0x64>)
 8001d68:	60bb      	str	r3, [r7, #8]
		DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralDST;//DMA_DIR_PeripheralSRC;//;//
 8001d6a:	2310      	movs	r3, #16
 8001d6c:	60fb      	str	r3, [r7, #12]
		DMA_InitStructure.DMA_BufferSize = TX_BUFFER_SIZE;
 8001d6e:	2332      	movs	r3, #50	; 0x32
 8001d70:	613b      	str	r3, [r7, #16]
		DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 8001d72:	2300      	movs	r3, #0
 8001d74:	617b      	str	r3, [r7, #20]
		DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 8001d76:	2380      	movs	r3, #128	; 0x80
 8001d78:	61bb      	str	r3, [r7, #24]
		DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	61fb      	str	r3, [r7, #28]
		DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	623b      	str	r3, [r7, #32]
		DMA_InitStructure.DMA_Mode = DMA_Mode_Normal;
 8001d82:	2300      	movs	r3, #0
 8001d84:	627b      	str	r3, [r7, #36]	; 0x24
		DMA_InitStructure.DMA_Priority = DMA_Priority_VeryHigh;
 8001d86:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001d8a:	62bb      	str	r3, [r7, #40]	; 0x28
		DMA_InitStructure.DMA_M2M = DMA_M2M_Disable;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	62fb      	str	r3, [r7, #44]	; 0x2c

		DMA_Init(DMA1_Channel7, &DMA_InitStructure);
 8001d90:	1d3b      	adds	r3, r7, #4
 8001d92:	480a      	ldr	r0, [pc, #40]	; (8001dbc <S_DMA+0x68>)
 8001d94:	4619      	mov	r1, r3
 8001d96:	f002 f8e7 	bl	8003f68 <DMA_Init>

		USART_DMACmd(USART2, USART_DMAReq_Tx, ENABLE);
 8001d9a:	4809      	ldr	r0, [pc, #36]	; (8001dc0 <S_DMA+0x6c>)
 8001d9c:	2180      	movs	r1, #128	; 0x80
 8001d9e:	2201      	movs	r2, #1
 8001da0:	f001 f8ba 	bl	8002f18 <USART_DMACmd>
		DMA_Cmd(DMA1_Channel7,ENABLE);
 8001da4:	4805      	ldr	r0, [pc, #20]	; (8001dbc <S_DMA+0x68>)
 8001da6:	2101      	movs	r1, #1
 8001da8:	f002 f946 	bl	8004038 <DMA_Cmd>
}
 8001dac:	3730      	adds	r7, #48	; 0x30
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	40004404 	.word	0x40004404
 8001db8:	2000050c 	.word	0x2000050c
 8001dbc:	40020080 	.word	0x40020080
 8001dc0:	40004400 	.word	0x40004400

08001dc4 <initCRC>:
static uint32_t crcTable[256];
static uint32_t currentCRC;

static void buildTable();

void initCRC() {
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	af00      	add	r7, sp, #0

  buildTable();
 8001dc8:	f000 f83c 	bl	8001e44 <buildTable>
  currentCRC = CRCDATA_INITIALVAL;
 8001dcc:	4b02      	ldr	r3, [pc, #8]	; (8001dd8 <initCRC+0x14>)
 8001dce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001dd2:	601a      	str	r2, [r3, #0]

}
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	bf00      	nop
 8001dd8:	20000434 	.word	0x20000434

08001ddc <crcCalc>:

uint32_t crcCalc(const uint8_t* data, uint16_t startIndex, uint16_t length) {
 8001ddc:	b480      	push	{r7}
 8001dde:	b087      	sub	sp, #28
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
 8001de4:	4613      	mov	r3, r2
 8001de6:	460a      	mov	r2, r1
 8001de8:	807a      	strh	r2, [r7, #2]
 8001dea:	803b      	strh	r3, [r7, #0]
  uint16_t index;
  uint32_t lookup;
  uint32_t remainder = CRCDATA_INITIALVAL;
 8001dec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001df0:	613b      	str	r3, [r7, #16]

  for (index = startIndex; index < length + startIndex; index++) {
 8001df2:	887b      	ldrh	r3, [r7, #2]
 8001df4:	82fb      	strh	r3, [r7, #22]
 8001df6:	e014      	b.n	8001e22 <crcCalc+0x46>
    lookup = ((uint32_t) data[index] ^ (uint32_t) (remainder >> (CRCDATA_DATAWIDTH - (uint8_t) 8))) & (uint32_t) 0xFF;
 8001df8:	8afb      	ldrh	r3, [r7, #22]
 8001dfa:	687a      	ldr	r2, [r7, #4]
 8001dfc:	4413      	add	r3, r2
 8001dfe:	781b      	ldrb	r3, [r3, #0]
 8001e00:	461a      	mov	r2, r3
 8001e02:	693b      	ldr	r3, [r7, #16]
 8001e04:	0a1b      	lsrs	r3, r3, #8
 8001e06:	4053      	eors	r3, r2
 8001e08:	b2db      	uxtb	r3, r3
 8001e0a:	60fb      	str	r3, [r7, #12]
    remainder = (uint32_t) (crcTable[lookup] ^ (uint32_t) (remainder << (uint32_t) 8));
 8001e0c:	4b0c      	ldr	r3, [pc, #48]	; (8001e40 <crcCalc+0x64>)
 8001e0e:	68fa      	ldr	r2, [r7, #12]
 8001e10:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001e14:	693b      	ldr	r3, [r7, #16]
 8001e16:	021b      	lsls	r3, r3, #8
 8001e18:	4053      	eors	r3, r2
 8001e1a:	613b      	str	r3, [r7, #16]
uint32_t crcCalc(const uint8_t* data, uint16_t startIndex, uint16_t length) {
  uint16_t index;
  uint32_t lookup;
  uint32_t remainder = CRCDATA_INITIALVAL;

  for (index = startIndex; index < length + startIndex; index++) {
 8001e1c:	8afb      	ldrh	r3, [r7, #22]
 8001e1e:	3301      	adds	r3, #1
 8001e20:	82fb      	strh	r3, [r7, #22]
 8001e22:	8afa      	ldrh	r2, [r7, #22]
 8001e24:	8839      	ldrh	r1, [r7, #0]
 8001e26:	887b      	ldrh	r3, [r7, #2]
 8001e28:	440b      	add	r3, r1
 8001e2a:	429a      	cmp	r2, r3
 8001e2c:	dbe4      	blt.n	8001df8 <crcCalc+0x1c>
    lookup = ((uint32_t) data[index] ^ (uint32_t) (remainder >> (CRCDATA_DATAWIDTH - (uint8_t) 8))) & (uint32_t) 0xFF;
    remainder = (uint32_t) (crcTable[lookup] ^ (uint32_t) (remainder << (uint32_t) 8));
  }
  /* CRC result */
  return (uint32_t) (remainder ^ CRCDATA_FINAL_VAL) & CRCDATA_MASK;
 8001e2e:	693b      	ldr	r3, [r7, #16]
 8001e30:	b29b      	uxth	r3, r3
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	371c      	adds	r7, #28
 8001e36:	46bd      	mov	sp, r7
 8001e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3c:	4770      	bx	lr
 8001e3e:	bf00      	nop
 8001e40:	20000034 	.word	0x20000034

08001e44 <buildTable>:
 * This function build the lookup table.
 * @param sCRCdata - CRC data struct
 * @return void.
 * @throws  none
 */
static void buildTable() {
 8001e44:	b480      	push	{r7}
 8001e46:	b085      	sub	sp, #20
 8001e48:	af00      	add	r7, sp, #0
  uint32_t topbit;
  uint32_t dividend;
  uint32_t bit;
  uint32_t remainder;

  topbit = (uint32_t) 1U << (CRCDATA_DATAWIDTH - (uint8_t) 1);
 8001e4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001e4e:	603b      	str	r3, [r7, #0]

  //Compute the remainder of each possible dividend.
  for (dividend = 0U; dividend < 256U; dividend++) {
 8001e50:	2300      	movs	r3, #0
 8001e52:	60fb      	str	r3, [r7, #12]
 8001e54:	e026      	b.n	8001ea4 <buildTable+0x60>
    //Start with the dividend followed by zeros.
    remainder = (dividend << (CRCDATA_DATAWIDTH - (uint8_t) 8)) & CRCDATA_MASK;
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	021b      	lsls	r3, r3, #8
 8001e5a:	b29b      	uxth	r3, r3
 8001e5c:	607b      	str	r3, [r7, #4]

    //Perform modulo-2 division, a bit at a time.
    for (bit = 8U; bit > 0U; bit--) {
 8001e5e:	2308      	movs	r3, #8
 8001e60:	60bb      	str	r3, [r7, #8]
 8001e62:	e014      	b.n	8001e8e <buildTable+0x4a>
      //Try to divide the current data bit.
      if ((remainder & topbit) > 0U) {
 8001e64:	687a      	ldr	r2, [r7, #4]
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	4013      	ands	r3, r2
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d008      	beq.n	8001e80 <buildTable+0x3c>
        remainder = ((remainder << 1U) ^ CRCDATA_POLYNOMIAL) & CRCDATA_MASK;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	005b      	lsls	r3, r3, #1
 8001e72:	f483 5381 	eor.w	r3, r3, #4128	; 0x1020
 8001e76:	f083 0301 	eor.w	r3, r3, #1
 8001e7a:	b29b      	uxth	r3, r3
 8001e7c:	607b      	str	r3, [r7, #4]
 8001e7e:	e003      	b.n	8001e88 <buildTable+0x44>
      } else {
        remainder = (remainder << 1U) & CRCDATA_MASK;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	005b      	lsls	r3, r3, #1
 8001e84:	b29b      	uxth	r3, r3
 8001e86:	607b      	str	r3, [r7, #4]
  for (dividend = 0U; dividend < 256U; dividend++) {
    //Start with the dividend followed by zeros.
    remainder = (dividend << (CRCDATA_DATAWIDTH - (uint8_t) 8)) & CRCDATA_MASK;

    //Perform modulo-2 division, a bit at a time.
    for (bit = 8U; bit > 0U; bit--) {
 8001e88:	68bb      	ldr	r3, [r7, #8]
 8001e8a:	3b01      	subs	r3, #1
 8001e8c:	60bb      	str	r3, [r7, #8]
 8001e8e:	68bb      	ldr	r3, [r7, #8]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d1e7      	bne.n	8001e64 <buildTable+0x20>
      } else {
        remainder = (remainder << 1U) & CRCDATA_MASK;
      }
    }
    //Store the result into table.
    crcTable[dividend] = remainder;
 8001e94:	4b07      	ldr	r3, [pc, #28]	; (8001eb4 <buildTable+0x70>)
 8001e96:	68fa      	ldr	r2, [r7, #12]
 8001e98:	6879      	ldr	r1, [r7, #4]
 8001e9a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  uint32_t remainder;

  topbit = (uint32_t) 1U << (CRCDATA_DATAWIDTH - (uint8_t) 1);

  //Compute the remainder of each possible dividend.
  for (dividend = 0U; dividend < 256U; dividend++) {
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	3301      	adds	r3, #1
 8001ea2:	60fb      	str	r3, [r7, #12]
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	2bff      	cmp	r3, #255	; 0xff
 8001ea8:	d9d5      	bls.n	8001e56 <buildTable+0x12>
      }
    }
    //Store the result into table.
    crcTable[dividend] = remainder;
  }
}
 8001eaa:	3714      	adds	r7, #20
 8001eac:	46bd      	mov	sp, r7
 8001eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb2:	4770      	bx	lr
 8001eb4:	20000034 	.word	0x20000034

08001eb8 <setUpEcompass>:

///////////////////////////////////////////////////////////////////////////
///////////////ACC AND MAGN FUNCTIONS//////////////////////////////////////
///////////////////////////////////////////////////////////////////////////
void setUpEcompass()
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	af00      	add	r7, sp, #0
	initI2CEcompass();
 8001ebc:	f000 f804 	bl	8001ec8 <initI2CEcompass>
	initRegistersEcompass();
 8001ec0:	f000 f840 	bl	8001f44 <initRegistersEcompass>
}
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop

08001ec8 <initI2CEcompass>:
void initI2CEcompass(void)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b086      	sub	sp, #24
 8001ecc:	af00      	add	r7, sp, #0
	I2C_InitTypeDef  I2C_InitStructure;
	GPIO_InitTypeDef GPIO_InitStructure;

	/* Enable I2C and GPIO clocks */
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_I2C2, ENABLE);
 8001ece:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8001ed2:	2101      	movs	r1, #1
 8001ed4:	f001 fc48 	bl	8003768 <RCC_APB1PeriphClockCmd>
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB|RCC_APB2Periph_AFIO, ENABLE);
 8001ed8:	2009      	movs	r0, #9
 8001eda:	2101      	movs	r1, #1
 8001edc:	f001 fc26 	bl	800372c <RCC_APB2PeriphClockCmd>

	/* Configure I2C pins: SCL and SDA */
	GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_10 | GPIO_Pin_11;
 8001ee0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001ee4:	80bb      	strh	r3, [r7, #4]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8001ee6:	2303      	movs	r3, #3
 8001ee8:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_OD;
 8001eea:	231c      	movs	r3, #28
 8001eec:	71fb      	strb	r3, [r7, #7]
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 8001eee:	1d3b      	adds	r3, r7, #4
 8001ef0:	4811      	ldr	r0, [pc, #68]	; (8001f38 <initI2CEcompass+0x70>)
 8001ef2:	4619      	mov	r1, r3
 8001ef4:	f001 fe96 	bl	8003c24 <GPIO_Init>

	/* I2C configuration */
	I2C_DeInit(I2C2);
 8001ef8:	4810      	ldr	r0, [pc, #64]	; (8001f3c <initI2CEcompass+0x74>)
 8001efa:	f001 fc8f 	bl	800381c <I2C_DeInit>
	I2C_InitStructure.I2C_Mode = I2C_Mode_I2C;
 8001efe:	2300      	movs	r3, #0
 8001f00:	81bb      	strh	r3, [r7, #12]
	I2C_InitStructure.I2C_DutyCycle = I2C_DutyCycle_2;
 8001f02:	f64b 73ff 	movw	r3, #49151	; 0xbfff
 8001f06:	81fb      	strh	r3, [r7, #14]
	I2C_InitStructure.I2C_OwnAddress1 = 0x00;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	823b      	strh	r3, [r7, #16]
	I2C_InitStructure.I2C_Ack = I2C_Ack_Enable;
 8001f0c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f10:	827b      	strh	r3, [r7, #18]
	I2C_InitStructure.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 8001f12:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001f16:	82bb      	strh	r3, [r7, #20]
	I2C_InitStructure.I2C_ClockSpeed = 100000;
 8001f18:	4b09      	ldr	r3, [pc, #36]	; (8001f40 <initI2CEcompass+0x78>)
 8001f1a:	60bb      	str	r3, [r7, #8]

	/* Apply I2C configuration after enabling it */
	I2C_Init(I2C2, &I2C_InitStructure);
 8001f1c:	f107 0308 	add.w	r3, r7, #8
 8001f20:	4806      	ldr	r0, [pc, #24]	; (8001f3c <initI2CEcompass+0x74>)
 8001f22:	4619      	mov	r1, r3
 8001f24:	f001 fc9c 	bl	8003860 <I2C_Init>

	/* I2C Peripheral Enable */
	I2C_Cmd(I2C2, ENABLE);
 8001f28:	4804      	ldr	r0, [pc, #16]	; (8001f3c <initI2CEcompass+0x74>)
 8001f2a:	2101      	movs	r1, #1
 8001f2c:	f001 fd5a 	bl	80039e4 <I2C_Cmd>
}
 8001f30:	3718      	adds	r7, #24
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}
 8001f36:	bf00      	nop
 8001f38:	40010c00 	.word	0x40010c00
 8001f3c:	40005800 	.word	0x40005800
 8001f40:	000186a0 	.word	0x000186a0

08001f44 <initRegistersEcompass>:
void initRegistersEcompass(void)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	af00      	add	r7, sp, #0
	//ctrl_reg1_A
	//PM2 PM1 PM0 DR1 DR0 Zen Yen Xen
	//PM2-PM0 000(power down) 001(normal mode) other = low power mde
	//Dr1-Dro data rate- 00=50hz 01=100hz 10=400hz 11=1000hz
	//Zen, Yen, Xen 1=enable 0=disable
	while((I2C_GetFlagStatus(I2C2,I2C_FLAG_BUSY)));
 8001f48:	bf00      	nop
 8001f4a:	489a      	ldr	r0, [pc, #616]	; (80021b4 <initRegistersEcompass+0x270>)
 8001f4c:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8001f50:	f001 fe34 	bl	8003bbc <I2C_GetFlagStatus>
 8001f54:	4603      	mov	r3, r0
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d1f7      	bne.n	8001f4a <initRegistersEcompass+0x6>
	I2C_GenerateSTART(I2C2,ENABLE);
 8001f5a:	4896      	ldr	r0, [pc, #600]	; (80021b4 <initRegistersEcompass+0x270>)
 8001f5c:	2101      	movs	r1, #1
 8001f5e:	f001 fd61 	bl	8003a24 <I2C_GenerateSTART>
	while(!I2C_CheckEvent(I2C2,I2C_EVENT_MASTER_MODE_SELECT));
 8001f62:	bf00      	nop
 8001f64:	4893      	ldr	r0, [pc, #588]	; (80021b4 <initRegistersEcompass+0x270>)
 8001f66:	4994      	ldr	r1, [pc, #592]	; (80021b8 <initRegistersEcompass+0x274>)
 8001f68:	f001 fdf8 	bl	8003b5c <I2C_CheckEvent>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d0f8      	beq.n	8001f64 <initRegistersEcompass+0x20>
	I2C_Send7bitAddress(I2C2,0x32,I2C_Direction_Transmitter);//slave address    33
 8001f72:	4890      	ldr	r0, [pc, #576]	; (80021b4 <initRegistersEcompass+0x270>)
 8001f74:	2132      	movs	r1, #50	; 0x32
 8001f76:	2200      	movs	r2, #0
 8001f78:	f001 fdd2 	bl	8003b20 <I2C_Send7bitAddress>
	//I2C_SendData(I2C2,(u8)0x32);
	while(!I2C_CheckEvent(I2C2,I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED));
 8001f7c:	bf00      	nop
 8001f7e:	488d      	ldr	r0, [pc, #564]	; (80021b4 <initRegistersEcompass+0x270>)
 8001f80:	498e      	ldr	r1, [pc, #568]	; (80021bc <initRegistersEcompass+0x278>)
 8001f82:	f001 fdeb 	bl	8003b5c <I2C_CheckEvent>
 8001f86:	4603      	mov	r3, r0
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d0f8      	beq.n	8001f7e <initRegistersEcompass+0x3a>
	I2C_SendData(I2C2,(u8)0x20);//write address
 8001f8c:	4889      	ldr	r0, [pc, #548]	; (80021b4 <initRegistersEcompass+0x270>)
 8001f8e:	2120      	movs	r1, #32
 8001f90:	f001 fda8 	bl	8003ae4 <I2C_SendData>
	while(!I2C_CheckEvent(I2C2,I2C_EVENT_MASTER_BYTE_TRANSMITTED));
 8001f94:	bf00      	nop
 8001f96:	4887      	ldr	r0, [pc, #540]	; (80021b4 <initRegistersEcompass+0x270>)
 8001f98:	4989      	ldr	r1, [pc, #548]	; (80021c0 <initRegistersEcompass+0x27c>)
 8001f9a:	f001 fddf 	bl	8003b5c <I2C_CheckEvent>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d0f8      	beq.n	8001f96 <initRegistersEcompass+0x52>
	I2C_SendData(I2C2,0b00110111);//data-0x27
 8001fa4:	4883      	ldr	r0, [pc, #524]	; (80021b4 <initRegistersEcompass+0x270>)
 8001fa6:	2137      	movs	r1, #55	; 0x37
 8001fa8:	f001 fd9c 	bl	8003ae4 <I2C_SendData>
	while(!I2C_CheckEvent(I2C2,I2C_EVENT_MASTER_BYTE_TRANSMITTED));
 8001fac:	bf00      	nop
 8001fae:	4881      	ldr	r0, [pc, #516]	; (80021b4 <initRegistersEcompass+0x270>)
 8001fb0:	4983      	ldr	r1, [pc, #524]	; (80021c0 <initRegistersEcompass+0x27c>)
 8001fb2:	f001 fdd3 	bl	8003b5c <I2C_CheckEvent>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d0f8      	beq.n	8001fae <initRegistersEcompass+0x6a>
	I2C_GenerateSTOP(I2C2,ENABLE);
 8001fbc:	487d      	ldr	r0, [pc, #500]	; (80021b4 <initRegistersEcompass+0x270>)
 8001fbe:	2101      	movs	r1, #1
 8001fc0:	f001 fd50 	bl	8003a64 <I2C_GenerateSTOP>
	//BDU block data update 1= output registers not updated between MSB and LSB reading
	//BLE (BIG LITTLE endian) 0=data LSB at lower address 1= data MSB at lower address
	//FS1,FS0 00=+-2g 01=+-4g 11=+-8g
	//STsign self test sign 0=self test plus, 1= self test minus (default=0)
	//ST= self test enable 0=disable, 1= enable
	while((I2C_GetFlagStatus(I2C2,I2C_FLAG_BUSY)));
 8001fc4:	bf00      	nop
 8001fc6:	487b      	ldr	r0, [pc, #492]	; (80021b4 <initRegistersEcompass+0x270>)
 8001fc8:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8001fcc:	f001 fdf6 	bl	8003bbc <I2C_GetFlagStatus>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d1f7      	bne.n	8001fc6 <initRegistersEcompass+0x82>
	I2C_GenerateSTART(I2C2,ENABLE);
 8001fd6:	4877      	ldr	r0, [pc, #476]	; (80021b4 <initRegistersEcompass+0x270>)
 8001fd8:	2101      	movs	r1, #1
 8001fda:	f001 fd23 	bl	8003a24 <I2C_GenerateSTART>
	while(!I2C_CheckEvent(I2C2,I2C_EVENT_MASTER_MODE_SELECT));
 8001fde:	bf00      	nop
 8001fe0:	4874      	ldr	r0, [pc, #464]	; (80021b4 <initRegistersEcompass+0x270>)
 8001fe2:	4975      	ldr	r1, [pc, #468]	; (80021b8 <initRegistersEcompass+0x274>)
 8001fe4:	f001 fdba 	bl	8003b5c <I2C_CheckEvent>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d0f8      	beq.n	8001fe0 <initRegistersEcompass+0x9c>
	I2C_Send7bitAddress(I2C2,(u8)0x33,I2C_Direction_Transmitter);//slave address
 8001fee:	4871      	ldr	r0, [pc, #452]	; (80021b4 <initRegistersEcompass+0x270>)
 8001ff0:	2133      	movs	r1, #51	; 0x33
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	f001 fd94 	bl	8003b20 <I2C_Send7bitAddress>
	while(!I2C_CheckEvent(I2C2,I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED));
 8001ff8:	bf00      	nop
 8001ffa:	486e      	ldr	r0, [pc, #440]	; (80021b4 <initRegistersEcompass+0x270>)
 8001ffc:	496f      	ldr	r1, [pc, #444]	; (80021bc <initRegistersEcompass+0x278>)
 8001ffe:	f001 fdad 	bl	8003b5c <I2C_CheckEvent>
 8002002:	4603      	mov	r3, r0
 8002004:	2b00      	cmp	r3, #0
 8002006:	d0f8      	beq.n	8001ffa <initRegistersEcompass+0xb6>
	I2C_SendData(I2C2,(u8)0x23);//write address
 8002008:	486a      	ldr	r0, [pc, #424]	; (80021b4 <initRegistersEcompass+0x270>)
 800200a:	2123      	movs	r1, #35	; 0x23
 800200c:	f001 fd6a 	bl	8003ae4 <I2C_SendData>
	while(!I2C_CheckEvent(I2C2,I2C_EVENT_MASTER_BYTE_TRANSMITTED));
 8002010:	bf00      	nop
 8002012:	4868      	ldr	r0, [pc, #416]	; (80021b4 <initRegistersEcompass+0x270>)
 8002014:	496a      	ldr	r1, [pc, #424]	; (80021c0 <initRegistersEcompass+0x27c>)
 8002016:	f001 fda1 	bl	8003b5c <I2C_CheckEvent>
 800201a:	4603      	mov	r3, r0
 800201c:	2b00      	cmp	r3, #0
 800201e:	d0f8      	beq.n	8002012 <initRegistersEcompass+0xce>
	I2C_SendData(I2C2,(u8)0b10000000);
 8002020:	4864      	ldr	r0, [pc, #400]	; (80021b4 <initRegistersEcompass+0x270>)
 8002022:	2180      	movs	r1, #128	; 0x80
 8002024:	f001 fd5e 	bl	8003ae4 <I2C_SendData>
	while(!I2C_CheckEvent(I2C2,I2C_EVENT_MASTER_BYTE_TRANSMITTED));
 8002028:	bf00      	nop
 800202a:	4862      	ldr	r0, [pc, #392]	; (80021b4 <initRegistersEcompass+0x270>)
 800202c:	4964      	ldr	r1, [pc, #400]	; (80021c0 <initRegistersEcompass+0x27c>)
 800202e:	f001 fd95 	bl	8003b5c <I2C_CheckEvent>
 8002032:	4603      	mov	r3, r0
 8002034:	2b00      	cmp	r3, #0
 8002036:	d0f8      	beq.n	800202a <initRegistersEcompass+0xe6>
	I2C_GenerateSTOP(I2C2,ENABLE);
 8002038:	485e      	ldr	r0, [pc, #376]	; (80021b4 <initRegistersEcompass+0x270>)
 800203a:	2101      	movs	r1, #1
 800203c:	f001 fd12 	bl	8003a64 <I2C_GenerateSTOP>
	//MS1 to MSo measurement config bits
	//00=normal measurement (default)
	//01=positive bias config
	//10=negative bias config
	//11=not used
	while((I2C_GetFlagStatus(I2C2,I2C_FLAG_BUSY)));
 8002040:	bf00      	nop
 8002042:	485c      	ldr	r0, [pc, #368]	; (80021b4 <initRegistersEcompass+0x270>)
 8002044:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8002048:	f001 fdb8 	bl	8003bbc <I2C_GetFlagStatus>
 800204c:	4603      	mov	r3, r0
 800204e:	2b00      	cmp	r3, #0
 8002050:	d1f7      	bne.n	8002042 <initRegistersEcompass+0xfe>
	I2C_GenerateSTART(I2C2,ENABLE);
 8002052:	4858      	ldr	r0, [pc, #352]	; (80021b4 <initRegistersEcompass+0x270>)
 8002054:	2101      	movs	r1, #1
 8002056:	f001 fce5 	bl	8003a24 <I2C_GenerateSTART>
	while(!I2C_CheckEvent(I2C2,I2C_EVENT_MASTER_MODE_SELECT));
 800205a:	bf00      	nop
 800205c:	4855      	ldr	r0, [pc, #340]	; (80021b4 <initRegistersEcompass+0x270>)
 800205e:	4956      	ldr	r1, [pc, #344]	; (80021b8 <initRegistersEcompass+0x274>)
 8002060:	f001 fd7c 	bl	8003b5c <I2C_CheckEvent>
 8002064:	4603      	mov	r3, r0
 8002066:	2b00      	cmp	r3, #0
 8002068:	d0f8      	beq.n	800205c <initRegistersEcompass+0x118>
	//I2C_Send7bitAddress(I2C2,(u8)0x3C,I2C_Direction_Transmitter);//slave address
	I2C_SendData(I2C2,(u8)0x3C);
 800206a:	4852      	ldr	r0, [pc, #328]	; (80021b4 <initRegistersEcompass+0x270>)
 800206c:	213c      	movs	r1, #60	; 0x3c
 800206e:	f001 fd39 	bl	8003ae4 <I2C_SendData>
	while(!I2C_CheckEvent(I2C2,I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED));
 8002072:	bf00      	nop
 8002074:	484f      	ldr	r0, [pc, #316]	; (80021b4 <initRegistersEcompass+0x270>)
 8002076:	4951      	ldr	r1, [pc, #324]	; (80021bc <initRegistersEcompass+0x278>)
 8002078:	f001 fd70 	bl	8003b5c <I2C_CheckEvent>
 800207c:	4603      	mov	r3, r0
 800207e:	2b00      	cmp	r3, #0
 8002080:	d0f8      	beq.n	8002074 <initRegistersEcompass+0x130>
	I2C_SendData(I2C2,(u8)0x00);//write address
 8002082:	484c      	ldr	r0, [pc, #304]	; (80021b4 <initRegistersEcompass+0x270>)
 8002084:	2100      	movs	r1, #0
 8002086:	f001 fd2d 	bl	8003ae4 <I2C_SendData>
	while(!I2C_CheckEvent(I2C2,I2C_EVENT_MASTER_BYTE_TRANSMITTED));
 800208a:	bf00      	nop
 800208c:	4849      	ldr	r0, [pc, #292]	; (80021b4 <initRegistersEcompass+0x270>)
 800208e:	494c      	ldr	r1, [pc, #304]	; (80021c0 <initRegistersEcompass+0x27c>)
 8002090:	f001 fd64 	bl	8003b5c <I2C_CheckEvent>
 8002094:	4603      	mov	r3, r0
 8002096:	2b00      	cmp	r3, #0
 8002098:	d0f8      	beq.n	800208c <initRegistersEcompass+0x148>
	I2C_SendData(I2C2,(u8)0b00011000);//data
 800209a:	4846      	ldr	r0, [pc, #280]	; (80021b4 <initRegistersEcompass+0x270>)
 800209c:	2118      	movs	r1, #24
 800209e:	f001 fd21 	bl	8003ae4 <I2C_SendData>
	while(!I2C_CheckEvent(I2C2,I2C_EVENT_MASTER_BYTE_TRANSMITTED));
 80020a2:	bf00      	nop
 80020a4:	4843      	ldr	r0, [pc, #268]	; (80021b4 <initRegistersEcompass+0x270>)
 80020a6:	4946      	ldr	r1, [pc, #280]	; (80021c0 <initRegistersEcompass+0x27c>)
 80020a8:	f001 fd58 	bl	8003b5c <I2C_CheckEvent>
 80020ac:	4603      	mov	r3, r0
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d0f8      	beq.n	80020a4 <initRegistersEcompass+0x160>
	I2C_GenerateSTOP(I2C2,ENABLE);
 80020b2:	4840      	ldr	r0, [pc, #256]	; (80021b4 <initRegistersEcompass+0x270>)
 80020b4:	2101      	movs	r1, #1
 80020b6:	f001 fcd5 	bl	8003a64 <I2C_GenerateSTOP>
	//011 =+-2.5
	//100 =+-4
	//101 =+-4.7
	//110 =+-5.6
	//111 =+-8.1
	while((I2C_GetFlagStatus(I2C2,I2C_FLAG_BUSY)));
 80020ba:	bf00      	nop
 80020bc:	483d      	ldr	r0, [pc, #244]	; (80021b4 <initRegistersEcompass+0x270>)
 80020be:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 80020c2:	f001 fd7b 	bl	8003bbc <I2C_GetFlagStatus>
 80020c6:	4603      	mov	r3, r0
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d1f7      	bne.n	80020bc <initRegistersEcompass+0x178>
	I2C_GenerateSTART(I2C2,ENABLE);
 80020cc:	4839      	ldr	r0, [pc, #228]	; (80021b4 <initRegistersEcompass+0x270>)
 80020ce:	2101      	movs	r1, #1
 80020d0:	f001 fca8 	bl	8003a24 <I2C_GenerateSTART>
	while(!I2C_CheckEvent(I2C2,I2C_EVENT_MASTER_MODE_SELECT));
 80020d4:	bf00      	nop
 80020d6:	4837      	ldr	r0, [pc, #220]	; (80021b4 <initRegistersEcompass+0x270>)
 80020d8:	4937      	ldr	r1, [pc, #220]	; (80021b8 <initRegistersEcompass+0x274>)
 80020da:	f001 fd3f 	bl	8003b5c <I2C_CheckEvent>
 80020de:	4603      	mov	r3, r0
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d0f8      	beq.n	80020d6 <initRegistersEcompass+0x192>
	I2C_Send7bitAddress(I2C2,(u8)0x3C,I2C_Direction_Transmitter);//slave address
 80020e4:	4833      	ldr	r0, [pc, #204]	; (80021b4 <initRegistersEcompass+0x270>)
 80020e6:	213c      	movs	r1, #60	; 0x3c
 80020e8:	2200      	movs	r2, #0
 80020ea:	f001 fd19 	bl	8003b20 <I2C_Send7bitAddress>
	while(!I2C_CheckEvent(I2C2,I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED));
 80020ee:	bf00      	nop
 80020f0:	4830      	ldr	r0, [pc, #192]	; (80021b4 <initRegistersEcompass+0x270>)
 80020f2:	4932      	ldr	r1, [pc, #200]	; (80021bc <initRegistersEcompass+0x278>)
 80020f4:	f001 fd32 	bl	8003b5c <I2C_CheckEvent>
 80020f8:	4603      	mov	r3, r0
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d0f8      	beq.n	80020f0 <initRegistersEcompass+0x1ac>
	I2C_SendData(I2C2,(u8)0x01);//write address
 80020fe:	482d      	ldr	r0, [pc, #180]	; (80021b4 <initRegistersEcompass+0x270>)
 8002100:	2101      	movs	r1, #1
 8002102:	f001 fcef 	bl	8003ae4 <I2C_SendData>
	while(!I2C_CheckEvent(I2C2,I2C_EVENT_MASTER_BYTE_TRANSMITTED));
 8002106:	bf00      	nop
 8002108:	482a      	ldr	r0, [pc, #168]	; (80021b4 <initRegistersEcompass+0x270>)
 800210a:	492d      	ldr	r1, [pc, #180]	; (80021c0 <initRegistersEcompass+0x27c>)
 800210c:	f001 fd26 	bl	8003b5c <I2C_CheckEvent>
 8002110:	4603      	mov	r3, r0
 8002112:	2b00      	cmp	r3, #0
 8002114:	d0f8      	beq.n	8002108 <initRegistersEcompass+0x1c4>
	I2C_SendData(I2C2,(u8)0b11100000);//data
 8002116:	4827      	ldr	r0, [pc, #156]	; (80021b4 <initRegistersEcompass+0x270>)
 8002118:	21e0      	movs	r1, #224	; 0xe0
 800211a:	f001 fce3 	bl	8003ae4 <I2C_SendData>
	while(!I2C_CheckEvent(I2C2,I2C_EVENT_MASTER_BYTE_TRANSMITTED));
 800211e:	bf00      	nop
 8002120:	4824      	ldr	r0, [pc, #144]	; (80021b4 <initRegistersEcompass+0x270>)
 8002122:	4927      	ldr	r1, [pc, #156]	; (80021c0 <initRegistersEcompass+0x27c>)
 8002124:	f001 fd1a 	bl	8003b5c <I2C_CheckEvent>
 8002128:	4603      	mov	r3, r0
 800212a:	2b00      	cmp	r3, #0
 800212c:	d0f8      	beq.n	8002120 <initRegistersEcompass+0x1dc>
	I2C_GenerateSTOP(I2C2,ENABLE);
 800212e:	4821      	ldr	r0, [pc, #132]	; (80021b4 <initRegistersEcompass+0x270>)
 8002130:	2101      	movs	r1, #1
 8002132:	f001 fc97 	bl	8003a64 <I2C_GenerateSTOP>
	//register 0x02->0b00000000-> single conversion mode
	//0 0 0 0 0 0 MD1 MD0
	//00= continuous mode
	//01= single conversion mode
	//11=sleep mode
	while((I2C_GetFlagStatus(I2C2,I2C_FLAG_BUSY)));
 8002136:	bf00      	nop
 8002138:	481e      	ldr	r0, [pc, #120]	; (80021b4 <initRegistersEcompass+0x270>)
 800213a:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 800213e:	f001 fd3d 	bl	8003bbc <I2C_GetFlagStatus>
 8002142:	4603      	mov	r3, r0
 8002144:	2b00      	cmp	r3, #0
 8002146:	d1f7      	bne.n	8002138 <initRegistersEcompass+0x1f4>
	I2C_GenerateSTART(I2C2,ENABLE);
 8002148:	481a      	ldr	r0, [pc, #104]	; (80021b4 <initRegistersEcompass+0x270>)
 800214a:	2101      	movs	r1, #1
 800214c:	f001 fc6a 	bl	8003a24 <I2C_GenerateSTART>
	while(!I2C_CheckEvent(I2C2,I2C_EVENT_MASTER_MODE_SELECT));
 8002150:	bf00      	nop
 8002152:	4818      	ldr	r0, [pc, #96]	; (80021b4 <initRegistersEcompass+0x270>)
 8002154:	4918      	ldr	r1, [pc, #96]	; (80021b8 <initRegistersEcompass+0x274>)
 8002156:	f001 fd01 	bl	8003b5c <I2C_CheckEvent>
 800215a:	4603      	mov	r3, r0
 800215c:	2b00      	cmp	r3, #0
 800215e:	d0f8      	beq.n	8002152 <initRegistersEcompass+0x20e>
	//I2C_Send7bitAddress(I2C2,(u8)0x3C,I2C_Direction_Transmitter);//slave address
	I2C_SendData(I2C2,(u8)0x3C);
 8002160:	4814      	ldr	r0, [pc, #80]	; (80021b4 <initRegistersEcompass+0x270>)
 8002162:	213c      	movs	r1, #60	; 0x3c
 8002164:	f001 fcbe 	bl	8003ae4 <I2C_SendData>
	while(!I2C_CheckEvent(I2C2,I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED));
 8002168:	bf00      	nop
 800216a:	4812      	ldr	r0, [pc, #72]	; (80021b4 <initRegistersEcompass+0x270>)
 800216c:	4913      	ldr	r1, [pc, #76]	; (80021bc <initRegistersEcompass+0x278>)
 800216e:	f001 fcf5 	bl	8003b5c <I2C_CheckEvent>
 8002172:	4603      	mov	r3, r0
 8002174:	2b00      	cmp	r3, #0
 8002176:	d0f8      	beq.n	800216a <initRegistersEcompass+0x226>
	I2C_SendData(I2C2,(u8)0x02);//write address
 8002178:	480e      	ldr	r0, [pc, #56]	; (80021b4 <initRegistersEcompass+0x270>)
 800217a:	2102      	movs	r1, #2
 800217c:	f001 fcb2 	bl	8003ae4 <I2C_SendData>
	while(!I2C_CheckEvent(I2C2,I2C_EVENT_MASTER_BYTE_TRANSMITTED));
 8002180:	bf00      	nop
 8002182:	480c      	ldr	r0, [pc, #48]	; (80021b4 <initRegistersEcompass+0x270>)
 8002184:	490e      	ldr	r1, [pc, #56]	; (80021c0 <initRegistersEcompass+0x27c>)
 8002186:	f001 fce9 	bl	8003b5c <I2C_CheckEvent>
 800218a:	4603      	mov	r3, r0
 800218c:	2b00      	cmp	r3, #0
 800218e:	d0f8      	beq.n	8002182 <initRegistersEcompass+0x23e>
	I2C_SendData(I2C2,0x00);//data
 8002190:	4808      	ldr	r0, [pc, #32]	; (80021b4 <initRegistersEcompass+0x270>)
 8002192:	2100      	movs	r1, #0
 8002194:	f001 fca6 	bl	8003ae4 <I2C_SendData>
	while(!I2C_CheckEvent(I2C2,I2C_EVENT_MASTER_BYTE_TRANSMITTED));
 8002198:	bf00      	nop
 800219a:	4806      	ldr	r0, [pc, #24]	; (80021b4 <initRegistersEcompass+0x270>)
 800219c:	4908      	ldr	r1, [pc, #32]	; (80021c0 <initRegistersEcompass+0x27c>)
 800219e:	f001 fcdd 	bl	8003b5c <I2C_CheckEvent>
 80021a2:	4603      	mov	r3, r0
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d0f8      	beq.n	800219a <initRegistersEcompass+0x256>
	I2C_GenerateSTOP(I2C2,ENABLE);
 80021a8:	4802      	ldr	r0, [pc, #8]	; (80021b4 <initRegistersEcompass+0x270>)
 80021aa:	2101      	movs	r1, #1
 80021ac:	f001 fc5a 	bl	8003a64 <I2C_GenerateSTOP>
}
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	40005800 	.word	0x40005800
 80021b8:	00030001 	.word	0x00030001
 80021bc:	00070082 	.word	0x00070082
 80021c0:	00070084 	.word	0x00070084

080021c4 <eCompassRead>:
void eCompassRead(u8 address,uint32_t numByteToRead,u8* pBuffer)//for the acc
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b084      	sub	sp, #16
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	4603      	mov	r3, r0
 80021cc:	60b9      	str	r1, [r7, #8]
 80021ce:	607a      	str	r2, [r7, #4]
 80021d0:	73fb      	strb	r3, [r7, #15]
	while((I2C_GetFlagStatus(I2C2,I2C_FLAG_BUSY)));
 80021d2:	bf00      	nop
 80021d4:	4838      	ldr	r0, [pc, #224]	; (80022b8 <eCompassRead+0xf4>)
 80021d6:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 80021da:	f001 fcef 	bl	8003bbc <I2C_GetFlagStatus>
 80021de:	4603      	mov	r3, r0
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d1f7      	bne.n	80021d4 <eCompassRead+0x10>
	I2C_GenerateSTART(I2C2,ENABLE);
 80021e4:	4834      	ldr	r0, [pc, #208]	; (80022b8 <eCompassRead+0xf4>)
 80021e6:	2101      	movs	r1, #1
 80021e8:	f001 fc1c 	bl	8003a24 <I2C_GenerateSTART>
	while(!I2C_CheckEvent(I2C2,I2C_EVENT_MASTER_MODE_SELECT));
 80021ec:	bf00      	nop
 80021ee:	4832      	ldr	r0, [pc, #200]	; (80022b8 <eCompassRead+0xf4>)
 80021f0:	4932      	ldr	r1, [pc, #200]	; (80022bc <eCompassRead+0xf8>)
 80021f2:	f001 fcb3 	bl	8003b5c <I2C_CheckEvent>
 80021f6:	4603      	mov	r3, r0
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d0f8      	beq.n	80021ee <eCompassRead+0x2a>
	I2C_Send7bitAddress(I2C2,(u8)0x32,I2C_Direction_Transmitter);
 80021fc:	482e      	ldr	r0, [pc, #184]	; (80022b8 <eCompassRead+0xf4>)
 80021fe:	2132      	movs	r1, #50	; 0x32
 8002200:	2200      	movs	r2, #0
 8002202:	f001 fc8d 	bl	8003b20 <I2C_Send7bitAddress>
	//I2C_SendData(I2C2,0x32);
	while(!I2C_CheckEvent(I2C2,I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED));
 8002206:	bf00      	nop
 8002208:	482b      	ldr	r0, [pc, #172]	; (80022b8 <eCompassRead+0xf4>)
 800220a:	492d      	ldr	r1, [pc, #180]	; (80022c0 <eCompassRead+0xfc>)
 800220c:	f001 fca6 	bl	8003b5c <I2C_CheckEvent>
 8002210:	4603      	mov	r3, r0
 8002212:	2b00      	cmp	r3, #0
 8002214:	d0f8      	beq.n	8002208 <eCompassRead+0x44>
	I2C_Cmd(I2C2,ENABLE);
 8002216:	4828      	ldr	r0, [pc, #160]	; (80022b8 <eCompassRead+0xf4>)
 8002218:	2101      	movs	r1, #1
 800221a:	f001 fbe3 	bl	80039e4 <I2C_Cmd>
	I2C_SendData(I2C2,(u8)address);
 800221e:	7bfb      	ldrb	r3, [r7, #15]
 8002220:	4825      	ldr	r0, [pc, #148]	; (80022b8 <eCompassRead+0xf4>)
 8002222:	4619      	mov	r1, r3
 8002224:	f001 fc5e 	bl	8003ae4 <I2C_SendData>
	while(!I2C_CheckEvent(I2C2,I2C_EVENT_MASTER_BYTE_TRANSMITTED));
 8002228:	bf00      	nop
 800222a:	4823      	ldr	r0, [pc, #140]	; (80022b8 <eCompassRead+0xf4>)
 800222c:	4925      	ldr	r1, [pc, #148]	; (80022c4 <eCompassRead+0x100>)
 800222e:	f001 fc95 	bl	8003b5c <I2C_CheckEvent>
 8002232:	4603      	mov	r3, r0
 8002234:	2b00      	cmp	r3, #0
 8002236:	d0f8      	beq.n	800222a <eCompassRead+0x66>
	I2C_GenerateSTART(I2C2,ENABLE);
 8002238:	481f      	ldr	r0, [pc, #124]	; (80022b8 <eCompassRead+0xf4>)
 800223a:	2101      	movs	r1, #1
 800223c:	f001 fbf2 	bl	8003a24 <I2C_GenerateSTART>
	while(!I2C_CheckEvent(I2C2,I2C_EVENT_MASTER_MODE_SELECT));
 8002240:	bf00      	nop
 8002242:	481d      	ldr	r0, [pc, #116]	; (80022b8 <eCompassRead+0xf4>)
 8002244:	491d      	ldr	r1, [pc, #116]	; (80022bc <eCompassRead+0xf8>)
 8002246:	f001 fc89 	bl	8003b5c <I2C_CheckEvent>
 800224a:	4603      	mov	r3, r0
 800224c:	2b00      	cmp	r3, #0
 800224e:	d0f8      	beq.n	8002242 <eCompassRead+0x7e>
	I2C_Send7bitAddress(I2C2,(u8)0x33,I2C_Direction_Receiver);
 8002250:	4819      	ldr	r0, [pc, #100]	; (80022b8 <eCompassRead+0xf4>)
 8002252:	2133      	movs	r1, #51	; 0x33
 8002254:	2201      	movs	r2, #1
 8002256:	f001 fc63 	bl	8003b20 <I2C_Send7bitAddress>
	//I2C_SendData(I2C2,0x33);
	while(!I2C_CheckEvent(I2C2,I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED));
 800225a:	bf00      	nop
 800225c:	4816      	ldr	r0, [pc, #88]	; (80022b8 <eCompassRead+0xf4>)
 800225e:	491a      	ldr	r1, [pc, #104]	; (80022c8 <eCompassRead+0x104>)
 8002260:	f001 fc7c 	bl	8003b5c <I2C_CheckEvent>
 8002264:	4603      	mov	r3, r0
 8002266:	2b00      	cmp	r3, #0
 8002268:	d0f8      	beq.n	800225c <eCompassRead+0x98>
	while(numByteToRead)
 800226a:	e01b      	b.n	80022a4 <eCompassRead+0xe0>
	{
		if(numByteToRead==1)
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	2b01      	cmp	r3, #1
 8002270:	d107      	bne.n	8002282 <eCompassRead+0xbe>
     	{
			I2C_AcknowledgeConfig(I2C2,DISABLE);
 8002272:	4811      	ldr	r0, [pc, #68]	; (80022b8 <eCompassRead+0xf4>)
 8002274:	2100      	movs	r1, #0
 8002276:	f001 fc15 	bl	8003aa4 <I2C_AcknowledgeConfig>
			I2C_GenerateSTOP(I2C2,ENABLE);
 800227a:	480f      	ldr	r0, [pc, #60]	; (80022b8 <eCompassRead+0xf4>)
 800227c:	2101      	movs	r1, #1
 800227e:	f001 fbf1 	bl	8003a64 <I2C_GenerateSTOP>
		}
		if(I2C_CheckEvent(I2C2,I2C_EVENT_MASTER_BYTE_RECEIVED))
 8002282:	480d      	ldr	r0, [pc, #52]	; (80022b8 <eCompassRead+0xf4>)
 8002284:	4911      	ldr	r1, [pc, #68]	; (80022cc <eCompassRead+0x108>)
 8002286:	f001 fc69 	bl	8003b5c <I2C_CheckEvent>
 800228a:	4603      	mov	r3, r0
 800228c:	2b00      	cmp	r3, #0
 800228e:	d009      	beq.n	80022a4 <eCompassRead+0xe0>

		{
			*pBuffer=I2C_ReceiveData(I2C2);
 8002290:	4809      	ldr	r0, [pc, #36]	; (80022b8 <eCompassRead+0xf4>)
 8002292:	f001 fc37 	bl	8003b04 <I2C_ReceiveData>
 8002296:	4603      	mov	r3, r0
 8002298:	461a      	mov	r2, r3
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	701a      	strb	r2, [r3, #0]
			numByteToRead--;
 800229e:	68bb      	ldr	r3, [r7, #8]
 80022a0:	3b01      	subs	r3, #1
 80022a2:	60bb      	str	r3, [r7, #8]
	I2C_GenerateSTART(I2C2,ENABLE);
	while(!I2C_CheckEvent(I2C2,I2C_EVENT_MASTER_MODE_SELECT));
	I2C_Send7bitAddress(I2C2,(u8)0x33,I2C_Direction_Receiver);
	//I2C_SendData(I2C2,0x33);
	while(!I2C_CheckEvent(I2C2,I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED));
	while(numByteToRead)
 80022a4:	68bb      	ldr	r3, [r7, #8]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d1e0      	bne.n	800226c <eCompassRead+0xa8>
			*pBuffer=I2C_ReceiveData(I2C2);
			numByteToRead--;
		}

	}
	I2C_AcknowledgeConfig(I2C2,ENABLE);
 80022aa:	4803      	ldr	r0, [pc, #12]	; (80022b8 <eCompassRead+0xf4>)
 80022ac:	2101      	movs	r1, #1
 80022ae:	f001 fbf9 	bl	8003aa4 <I2C_AcknowledgeConfig>
}
 80022b2:	3710      	adds	r7, #16
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd80      	pop	{r7, pc}
 80022b8:	40005800 	.word	0x40005800
 80022bc:	00030001 	.word	0x00030001
 80022c0:	00070082 	.word	0x00070082
 80022c4:	00070084 	.word	0x00070084
 80022c8:	00030002 	.word	0x00030002
 80022cc:	00030040 	.word	0x00030040

080022d0 <eCompassRead2>:
void eCompassRead2(u8 address,uint32_t numByteToRead,u8* pBuffer)//magnatometer
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b084      	sub	sp, #16
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	4603      	mov	r3, r0
 80022d8:	60b9      	str	r1, [r7, #8]
 80022da:	607a      	str	r2, [r7, #4]
 80022dc:	73fb      	strb	r3, [r7, #15]
	while((I2C_GetFlagStatus(I2C2,I2C_FLAG_BUSY)));
 80022de:	bf00      	nop
 80022e0:	4837      	ldr	r0, [pc, #220]	; (80023c0 <eCompassRead2+0xf0>)
 80022e2:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 80022e6:	f001 fc69 	bl	8003bbc <I2C_GetFlagStatus>
 80022ea:	4603      	mov	r3, r0
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d1f7      	bne.n	80022e0 <eCompassRead2+0x10>
	I2C_GenerateSTART(I2C2,ENABLE);
 80022f0:	4833      	ldr	r0, [pc, #204]	; (80023c0 <eCompassRead2+0xf0>)
 80022f2:	2101      	movs	r1, #1
 80022f4:	f001 fb96 	bl	8003a24 <I2C_GenerateSTART>
	while(!I2C_CheckEvent(I2C2,I2C_EVENT_MASTER_MODE_SELECT));
 80022f8:	bf00      	nop
 80022fa:	4831      	ldr	r0, [pc, #196]	; (80023c0 <eCompassRead2+0xf0>)
 80022fc:	4931      	ldr	r1, [pc, #196]	; (80023c4 <eCompassRead2+0xf4>)
 80022fe:	f001 fc2d 	bl	8003b5c <I2C_CheckEvent>
 8002302:	4603      	mov	r3, r0
 8002304:	2b00      	cmp	r3, #0
 8002306:	d0f8      	beq.n	80022fa <eCompassRead2+0x2a>
	//I2C_Send7bitAddress(I2C2,(u8)0x3C,I2C_Direction_Transmitter);
	I2C_SendData(I2C2,0x3C);
 8002308:	482d      	ldr	r0, [pc, #180]	; (80023c0 <eCompassRead2+0xf0>)
 800230a:	213c      	movs	r1, #60	; 0x3c
 800230c:	f001 fbea 	bl	8003ae4 <I2C_SendData>
	while(!I2C_CheckEvent(I2C2,I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED));
 8002310:	bf00      	nop
 8002312:	482b      	ldr	r0, [pc, #172]	; (80023c0 <eCompassRead2+0xf0>)
 8002314:	492c      	ldr	r1, [pc, #176]	; (80023c8 <eCompassRead2+0xf8>)
 8002316:	f001 fc21 	bl	8003b5c <I2C_CheckEvent>
 800231a:	4603      	mov	r3, r0
 800231c:	2b00      	cmp	r3, #0
 800231e:	d0f8      	beq.n	8002312 <eCompassRead2+0x42>
	I2C_Cmd(I2C2,ENABLE);
 8002320:	4827      	ldr	r0, [pc, #156]	; (80023c0 <eCompassRead2+0xf0>)
 8002322:	2101      	movs	r1, #1
 8002324:	f001 fb5e 	bl	80039e4 <I2C_Cmd>
	I2C_SendData(I2C2,(u8)address);
 8002328:	7bfb      	ldrb	r3, [r7, #15]
 800232a:	4825      	ldr	r0, [pc, #148]	; (80023c0 <eCompassRead2+0xf0>)
 800232c:	4619      	mov	r1, r3
 800232e:	f001 fbd9 	bl	8003ae4 <I2C_SendData>
	while(!I2C_CheckEvent(I2C2,I2C_EVENT_MASTER_BYTE_TRANSMITTED));
 8002332:	bf00      	nop
 8002334:	4822      	ldr	r0, [pc, #136]	; (80023c0 <eCompassRead2+0xf0>)
 8002336:	4925      	ldr	r1, [pc, #148]	; (80023cc <eCompassRead2+0xfc>)
 8002338:	f001 fc10 	bl	8003b5c <I2C_CheckEvent>
 800233c:	4603      	mov	r3, r0
 800233e:	2b00      	cmp	r3, #0
 8002340:	d0f8      	beq.n	8002334 <eCompassRead2+0x64>
	I2C_GenerateSTART(I2C2,ENABLE);
 8002342:	481f      	ldr	r0, [pc, #124]	; (80023c0 <eCompassRead2+0xf0>)
 8002344:	2101      	movs	r1, #1
 8002346:	f001 fb6d 	bl	8003a24 <I2C_GenerateSTART>
	while(!I2C_CheckEvent(I2C2,I2C_EVENT_MASTER_MODE_SELECT));
 800234a:	bf00      	nop
 800234c:	481c      	ldr	r0, [pc, #112]	; (80023c0 <eCompassRead2+0xf0>)
 800234e:	491d      	ldr	r1, [pc, #116]	; (80023c4 <eCompassRead2+0xf4>)
 8002350:	f001 fc04 	bl	8003b5c <I2C_CheckEvent>
 8002354:	4603      	mov	r3, r0
 8002356:	2b00      	cmp	r3, #0
 8002358:	d0f8      	beq.n	800234c <eCompassRead2+0x7c>
	//I2C_Send7bitAddress(I2C2,(u8)0x3D,I2C_Direction_Receiver);
	I2C_SendData(I2C2,0x3D);
 800235a:	4819      	ldr	r0, [pc, #100]	; (80023c0 <eCompassRead2+0xf0>)
 800235c:	213d      	movs	r1, #61	; 0x3d
 800235e:	f001 fbc1 	bl	8003ae4 <I2C_SendData>
	while(!I2C_CheckEvent(I2C2,I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED));
 8002362:	bf00      	nop
 8002364:	4816      	ldr	r0, [pc, #88]	; (80023c0 <eCompassRead2+0xf0>)
 8002366:	491a      	ldr	r1, [pc, #104]	; (80023d0 <eCompassRead2+0x100>)
 8002368:	f001 fbf8 	bl	8003b5c <I2C_CheckEvent>
 800236c:	4603      	mov	r3, r0
 800236e:	2b00      	cmp	r3, #0
 8002370:	d0f8      	beq.n	8002364 <eCompassRead2+0x94>
	while(numByteToRead)
 8002372:	e01b      	b.n	80023ac <eCompassRead2+0xdc>
	{
		if(numByteToRead==1)
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	2b01      	cmp	r3, #1
 8002378:	d107      	bne.n	800238a <eCompassRead2+0xba>
		{
			I2C_AcknowledgeConfig(I2C2,DISABLE);
 800237a:	4811      	ldr	r0, [pc, #68]	; (80023c0 <eCompassRead2+0xf0>)
 800237c:	2100      	movs	r1, #0
 800237e:	f001 fb91 	bl	8003aa4 <I2C_AcknowledgeConfig>
			I2C_GenerateSTOP(I2C2,ENABLE);
 8002382:	480f      	ldr	r0, [pc, #60]	; (80023c0 <eCompassRead2+0xf0>)
 8002384:	2101      	movs	r1, #1
 8002386:	f001 fb6d 	bl	8003a64 <I2C_GenerateSTOP>
		}
		if(I2C_CheckEvent(I2C2,I2C_EVENT_MASTER_BYTE_RECEIVED))
 800238a:	480d      	ldr	r0, [pc, #52]	; (80023c0 <eCompassRead2+0xf0>)
 800238c:	4911      	ldr	r1, [pc, #68]	; (80023d4 <eCompassRead2+0x104>)
 800238e:	f001 fbe5 	bl	8003b5c <I2C_CheckEvent>
 8002392:	4603      	mov	r3, r0
 8002394:	2b00      	cmp	r3, #0
 8002396:	d009      	beq.n	80023ac <eCompassRead2+0xdc>
		{
			*pBuffer=I2C_ReceiveData(I2C2);
 8002398:	4809      	ldr	r0, [pc, #36]	; (80023c0 <eCompassRead2+0xf0>)
 800239a:	f001 fbb3 	bl	8003b04 <I2C_ReceiveData>
 800239e:	4603      	mov	r3, r0
 80023a0:	461a      	mov	r2, r3
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	701a      	strb	r2, [r3, #0]
			numByteToRead--;
 80023a6:	68bb      	ldr	r3, [r7, #8]
 80023a8:	3b01      	subs	r3, #1
 80023aa:	60bb      	str	r3, [r7, #8]
	I2C_GenerateSTART(I2C2,ENABLE);
	while(!I2C_CheckEvent(I2C2,I2C_EVENT_MASTER_MODE_SELECT));
	//I2C_Send7bitAddress(I2C2,(u8)0x3D,I2C_Direction_Receiver);
	I2C_SendData(I2C2,0x3D);
	while(!I2C_CheckEvent(I2C2,I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED));
	while(numByteToRead)
 80023ac:	68bb      	ldr	r3, [r7, #8]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d1e0      	bne.n	8002374 <eCompassRead2+0xa4>
		{
			*pBuffer=I2C_ReceiveData(I2C2);
			numByteToRead--;
		}
	}
	I2C_AcknowledgeConfig(I2C2,ENABLE);
 80023b2:	4803      	ldr	r0, [pc, #12]	; (80023c0 <eCompassRead2+0xf0>)
 80023b4:	2101      	movs	r1, #1
 80023b6:	f001 fb75 	bl	8003aa4 <I2C_AcknowledgeConfig>
}
 80023ba:	3710      	adds	r7, #16
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd80      	pop	{r7, pc}
 80023c0:	40005800 	.word	0x40005800
 80023c4:	00030001 	.word	0x00030001
 80023c8:	00070082 	.word	0x00070082
 80023cc:	00070084 	.word	0x00070084
 80023d0:	00030002 	.word	0x00030002
 80023d4:	00030040 	.word	0x00030040

080023d8 <getAcc>:
	I2C_SendData(I2C2,(u8)data);//data
	while(!I2C_CheckEvent(I2C2,I2C_EVENT_MASTER_BYTE_TRANSMITTED));
	I2C_GenerateSTOP(I2C2,ENABLE);
}
void getAcc(float* out)
{
 80023d8:	b590      	push	{r4, r7, lr}
 80023da:	b089      	sub	sp, #36	; 0x24
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
	u8 buffer[6];
	u8 crtl4;

	eCompassRead(0x23,1,&crtl4);
 80023e0:	f107 030b 	add.w	r3, r7, #11
 80023e4:	2023      	movs	r0, #35	; 0x23
 80023e6:	2101      	movs	r1, #1
 80023e8:	461a      	mov	r2, r3
 80023ea:	f7ff feeb 	bl	80021c4 <eCompassRead>
	eCompassRead(0x28,1,&buffer[0]);
 80023ee:	f107 030c 	add.w	r3, r7, #12
 80023f2:	2028      	movs	r0, #40	; 0x28
 80023f4:	2101      	movs	r1, #1
 80023f6:	461a      	mov	r2, r3
 80023f8:	f7ff fee4 	bl	80021c4 <eCompassRead>
	eCompassRead(0x29,1,&buffer[1]);
 80023fc:	f107 030c 	add.w	r3, r7, #12
 8002400:	3301      	adds	r3, #1
 8002402:	2029      	movs	r0, #41	; 0x29
 8002404:	2101      	movs	r1, #1
 8002406:	461a      	mov	r2, r3
 8002408:	f7ff fedc 	bl	80021c4 <eCompassRead>
	eCompassRead(0x2A,1,&buffer[2]);
 800240c:	f107 030c 	add.w	r3, r7, #12
 8002410:	3302      	adds	r3, #2
 8002412:	202a      	movs	r0, #42	; 0x2a
 8002414:	2101      	movs	r1, #1
 8002416:	461a      	mov	r2, r3
 8002418:	f7ff fed4 	bl	80021c4 <eCompassRead>
	eCompassRead(0x2B,1,&buffer[3]);
 800241c:	f107 030c 	add.w	r3, r7, #12
 8002420:	3303      	adds	r3, #3
 8002422:	202b      	movs	r0, #43	; 0x2b
 8002424:	2101      	movs	r1, #1
 8002426:	461a      	mov	r2, r3
 8002428:	f7ff fecc 	bl	80021c4 <eCompassRead>
	eCompassRead(0x2C,1,&buffer[4]);
 800242c:	f107 030c 	add.w	r3, r7, #12
 8002430:	3304      	adds	r3, #4
 8002432:	202c      	movs	r0, #44	; 0x2c
 8002434:	2101      	movs	r1, #1
 8002436:	461a      	mov	r2, r3
 8002438:	f7ff fec4 	bl	80021c4 <eCompassRead>
	eCompassRead(0x2D,1,&buffer[5]);
 800243c:	f107 030c 	add.w	r3, r7, #12
 8002440:	3305      	adds	r3, #5
 8002442:	202d      	movs	r0, #45	; 0x2d
 8002444:	2101      	movs	r1, #1
 8002446:	461a      	mov	r2, r3
 8002448:	f7ff febc 	bl	80021c4 <eCompassRead>

	int i=0;
 800244c:	2300      	movs	r3, #0
 800244e:	61fb      	str	r3, [r7, #28]
	u16 t=0;
 8002450:	2300      	movs	r3, #0
 8002452:	837b      	strh	r3, [r7, #26]

	if(!(crtl4 & 0x40))//endian check
 8002454:	7afb      	ldrb	r3, [r7, #11]
 8002456:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800245a:	2b00      	cmp	r3, #0
 800245c:	f040 80f2 	bne.w	8002644 <getAcc+0x26c>
	{
		switch(crtl4 & 0x30)//adjust the sensitivity
 8002460:	7afb      	ldrb	r3, [r7, #11]
 8002462:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002466:	2b10      	cmp	r3, #16
 8002468:	d04b      	beq.n	8002502 <getAcc+0x12a>
 800246a:	2b30      	cmp	r3, #48	; 0x30
 800246c:	f000 8098 	beq.w	80025a0 <getAcc+0x1c8>
 8002470:	2b00      	cmp	r3, #0
 8002472:	f040 80e7 	bne.w	8002644 <getAcc+0x26c>
		{
		case 0x00:
			for(i=0;i<3;i++)
 8002476:	2300      	movs	r3, #0
 8002478:	61fb      	str	r3, [r7, #28]
 800247a:	e03e      	b.n	80024fa <getAcc+0x122>
			{
				s16 te=0;
 800247c:	2300      	movs	r3, #0
 800247e:	833b      	strh	r3, [r7, #24]
				t=(u16)(((u16)buffer[2*i+1]<<8)|(u16)buffer[2*i]);
 8002480:	69fb      	ldr	r3, [r7, #28]
 8002482:	005b      	lsls	r3, r3, #1
 8002484:	3301      	adds	r3, #1
 8002486:	f107 0120 	add.w	r1, r7, #32
 800248a:	440b      	add	r3, r1
 800248c:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8002490:	021b      	lsls	r3, r3, #8
 8002492:	b29a      	uxth	r2, r3
 8002494:	69fb      	ldr	r3, [r7, #28]
 8002496:	005b      	lsls	r3, r3, #1
 8002498:	f107 0120 	add.w	r1, r7, #32
 800249c:	440b      	add	r3, r1
 800249e:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 80024a2:	4313      	orrs	r3, r2
 80024a4:	b29b      	uxth	r3, r3
 80024a6:	837b      	strh	r3, [r7, #26]
				te=twosCompToDec(t);
 80024a8:	8b7b      	ldrh	r3, [r7, #26]
 80024aa:	4618      	mov	r0, r3
 80024ac:	f000 fbb4 	bl	8002c18 <twosCompToDec>
 80024b0:	4603      	mov	r3, r0
 80024b2:	833b      	strh	r3, [r7, #24]
				//out[i]=(float)(((te/16)*9.81/1000.0));
				out[i]=(float)(((te)/16/1000.0));
 80024b4:	69fb      	ldr	r3, [r7, #28]
 80024b6:	009b      	lsls	r3, r3, #2
 80024b8:	687a      	ldr	r2, [r7, #4]
 80024ba:	18d4      	adds	r4, r2, r3
 80024bc:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	da00      	bge.n	80024c6 <getAcc+0xee>
 80024c4:	330f      	adds	r3, #15
 80024c6:	111b      	asrs	r3, r3, #4
 80024c8:	b29b      	uxth	r3, r3
 80024ca:	b21b      	sxth	r3, r3
 80024cc:	4618      	mov	r0, r3
 80024ce:	f7fd fffd 	bl	80004cc <__aeabi_i2d>
 80024d2:	4602      	mov	r2, r0
 80024d4:	460b      	mov	r3, r1
 80024d6:	4610      	mov	r0, r2
 80024d8:	4619      	mov	r1, r3
 80024da:	f04f 0200 	mov.w	r2, #0
 80024de:	4b60      	ldr	r3, [pc, #384]	; (8002660 <getAcc+0x288>)
 80024e0:	f7fe f984 	bl	80007ec <__aeabi_ddiv>
 80024e4:	4602      	mov	r2, r0
 80024e6:	460b      	mov	r3, r1
 80024e8:	4610      	mov	r0, r2
 80024ea:	4619      	mov	r1, r3
 80024ec:	f7fe fa66 	bl	80009bc <__aeabi_d2f>
 80024f0:	4603      	mov	r3, r0
 80024f2:	6023      	str	r3, [r4, #0]
	if(!(crtl4 & 0x40))//endian check
	{
		switch(crtl4 & 0x30)//adjust the sensitivity
		{
		case 0x00:
			for(i=0;i<3;i++)
 80024f4:	69fb      	ldr	r3, [r7, #28]
 80024f6:	3301      	adds	r3, #1
 80024f8:	61fb      	str	r3, [r7, #28]
 80024fa:	69fb      	ldr	r3, [r7, #28]
 80024fc:	2b02      	cmp	r3, #2
 80024fe:	ddbd      	ble.n	800247c <getAcc+0xa4>
				t=(u16)(((u16)buffer[2*i+1]<<8)|(u16)buffer[2*i]);
				te=twosCompToDec(t);
				//out[i]=(float)(((te/16)*9.81/1000.0));
				out[i]=(float)(((te)/16/1000.0));
			}
			break;
 8002500:	e0a0      	b.n	8002644 <getAcc+0x26c>
		case 0x10:
			for(i=0;i<3;i++)
 8002502:	2300      	movs	r3, #0
 8002504:	61fb      	str	r3, [r7, #28]
 8002506:	e047      	b.n	8002598 <getAcc+0x1c0>
			{
				s16 te=0;
 8002508:	2300      	movs	r3, #0
 800250a:	82fb      	strh	r3, [r7, #22]
				t=(u16)(((u16)buffer[2*i+1]<<8)|(u16)buffer[2*i]);
 800250c:	69fb      	ldr	r3, [r7, #28]
 800250e:	005b      	lsls	r3, r3, #1
 8002510:	3301      	adds	r3, #1
 8002512:	f107 0220 	add.w	r2, r7, #32
 8002516:	4413      	add	r3, r2
 8002518:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 800251c:	021b      	lsls	r3, r3, #8
 800251e:	b29a      	uxth	r2, r3
 8002520:	69fb      	ldr	r3, [r7, #28]
 8002522:	005b      	lsls	r3, r3, #1
 8002524:	f107 0120 	add.w	r1, r7, #32
 8002528:	440b      	add	r3, r1
 800252a:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 800252e:	4313      	orrs	r3, r2
 8002530:	b29b      	uxth	r3, r3
 8002532:	837b      	strh	r3, [r7, #26]
				te=twosCompToDec(t);
 8002534:	8b7b      	ldrh	r3, [r7, #26]
 8002536:	4618      	mov	r0, r3
 8002538:	f000 fb6e 	bl	8002c18 <twosCompToDec>
 800253c:	4603      	mov	r3, r0
 800253e:	82fb      	strh	r3, [r7, #22]
				out[i]=(float)((te/(16*2))*9.81/1000.0);
 8002540:	69fb      	ldr	r3, [r7, #28]
 8002542:	009b      	lsls	r3, r3, #2
 8002544:	687a      	ldr	r2, [r7, #4]
 8002546:	18d4      	adds	r4, r2, r3
 8002548:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800254c:	2b00      	cmp	r3, #0
 800254e:	da00      	bge.n	8002552 <getAcc+0x17a>
 8002550:	331f      	adds	r3, #31
 8002552:	115b      	asrs	r3, r3, #5
 8002554:	b29b      	uxth	r3, r3
 8002556:	b21b      	sxth	r3, r3
 8002558:	4618      	mov	r0, r3
 800255a:	f7fd ffb7 	bl	80004cc <__aeabi_i2d>
 800255e:	4602      	mov	r2, r0
 8002560:	460b      	mov	r3, r1
 8002562:	4610      	mov	r0, r2
 8002564:	4619      	mov	r1, r3
 8002566:	a33a      	add	r3, pc, #232	; (adr r3, 8002650 <getAcc+0x278>)
 8002568:	e9d3 2300 	ldrd	r2, r3, [r3]
 800256c:	f7fe f814 	bl	8000598 <__aeabi_dmul>
 8002570:	4602      	mov	r2, r0
 8002572:	460b      	mov	r3, r1
 8002574:	4610      	mov	r0, r2
 8002576:	4619      	mov	r1, r3
 8002578:	f04f 0200 	mov.w	r2, #0
 800257c:	4b38      	ldr	r3, [pc, #224]	; (8002660 <getAcc+0x288>)
 800257e:	f7fe f935 	bl	80007ec <__aeabi_ddiv>
 8002582:	4602      	mov	r2, r0
 8002584:	460b      	mov	r3, r1
 8002586:	4610      	mov	r0, r2
 8002588:	4619      	mov	r1, r3
 800258a:	f7fe fa17 	bl	80009bc <__aeabi_d2f>
 800258e:	4603      	mov	r3, r0
 8002590:	6023      	str	r3, [r4, #0]
				//out[i]=(float)(((te/16)*9.81/1000.0));
				out[i]=(float)(((te)/16/1000.0));
			}
			break;
		case 0x10:
			for(i=0;i<3;i++)
 8002592:	69fb      	ldr	r3, [r7, #28]
 8002594:	3301      	adds	r3, #1
 8002596:	61fb      	str	r3, [r7, #28]
 8002598:	69fb      	ldr	r3, [r7, #28]
 800259a:	2b02      	cmp	r3, #2
 800259c:	ddb4      	ble.n	8002508 <getAcc+0x130>
				s16 te=0;
				t=(u16)(((u16)buffer[2*i+1]<<8)|(u16)buffer[2*i]);
				te=twosCompToDec(t);
				out[i]=(float)((te/(16*2))*9.81/1000.0);
			}
			break;
 800259e:	e051      	b.n	8002644 <getAcc+0x26c>
		case 0x30:
			for(i=0;i<3;i++)
 80025a0:	2300      	movs	r3, #0
 80025a2:	61fb      	str	r3, [r7, #28]
 80025a4:	e04a      	b.n	800263c <getAcc+0x264>
			{
				s16 te=0;
 80025a6:	2300      	movs	r3, #0
 80025a8:	82bb      	strh	r3, [r7, #20]
				t=(u16)(((u16)buffer[2*i+1]<<8)|(u16)buffer[2*i]);
 80025aa:	69fb      	ldr	r3, [r7, #28]
 80025ac:	005b      	lsls	r3, r3, #1
 80025ae:	3301      	adds	r3, #1
 80025b0:	f107 0220 	add.w	r2, r7, #32
 80025b4:	4413      	add	r3, r2
 80025b6:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 80025ba:	021b      	lsls	r3, r3, #8
 80025bc:	b29a      	uxth	r2, r3
 80025be:	69fb      	ldr	r3, [r7, #28]
 80025c0:	005b      	lsls	r3, r3, #1
 80025c2:	f107 0120 	add.w	r1, r7, #32
 80025c6:	440b      	add	r3, r1
 80025c8:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 80025cc:	4313      	orrs	r3, r2
 80025ce:	b29b      	uxth	r3, r3
 80025d0:	837b      	strh	r3, [r7, #26]
				te=twosCompToDec(t);
 80025d2:	8b7b      	ldrh	r3, [r7, #26]
 80025d4:	4618      	mov	r0, r3
 80025d6:	f000 fb1f 	bl	8002c18 <twosCompToDec>
 80025da:	4603      	mov	r3, r0
 80025dc:	82bb      	strh	r3, [r7, #20]
				out[i]=(float)((te/(16*3.9))*9.81/1000.0);
 80025de:	69fb      	ldr	r3, [r7, #28]
 80025e0:	009b      	lsls	r3, r3, #2
 80025e2:	687a      	ldr	r2, [r7, #4]
 80025e4:	18d4      	adds	r4, r2, r3
 80025e6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80025ea:	4618      	mov	r0, r3
 80025ec:	f7fd ff6e 	bl	80004cc <__aeabi_i2d>
 80025f0:	4602      	mov	r2, r0
 80025f2:	460b      	mov	r3, r1
 80025f4:	4610      	mov	r0, r2
 80025f6:	4619      	mov	r1, r3
 80025f8:	a317      	add	r3, pc, #92	; (adr r3, 8002658 <getAcc+0x280>)
 80025fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025fe:	f7fe f8f5 	bl	80007ec <__aeabi_ddiv>
 8002602:	4602      	mov	r2, r0
 8002604:	460b      	mov	r3, r1
 8002606:	4610      	mov	r0, r2
 8002608:	4619      	mov	r1, r3
 800260a:	a311      	add	r3, pc, #68	; (adr r3, 8002650 <getAcc+0x278>)
 800260c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002610:	f7fd ffc2 	bl	8000598 <__aeabi_dmul>
 8002614:	4602      	mov	r2, r0
 8002616:	460b      	mov	r3, r1
 8002618:	4610      	mov	r0, r2
 800261a:	4619      	mov	r1, r3
 800261c:	f04f 0200 	mov.w	r2, #0
 8002620:	4b0f      	ldr	r3, [pc, #60]	; (8002660 <getAcc+0x288>)
 8002622:	f7fe f8e3 	bl	80007ec <__aeabi_ddiv>
 8002626:	4602      	mov	r2, r0
 8002628:	460b      	mov	r3, r1
 800262a:	4610      	mov	r0, r2
 800262c:	4619      	mov	r1, r3
 800262e:	f7fe f9c5 	bl	80009bc <__aeabi_d2f>
 8002632:	4603      	mov	r3, r0
 8002634:	6023      	str	r3, [r4, #0]
				te=twosCompToDec(t);
				out[i]=(float)((te/(16*2))*9.81/1000.0);
			}
			break;
		case 0x30:
			for(i=0;i<3;i++)
 8002636:	69fb      	ldr	r3, [r7, #28]
 8002638:	3301      	adds	r3, #1
 800263a:	61fb      	str	r3, [r7, #28]
 800263c:	69fb      	ldr	r3, [r7, #28]
 800263e:	2b02      	cmp	r3, #2
 8002640:	ddb1      	ble.n	80025a6 <getAcc+0x1ce>
				s16 te=0;
				t=(u16)(((u16)buffer[2*i+1]<<8)|(u16)buffer[2*i]);
				te=twosCompToDec(t);
				out[i]=(float)((te/(16*3.9))*9.81/1000.0);
			}
			break;
 8002642:	bf00      	nop
		}
	}
}
 8002644:	3724      	adds	r7, #36	; 0x24
 8002646:	46bd      	mov	sp, r7
 8002648:	bd90      	pop	{r4, r7, pc}
 800264a:	bf00      	nop
 800264c:	f3af 8000 	nop.w
 8002650:	51eb851f 	.word	0x51eb851f
 8002654:	40239eb8 	.word	0x40239eb8
 8002658:	33333333 	.word	0x33333333
 800265c:	404f3333 	.word	0x404f3333
 8002660:	408f4000 	.word	0x408f4000
 8002664:	f3af 8000 	nop.w

08002668 <getMag>:
void getMag(float* out)
{
 8002668:	b590      	push	{r4, r7, lr}
 800266a:	b089      	sub	sp, #36	; 0x24
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
	u8 buffer[6];
	u8 crtlB;
	int i=0;
 8002670:	2300      	movs	r3, #0
 8002672:	61fb      	str	r3, [r7, #28]
	eCompassRead2(0x01,1,&crtlB);
 8002674:	f107 030f 	add.w	r3, r7, #15
 8002678:	2001      	movs	r0, #1
 800267a:	2101      	movs	r1, #1
 800267c:	461a      	mov	r2, r3
 800267e:	f7ff fe27 	bl	80022d0 <eCompassRead2>
	eCompassRead2(0x03,1,&buffer[1]);
 8002682:	f107 0310 	add.w	r3, r7, #16
 8002686:	3301      	adds	r3, #1
 8002688:	2003      	movs	r0, #3
 800268a:	2101      	movs	r1, #1
 800268c:	461a      	mov	r2, r3
 800268e:	f7ff fe1f 	bl	80022d0 <eCompassRead2>
	eCompassRead2(0x04,1,&buffer[0]);
 8002692:	f107 0310 	add.w	r3, r7, #16
 8002696:	2004      	movs	r0, #4
 8002698:	2101      	movs	r1, #1
 800269a:	461a      	mov	r2, r3
 800269c:	f7ff fe18 	bl	80022d0 <eCompassRead2>
	eCompassRead2(0x05,1,&buffer[3]);
 80026a0:	f107 0310 	add.w	r3, r7, #16
 80026a4:	3303      	adds	r3, #3
 80026a6:	2005      	movs	r0, #5
 80026a8:	2101      	movs	r1, #1
 80026aa:	461a      	mov	r2, r3
 80026ac:	f7ff fe10 	bl	80022d0 <eCompassRead2>
	eCompassRead2(0x06,1,&buffer[2]);
 80026b0:	f107 0310 	add.w	r3, r7, #16
 80026b4:	3302      	adds	r3, #2
 80026b6:	2006      	movs	r0, #6
 80026b8:	2101      	movs	r1, #1
 80026ba:	461a      	mov	r2, r3
 80026bc:	f7ff fe08 	bl	80022d0 <eCompassRead2>
	eCompassRead2(0x07,1,&buffer[5]);
 80026c0:	f107 0310 	add.w	r3, r7, #16
 80026c4:	3305      	adds	r3, #5
 80026c6:	2007      	movs	r0, #7
 80026c8:	2101      	movs	r1, #1
 80026ca:	461a      	mov	r2, r3
 80026cc:	f7ff fe00 	bl	80022d0 <eCompassRead2>
	eCompassRead2(0x08,1,&buffer[4]);
 80026d0:	f107 0310 	add.w	r3, r7, #16
 80026d4:	3304      	adds	r3, #4
 80026d6:	2008      	movs	r0, #8
 80026d8:	2101      	movs	r1, #1
 80026da:	461a      	mov	r2, r3
 80026dc:	f7ff fdf8 	bl	80022d0 <eCompassRead2>
	s16 te=0;
 80026e0:	2300      	movs	r3, #0
 80026e2:	837b      	strh	r3, [r7, #26]
	u16 t=0;
 80026e4:	2300      	movs	r3, #0
 80026e6:	833b      	strh	r3, [r7, #24]
	/** switch the sensitivity set in the CRTLB*/
    switch(crtlB & 0xE0)
 80026e8:	7bfb      	ldrb	r3, [r7, #15]
 80026ea:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 80026ee:	2ba0      	cmp	r3, #160	; 0xa0
 80026f0:	f000 8118 	beq.w	8002924 <getMag+0x2bc>
 80026f4:	2ba0      	cmp	r3, #160	; 0xa0
 80026f6:	dc07      	bgt.n	8002708 <getMag+0xa0>
 80026f8:	2b60      	cmp	r3, #96	; 0x60
 80026fa:	d065      	beq.n	80027c8 <getMag+0x160>
 80026fc:	2b80      	cmp	r3, #128	; 0x80
 80026fe:	f000 80ba 	beq.w	8002876 <getMag+0x20e>
 8002702:	2b40      	cmp	r3, #64	; 0x40
 8002704:	d00a      	beq.n	800271c <getMag+0xb4>
 8002706:	e278      	b.n	8002bfa <getMag+0x592>
 8002708:	2bc0      	cmp	r3, #192	; 0xc0
 800270a:	f000 81c9 	beq.w	8002aa0 <getMag+0x438>
 800270e:	2be0      	cmp	r3, #224	; 0xe0
 8002710:	f000 821d 	beq.w	8002b4e <getMag+0x4e6>
 8002714:	2bb0      	cmp	r3, #176	; 0xb0
 8002716:	f000 815b 	beq.w	80029d0 <getMag+0x368>
 800271a:	e26e      	b.n	8002bfa <getMag+0x592>
    {
    case 0x40:
	  for(i=0; i<2; i++)
 800271c:	2300      	movs	r3, #0
 800271e:	61fb      	str	r3, [r7, #28]
 8002720:	e02f      	b.n	8002782 <getMag+0x11a>
	  {
		  t=((u16)buffer[2*i] << 8) | (u16)buffer[2*i+1];
 8002722:	69fb      	ldr	r3, [r7, #28]
 8002724:	005b      	lsls	r3, r3, #1
 8002726:	f107 0120 	add.w	r1, r7, #32
 800272a:	440b      	add	r3, r1
 800272c:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8002730:	021b      	lsls	r3, r3, #8
 8002732:	b29a      	uxth	r2, r3
 8002734:	69fb      	ldr	r3, [r7, #28]
 8002736:	005b      	lsls	r3, r3, #1
 8002738:	3301      	adds	r3, #1
 800273a:	f107 0120 	add.w	r1, r7, #32
 800273e:	440b      	add	r3, r1
 8002740:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8002744:	4313      	orrs	r3, r2
 8002746:	b29b      	uxth	r3, r3
 8002748:	833b      	strh	r3, [r7, #24]
		  te=twosCompToDec(t);
 800274a:	8b3b      	ldrh	r3, [r7, #24]
 800274c:	4618      	mov	r0, r3
 800274e:	f000 fa63 	bl	8002c18 <twosCompToDec>
 8002752:	4603      	mov	r3, r0
 8002754:	837b      	strh	r3, [r7, #26]
		  out[i]=(float)((te)/1055);
 8002756:	69fb      	ldr	r3, [r7, #28]
 8002758:	009b      	lsls	r3, r3, #2
 800275a:	687a      	ldr	r2, [r7, #4]
 800275c:	18d4      	adds	r4, r2, r3
 800275e:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002762:	4a9d      	ldr	r2, [pc, #628]	; (80029d8 <getMag+0x370>)
 8002764:	fb82 1203 	smull	r1, r2, r2, r3
 8002768:	1252      	asrs	r2, r2, #9
 800276a:	17db      	asrs	r3, r3, #31
 800276c:	1ad3      	subs	r3, r2, r3
 800276e:	b29b      	uxth	r3, r3
 8002770:	b21b      	sxth	r3, r3
 8002772:	4618      	mov	r0, r3
 8002774:	f7fe fa2c 	bl	8000bd0 <__aeabi_i2f>
 8002778:	4603      	mov	r3, r0
 800277a:	6023      	str	r3, [r4, #0]
	u16 t=0;
	/** switch the sensitivity set in the CRTLB*/
    switch(crtlB & 0xE0)
    {
    case 0x40:
	  for(i=0; i<2; i++)
 800277c:	69fb      	ldr	r3, [r7, #28]
 800277e:	3301      	adds	r3, #1
 8002780:	61fb      	str	r3, [r7, #28]
 8002782:	69fb      	ldr	r3, [r7, #28]
 8002784:	2b01      	cmp	r3, #1
 8002786:	ddcc      	ble.n	8002722 <getMag+0xba>
	  {
		  t=((u16)buffer[2*i] << 8) | (u16)buffer[2*i+1];
		  te=twosCompToDec(t);
		  out[i]=(float)((te)/1055);
	  }
	  t=((u16)buffer[4] << 8) | (u16)buffer[5];
 8002788:	7d3b      	ldrb	r3, [r7, #20]
 800278a:	021b      	lsls	r3, r3, #8
 800278c:	b29a      	uxth	r2, r3
 800278e:	7d7b      	ldrb	r3, [r7, #21]
 8002790:	4313      	orrs	r3, r2
 8002792:	b29b      	uxth	r3, r3
 8002794:	833b      	strh	r3, [r7, #24]
	  te=twosCompToDec(t);
 8002796:	8b3b      	ldrh	r3, [r7, #24]
 8002798:	4618      	mov	r0, r3
 800279a:	f000 fa3d 	bl	8002c18 <twosCompToDec>
 800279e:	4603      	mov	r3, r0
 80027a0:	837b      	strh	r3, [r7, #26]
	  out[2]=(float)(te/950);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	f103 0408 	add.w	r4, r3, #8
 80027a8:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80027ac:	4a8b      	ldr	r2, [pc, #556]	; (80029dc <getMag+0x374>)
 80027ae:	fb82 1203 	smull	r1, r2, r2, r3
 80027b2:	1212      	asrs	r2, r2, #8
 80027b4:	17db      	asrs	r3, r3, #31
 80027b6:	1ad3      	subs	r3, r2, r3
 80027b8:	b29b      	uxth	r3, r3
 80027ba:	b21b      	sxth	r3, r3
 80027bc:	4618      	mov	r0, r3
 80027be:	f7fe fa07 	bl	8000bd0 <__aeabi_i2f>
 80027c2:	4603      	mov	r3, r0
 80027c4:	6023      	str	r3, [r4, #0]
	  break;
 80027c6:	e218      	b.n	8002bfa <getMag+0x592>
    case 0x60:
	  for(i=0; i<2; i++)
 80027c8:	2300      	movs	r3, #0
 80027ca:	61fb      	str	r3, [r7, #28]
 80027cc:	e030      	b.n	8002830 <getMag+0x1c8>
	  {
		  t=((u16)buffer[2*i] << 8) |(u16) buffer[2*i+1];
 80027ce:	69fb      	ldr	r3, [r7, #28]
 80027d0:	005b      	lsls	r3, r3, #1
 80027d2:	f107 0220 	add.w	r2, r7, #32
 80027d6:	4413      	add	r3, r2
 80027d8:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80027dc:	021b      	lsls	r3, r3, #8
 80027de:	b29a      	uxth	r2, r3
 80027e0:	69fb      	ldr	r3, [r7, #28]
 80027e2:	005b      	lsls	r3, r3, #1
 80027e4:	3301      	adds	r3, #1
 80027e6:	f107 0120 	add.w	r1, r7, #32
 80027ea:	440b      	add	r3, r1
 80027ec:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80027f0:	4313      	orrs	r3, r2
 80027f2:	b29b      	uxth	r3, r3
 80027f4:	833b      	strh	r3, [r7, #24]
		  te=twosCompToDec(t);
 80027f6:	8b3b      	ldrh	r3, [r7, #24]
 80027f8:	4618      	mov	r0, r3
 80027fa:	f000 fa0d 	bl	8002c18 <twosCompToDec>
 80027fe:	4603      	mov	r3, r0
 8002800:	837b      	strh	r3, [r7, #26]
		  out[i]=(float)(te/795);
 8002802:	69fb      	ldr	r3, [r7, #28]
 8002804:	009b      	lsls	r3, r3, #2
 8002806:	687a      	ldr	r2, [r7, #4]
 8002808:	18d4      	adds	r4, r2, r3
 800280a:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800280e:	4a74      	ldr	r2, [pc, #464]	; (80029e0 <getMag+0x378>)
 8002810:	fb82 1203 	smull	r1, r2, r2, r3
 8002814:	441a      	add	r2, r3
 8002816:	1252      	asrs	r2, r2, #9
 8002818:	17db      	asrs	r3, r3, #31
 800281a:	1ad3      	subs	r3, r2, r3
 800281c:	b29b      	uxth	r3, r3
 800281e:	b21b      	sxth	r3, r3
 8002820:	4618      	mov	r0, r3
 8002822:	f7fe f9d5 	bl	8000bd0 <__aeabi_i2f>
 8002826:	4603      	mov	r3, r0
 8002828:	6023      	str	r3, [r4, #0]
	  t=((u16)buffer[4] << 8) | (u16)buffer[5];
	  te=twosCompToDec(t);
	  out[2]=(float)(te/950);
	  break;
    case 0x60:
	  for(i=0; i<2; i++)
 800282a:	69fb      	ldr	r3, [r7, #28]
 800282c:	3301      	adds	r3, #1
 800282e:	61fb      	str	r3, [r7, #28]
 8002830:	69fb      	ldr	r3, [r7, #28]
 8002832:	2b01      	cmp	r3, #1
 8002834:	ddcb      	ble.n	80027ce <getMag+0x166>
	  {
		  t=((u16)buffer[2*i] << 8) |(u16) buffer[2*i+1];
		  te=twosCompToDec(t);
		  out[i]=(float)(te/795);
	  }
	  t=((u16)buffer[4] << 8) | (u16)buffer[5];
 8002836:	7d3b      	ldrb	r3, [r7, #20]
 8002838:	021b      	lsls	r3, r3, #8
 800283a:	b29a      	uxth	r2, r3
 800283c:	7d7b      	ldrb	r3, [r7, #21]
 800283e:	4313      	orrs	r3, r2
 8002840:	b29b      	uxth	r3, r3
 8002842:	833b      	strh	r3, [r7, #24]
	  te=twosCompToDec(t);
 8002844:	8b3b      	ldrh	r3, [r7, #24]
 8002846:	4618      	mov	r0, r3
 8002848:	f000 f9e6 	bl	8002c18 <twosCompToDec>
 800284c:	4603      	mov	r3, r0
 800284e:	837b      	strh	r3, [r7, #26]
	  out[2]=(float)(te/710);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	f103 0408 	add.w	r4, r3, #8
 8002856:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800285a:	4a62      	ldr	r2, [pc, #392]	; (80029e4 <getMag+0x37c>)
 800285c:	fb82 1203 	smull	r1, r2, r2, r3
 8002860:	1212      	asrs	r2, r2, #8
 8002862:	17db      	asrs	r3, r3, #31
 8002864:	1ad3      	subs	r3, r2, r3
 8002866:	b29b      	uxth	r3, r3
 8002868:	b21b      	sxth	r3, r3
 800286a:	4618      	mov	r0, r3
 800286c:	f7fe f9b0 	bl	8000bd0 <__aeabi_i2f>
 8002870:	4603      	mov	r3, r0
 8002872:	6023      	str	r3, [r4, #0]
	  break;
 8002874:	e1c1      	b.n	8002bfa <getMag+0x592>
    case 0x80:
	  for(i=0; i<2; i++)
 8002876:	2300      	movs	r3, #0
 8002878:	61fb      	str	r3, [r7, #28]
 800287a:	e02f      	b.n	80028dc <getMag+0x274>
	  {
		  t=((u16)buffer[2*i] << 8) | (u16)buffer[2*i+1];
 800287c:	69fb      	ldr	r3, [r7, #28]
 800287e:	005b      	lsls	r3, r3, #1
 8002880:	f107 0220 	add.w	r2, r7, #32
 8002884:	4413      	add	r3, r2
 8002886:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800288a:	021b      	lsls	r3, r3, #8
 800288c:	b29a      	uxth	r2, r3
 800288e:	69fb      	ldr	r3, [r7, #28]
 8002890:	005b      	lsls	r3, r3, #1
 8002892:	3301      	adds	r3, #1
 8002894:	f107 0120 	add.w	r1, r7, #32
 8002898:	440b      	add	r3, r1
 800289a:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800289e:	4313      	orrs	r3, r2
 80028a0:	b29b      	uxth	r3, r3
 80028a2:	833b      	strh	r3, [r7, #24]
		  te=twosCompToDec(t);
 80028a4:	8b3b      	ldrh	r3, [r7, #24]
 80028a6:	4618      	mov	r0, r3
 80028a8:	f000 f9b6 	bl	8002c18 <twosCompToDec>
 80028ac:	4603      	mov	r3, r0
 80028ae:	837b      	strh	r3, [r7, #26]
		  out[i]=(float)(te/635);
 80028b0:	69fb      	ldr	r3, [r7, #28]
 80028b2:	009b      	lsls	r3, r3, #2
 80028b4:	687a      	ldr	r2, [r7, #4]
 80028b6:	18d4      	adds	r4, r2, r3
 80028b8:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80028bc:	4a4a      	ldr	r2, [pc, #296]	; (80029e8 <getMag+0x380>)
 80028be:	fb82 1203 	smull	r1, r2, r2, r3
 80028c2:	1212      	asrs	r2, r2, #8
 80028c4:	17db      	asrs	r3, r3, #31
 80028c6:	1ad3      	subs	r3, r2, r3
 80028c8:	b29b      	uxth	r3, r3
 80028ca:	b21b      	sxth	r3, r3
 80028cc:	4618      	mov	r0, r3
 80028ce:	f7fe f97f 	bl	8000bd0 <__aeabi_i2f>
 80028d2:	4603      	mov	r3, r0
 80028d4:	6023      	str	r3, [r4, #0]
	  t=((u16)buffer[4] << 8) | (u16)buffer[5];
	  te=twosCompToDec(t);
	  out[2]=(float)(te/710);
	  break;
    case 0x80:
	  for(i=0; i<2; i++)
 80028d6:	69fb      	ldr	r3, [r7, #28]
 80028d8:	3301      	adds	r3, #1
 80028da:	61fb      	str	r3, [r7, #28]
 80028dc:	69fb      	ldr	r3, [r7, #28]
 80028de:	2b01      	cmp	r3, #1
 80028e0:	ddcc      	ble.n	800287c <getMag+0x214>
	  {
		  t=((u16)buffer[2*i] << 8) | (u16)buffer[2*i+1];
		  te=twosCompToDec(t);
		  out[i]=(float)(te/635);
	  }
	  t=((u16)buffer[4] << 8) | (u16)buffer[5];
 80028e2:	7d3b      	ldrb	r3, [r7, #20]
 80028e4:	021b      	lsls	r3, r3, #8
 80028e6:	b29a      	uxth	r2, r3
 80028e8:	7d7b      	ldrb	r3, [r7, #21]
 80028ea:	4313      	orrs	r3, r2
 80028ec:	b29b      	uxth	r3, r3
 80028ee:	833b      	strh	r3, [r7, #24]
	  te=twosCompToDec(t);
 80028f0:	8b3b      	ldrh	r3, [r7, #24]
 80028f2:	4618      	mov	r0, r3
 80028f4:	f000 f990 	bl	8002c18 <twosCompToDec>
 80028f8:	4603      	mov	r3, r0
 80028fa:	837b      	strh	r3, [r7, #26]
	  out[2]=(float)(te/570);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	f103 0408 	add.w	r4, r3, #8
 8002902:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002906:	4a39      	ldr	r2, [pc, #228]	; (80029ec <getMag+0x384>)
 8002908:	fb82 1203 	smull	r1, r2, r2, r3
 800290c:	441a      	add	r2, r3
 800290e:	1252      	asrs	r2, r2, #9
 8002910:	17db      	asrs	r3, r3, #31
 8002912:	1ad3      	subs	r3, r2, r3
 8002914:	b29b      	uxth	r3, r3
 8002916:	b21b      	sxth	r3, r3
 8002918:	4618      	mov	r0, r3
 800291a:	f7fe f959 	bl	8000bd0 <__aeabi_i2f>
 800291e:	4603      	mov	r3, r0
 8002920:	6023      	str	r3, [r4, #0]
	  break;
 8002922:	e16a      	b.n	8002bfa <getMag+0x592>
    case 0xA0:
	  for(i=0; i<2; i++)
 8002924:	2300      	movs	r3, #0
 8002926:	61fb      	str	r3, [r7, #28]
 8002928:	e02f      	b.n	800298a <getMag+0x322>
	  {
		  t=((u16)buffer[2*i] << 8) | (u16)buffer[2*i+1];
 800292a:	69fb      	ldr	r3, [r7, #28]
 800292c:	005b      	lsls	r3, r3, #1
 800292e:	f107 0220 	add.w	r2, r7, #32
 8002932:	4413      	add	r3, r2
 8002934:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8002938:	021b      	lsls	r3, r3, #8
 800293a:	b29a      	uxth	r2, r3
 800293c:	69fb      	ldr	r3, [r7, #28]
 800293e:	005b      	lsls	r3, r3, #1
 8002940:	3301      	adds	r3, #1
 8002942:	f107 0120 	add.w	r1, r7, #32
 8002946:	440b      	add	r3, r1
 8002948:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800294c:	4313      	orrs	r3, r2
 800294e:	b29b      	uxth	r3, r3
 8002950:	833b      	strh	r3, [r7, #24]
		  te=twosCompToDec(t);
 8002952:	8b3b      	ldrh	r3, [r7, #24]
 8002954:	4618      	mov	r0, r3
 8002956:	f000 f95f 	bl	8002c18 <twosCompToDec>
 800295a:	4603      	mov	r3, r0
 800295c:	837b      	strh	r3, [r7, #26]
		  out[i]=(float)(te/430);
 800295e:	69fb      	ldr	r3, [r7, #28]
 8002960:	009b      	lsls	r3, r3, #2
 8002962:	687a      	ldr	r2, [r7, #4]
 8002964:	18d4      	adds	r4, r2, r3
 8002966:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800296a:	4a21      	ldr	r2, [pc, #132]	; (80029f0 <getMag+0x388>)
 800296c:	fb82 1203 	smull	r1, r2, r2, r3
 8002970:	11d2      	asrs	r2, r2, #7
 8002972:	17db      	asrs	r3, r3, #31
 8002974:	1ad3      	subs	r3, r2, r3
 8002976:	b29b      	uxth	r3, r3
 8002978:	b21b      	sxth	r3, r3
 800297a:	4618      	mov	r0, r3
 800297c:	f7fe f928 	bl	8000bd0 <__aeabi_i2f>
 8002980:	4603      	mov	r3, r0
 8002982:	6023      	str	r3, [r4, #0]
	  t=((u16)buffer[4] << 8) | (u16)buffer[5];
	  te=twosCompToDec(t);
	  out[2]=(float)(te/570);
	  break;
    case 0xA0:
	  for(i=0; i<2; i++)
 8002984:	69fb      	ldr	r3, [r7, #28]
 8002986:	3301      	adds	r3, #1
 8002988:	61fb      	str	r3, [r7, #28]
 800298a:	69fb      	ldr	r3, [r7, #28]
 800298c:	2b01      	cmp	r3, #1
 800298e:	ddcc      	ble.n	800292a <getMag+0x2c2>
	  {
		  t=((u16)buffer[2*i] << 8) | (u16)buffer[2*i+1];
		  te=twosCompToDec(t);
		  out[i]=(float)(te/430);
	  }
	  t=((u16)buffer[4] << 8) | (u16)buffer[5];
 8002990:	7d3b      	ldrb	r3, [r7, #20]
 8002992:	021b      	lsls	r3, r3, #8
 8002994:	b29a      	uxth	r2, r3
 8002996:	7d7b      	ldrb	r3, [r7, #21]
 8002998:	4313      	orrs	r3, r2
 800299a:	b29b      	uxth	r3, r3
 800299c:	833b      	strh	r3, [r7, #24]
	  te=twosCompToDec(t);
 800299e:	8b3b      	ldrh	r3, [r7, #24]
 80029a0:	4618      	mov	r0, r3
 80029a2:	f000 f939 	bl	8002c18 <twosCompToDec>
 80029a6:	4603      	mov	r3, r0
 80029a8:	837b      	strh	r3, [r7, #26]
	  out[2]=(float)(te/385);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	f103 0408 	add.w	r4, r3, #8
 80029b0:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80029b4:	4a0f      	ldr	r2, [pc, #60]	; (80029f4 <getMag+0x38c>)
 80029b6:	fb82 1203 	smull	r1, r2, r2, r3
 80029ba:	11d2      	asrs	r2, r2, #7
 80029bc:	17db      	asrs	r3, r3, #31
 80029be:	1ad3      	subs	r3, r2, r3
 80029c0:	b29b      	uxth	r3, r3
 80029c2:	b21b      	sxth	r3, r3
 80029c4:	4618      	mov	r0, r3
 80029c6:	f7fe f903 	bl	8000bd0 <__aeabi_i2f>
 80029ca:	4603      	mov	r3, r0
 80029cc:	6023      	str	r3, [r4, #0]
	  break;
 80029ce:	e114      	b.n	8002bfa <getMag+0x592>
    case 0xB0:
	  for(i=0; i<2; i++)
 80029d0:	2300      	movs	r3, #0
 80029d2:	61fb      	str	r3, [r7, #28]
 80029d4:	e040      	b.n	8002a58 <getMag+0x3f0>
 80029d6:	bf00      	nop
 80029d8:	7c3d2619 	.word	0x7c3d2619
 80029dc:	44fc3a35 	.word	0x44fc3a35
 80029e0:	a4ded52d 	.word	0xa4ded52d
 80029e4:	5c4de1b7 	.word	0x5c4de1b7
 80029e8:	6734d007 	.word	0x6734d007
 80029ec:	e5f36cb1 	.word	0xe5f36cb1
 80029f0:	4c346405 	.word	0x4c346405
 80029f4:	551c979b 	.word	0x551c979b
	  {
		  t=((u16)buffer[2*i] << 8) | (u16)buffer[2*i+1];
 80029f8:	69fb      	ldr	r3, [r7, #28]
 80029fa:	005b      	lsls	r3, r3, #1
 80029fc:	f107 0220 	add.w	r2, r7, #32
 8002a00:	4413      	add	r3, r2
 8002a02:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8002a06:	021b      	lsls	r3, r3, #8
 8002a08:	b29a      	uxth	r2, r3
 8002a0a:	69fb      	ldr	r3, [r7, #28]
 8002a0c:	005b      	lsls	r3, r3, #1
 8002a0e:	3301      	adds	r3, #1
 8002a10:	f107 0120 	add.w	r1, r7, #32
 8002a14:	440b      	add	r3, r1
 8002a16:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	b29b      	uxth	r3, r3
 8002a1e:	833b      	strh	r3, [r7, #24]
		  te=twosCompToDec(t);
 8002a20:	8b3b      	ldrh	r3, [r7, #24]
 8002a22:	4618      	mov	r0, r3
 8002a24:	f000 f8f8 	bl	8002c18 <twosCompToDec>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	837b      	strh	r3, [r7, #26]
		  out[i]=(float)(te/375);
 8002a2c:	69fb      	ldr	r3, [r7, #28]
 8002a2e:	009b      	lsls	r3, r3, #2
 8002a30:	687a      	ldr	r2, [r7, #4]
 8002a32:	18d4      	adds	r4, r2, r3
 8002a34:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002a38:	4a71      	ldr	r2, [pc, #452]	; (8002c00 <getMag+0x598>)
 8002a3a:	fb82 1203 	smull	r1, r2, r2, r3
 8002a3e:	10d2      	asrs	r2, r2, #3
 8002a40:	17db      	asrs	r3, r3, #31
 8002a42:	1ad3      	subs	r3, r2, r3
 8002a44:	b29b      	uxth	r3, r3
 8002a46:	b21b      	sxth	r3, r3
 8002a48:	4618      	mov	r0, r3
 8002a4a:	f7fe f8c1 	bl	8000bd0 <__aeabi_i2f>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	6023      	str	r3, [r4, #0]
	  t=((u16)buffer[4] << 8) | (u16)buffer[5];
	  te=twosCompToDec(t);
	  out[2]=(float)(te/385);
	  break;
    case 0xB0:
	  for(i=0; i<2; i++)
 8002a52:	69fb      	ldr	r3, [r7, #28]
 8002a54:	3301      	adds	r3, #1
 8002a56:	61fb      	str	r3, [r7, #28]
 8002a58:	69fb      	ldr	r3, [r7, #28]
 8002a5a:	2b01      	cmp	r3, #1
 8002a5c:	ddcc      	ble.n	80029f8 <getMag+0x390>
	  {
		  t=((u16)buffer[2*i] << 8) | (u16)buffer[2*i+1];
		  te=twosCompToDec(t);
		  out[i]=(float)(te/375);
	  }
	  t=((u16)buffer[4] << 8) | (u16)buffer[5];
 8002a5e:	7d3b      	ldrb	r3, [r7, #20]
 8002a60:	021b      	lsls	r3, r3, #8
 8002a62:	b29a      	uxth	r2, r3
 8002a64:	7d7b      	ldrb	r3, [r7, #21]
 8002a66:	4313      	orrs	r3, r2
 8002a68:	b29b      	uxth	r3, r3
 8002a6a:	833b      	strh	r3, [r7, #24]
	  te=twosCompToDec(t);
 8002a6c:	8b3b      	ldrh	r3, [r7, #24]
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f000 f8d2 	bl	8002c18 <twosCompToDec>
 8002a74:	4603      	mov	r3, r0
 8002a76:	837b      	strh	r3, [r7, #26]
	  out[2]=(float)(te/335);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	f103 0408 	add.w	r4, r3, #8
 8002a7e:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002a82:	4a60      	ldr	r2, [pc, #384]	; (8002c04 <getMag+0x59c>)
 8002a84:	fb82 1203 	smull	r1, r2, r2, r3
 8002a88:	441a      	add	r2, r3
 8002a8a:	1212      	asrs	r2, r2, #8
 8002a8c:	17db      	asrs	r3, r3, #31
 8002a8e:	1ad3      	subs	r3, r2, r3
 8002a90:	b29b      	uxth	r3, r3
 8002a92:	b21b      	sxth	r3, r3
 8002a94:	4618      	mov	r0, r3
 8002a96:	f7fe f89b 	bl	8000bd0 <__aeabi_i2f>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	6023      	str	r3, [r4, #0]
	  break;
 8002a9e:	e0ac      	b.n	8002bfa <getMag+0x592>
    case 0xC0:
	  for(i=0; i<2; i++)
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	61fb      	str	r3, [r7, #28]
 8002aa4:	e02f      	b.n	8002b06 <getMag+0x49e>
	  {
		  t=((u16)buffer[2*i] << 8) |(u16) buffer[2*i+1];
 8002aa6:	69fb      	ldr	r3, [r7, #28]
 8002aa8:	005b      	lsls	r3, r3, #1
 8002aaa:	f107 0220 	add.w	r2, r7, #32
 8002aae:	4413      	add	r3, r2
 8002ab0:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8002ab4:	021b      	lsls	r3, r3, #8
 8002ab6:	b29a      	uxth	r2, r3
 8002ab8:	69fb      	ldr	r3, [r7, #28]
 8002aba:	005b      	lsls	r3, r3, #1
 8002abc:	3301      	adds	r3, #1
 8002abe:	f107 0120 	add.w	r1, r7, #32
 8002ac2:	440b      	add	r3, r1
 8002ac4:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	b29b      	uxth	r3, r3
 8002acc:	833b      	strh	r3, [r7, #24]
		  te=twosCompToDec(t);
 8002ace:	8b3b      	ldrh	r3, [r7, #24]
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	f000 f8a1 	bl	8002c18 <twosCompToDec>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	837b      	strh	r3, [r7, #26]
		  out[i]=(float)(te/320);
 8002ada:	69fb      	ldr	r3, [r7, #28]
 8002adc:	009b      	lsls	r3, r3, #2
 8002ade:	687a      	ldr	r2, [r7, #4]
 8002ae0:	18d4      	adds	r4, r2, r3
 8002ae2:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002ae6:	4a48      	ldr	r2, [pc, #288]	; (8002c08 <getMag+0x5a0>)
 8002ae8:	fb82 1203 	smull	r1, r2, r2, r3
 8002aec:	11d2      	asrs	r2, r2, #7
 8002aee:	17db      	asrs	r3, r3, #31
 8002af0:	1ad3      	subs	r3, r2, r3
 8002af2:	b29b      	uxth	r3, r3
 8002af4:	b21b      	sxth	r3, r3
 8002af6:	4618      	mov	r0, r3
 8002af8:	f7fe f86a 	bl	8000bd0 <__aeabi_i2f>
 8002afc:	4603      	mov	r3, r0
 8002afe:	6023      	str	r3, [r4, #0]
	  t=((u16)buffer[4] << 8) | (u16)buffer[5];
	  te=twosCompToDec(t);
	  out[2]=(float)(te/335);
	  break;
    case 0xC0:
	  for(i=0; i<2; i++)
 8002b00:	69fb      	ldr	r3, [r7, #28]
 8002b02:	3301      	adds	r3, #1
 8002b04:	61fb      	str	r3, [r7, #28]
 8002b06:	69fb      	ldr	r3, [r7, #28]
 8002b08:	2b01      	cmp	r3, #1
 8002b0a:	ddcc      	ble.n	8002aa6 <getMag+0x43e>
	  {
		  t=((u16)buffer[2*i] << 8) |(u16) buffer[2*i+1];
		  te=twosCompToDec(t);
		  out[i]=(float)(te/320);
	  }
	  t=((u16)buffer[4] << 8) | (u16)buffer[5];
 8002b0c:	7d3b      	ldrb	r3, [r7, #20]
 8002b0e:	021b      	lsls	r3, r3, #8
 8002b10:	b29a      	uxth	r2, r3
 8002b12:	7d7b      	ldrb	r3, [r7, #21]
 8002b14:	4313      	orrs	r3, r2
 8002b16:	b29b      	uxth	r3, r3
 8002b18:	833b      	strh	r3, [r7, #24]
	  te=twosCompToDec(t);
 8002b1a:	8b3b      	ldrh	r3, [r7, #24]
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	f000 f87b 	bl	8002c18 <twosCompToDec>
 8002b22:	4603      	mov	r3, r0
 8002b24:	837b      	strh	r3, [r7, #26]
	  out[2]=(float)(te/285);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	f103 0408 	add.w	r4, r3, #8
 8002b2c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002b30:	4a36      	ldr	r2, [pc, #216]	; (8002c0c <getMag+0x5a4>)
 8002b32:	fb82 1203 	smull	r1, r2, r2, r3
 8002b36:	441a      	add	r2, r3
 8002b38:	1212      	asrs	r2, r2, #8
 8002b3a:	17db      	asrs	r3, r3, #31
 8002b3c:	1ad3      	subs	r3, r2, r3
 8002b3e:	b29b      	uxth	r3, r3
 8002b40:	b21b      	sxth	r3, r3
 8002b42:	4618      	mov	r0, r3
 8002b44:	f7fe f844 	bl	8000bd0 <__aeabi_i2f>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	6023      	str	r3, [r4, #0]
	  break;
 8002b4c:	e055      	b.n	8002bfa <getMag+0x592>
    case 0xE0:
	  for(i=0; i<2; i++)
 8002b4e:	2300      	movs	r3, #0
 8002b50:	61fb      	str	r3, [r7, #28]
 8002b52:	e02f      	b.n	8002bb4 <getMag+0x54c>
	  {
		  t=(((u16)buffer[2*i] << 8) | (u16)buffer[2*i+1]);
 8002b54:	69fb      	ldr	r3, [r7, #28]
 8002b56:	005b      	lsls	r3, r3, #1
 8002b58:	f107 0220 	add.w	r2, r7, #32
 8002b5c:	4413      	add	r3, r2
 8002b5e:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8002b62:	021b      	lsls	r3, r3, #8
 8002b64:	b29a      	uxth	r2, r3
 8002b66:	69fb      	ldr	r3, [r7, #28]
 8002b68:	005b      	lsls	r3, r3, #1
 8002b6a:	3301      	adds	r3, #1
 8002b6c:	f107 0120 	add.w	r1, r7, #32
 8002b70:	440b      	add	r3, r1
 8002b72:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8002b76:	4313      	orrs	r3, r2
 8002b78:	b29b      	uxth	r3, r3
 8002b7a:	833b      	strh	r3, [r7, #24]
		  te=twosCompToDec(t);
 8002b7c:	8b3b      	ldrh	r3, [r7, #24]
 8002b7e:	4618      	mov	r0, r3
 8002b80:	f000 f84a 	bl	8002c18 <twosCompToDec>
 8002b84:	4603      	mov	r3, r0
 8002b86:	837b      	strh	r3, [r7, #26]
		  out[i]=(float)(te/230);
 8002b88:	69fb      	ldr	r3, [r7, #28]
 8002b8a:	009b      	lsls	r3, r3, #2
 8002b8c:	687a      	ldr	r2, [r7, #4]
 8002b8e:	18d4      	adds	r4, r2, r3
 8002b90:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002b94:	4a1e      	ldr	r2, [pc, #120]	; (8002c10 <getMag+0x5a8>)
 8002b96:	fb82 1203 	smull	r1, r2, r2, r3
 8002b9a:	1192      	asrs	r2, r2, #6
 8002b9c:	17db      	asrs	r3, r3, #31
 8002b9e:	1ad3      	subs	r3, r2, r3
 8002ba0:	b29b      	uxth	r3, r3
 8002ba2:	b21b      	sxth	r3, r3
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	f7fe f813 	bl	8000bd0 <__aeabi_i2f>
 8002baa:	4603      	mov	r3, r0
 8002bac:	6023      	str	r3, [r4, #0]
	  t=((u16)buffer[4] << 8) | (u16)buffer[5];
	  te=twosCompToDec(t);
	  out[2]=(float)(te/285);
	  break;
    case 0xE0:
	  for(i=0; i<2; i++)
 8002bae:	69fb      	ldr	r3, [r7, #28]
 8002bb0:	3301      	adds	r3, #1
 8002bb2:	61fb      	str	r3, [r7, #28]
 8002bb4:	69fb      	ldr	r3, [r7, #28]
 8002bb6:	2b01      	cmp	r3, #1
 8002bb8:	ddcc      	ble.n	8002b54 <getMag+0x4ec>
	  {
		  t=(((u16)buffer[2*i] << 8) | (u16)buffer[2*i+1]);
		  te=twosCompToDec(t);
		  out[i]=(float)(te/230);
	  }
	  t=((u16)buffer[4] << 8) | (u16)buffer[5];
 8002bba:	7d3b      	ldrb	r3, [r7, #20]
 8002bbc:	021b      	lsls	r3, r3, #8
 8002bbe:	b29a      	uxth	r2, r3
 8002bc0:	7d7b      	ldrb	r3, [r7, #21]
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	b29b      	uxth	r3, r3
 8002bc6:	833b      	strh	r3, [r7, #24]
	  te=twosCompToDec(t);
 8002bc8:	8b3b      	ldrh	r3, [r7, #24]
 8002bca:	4618      	mov	r0, r3
 8002bcc:	f000 f824 	bl	8002c18 <twosCompToDec>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	837b      	strh	r3, [r7, #26]
	  out[2]=(float)(te/205);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	f103 0408 	add.w	r4, r3, #8
 8002bda:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002bde:	4a0d      	ldr	r2, [pc, #52]	; (8002c14 <getMag+0x5ac>)
 8002be0:	fb82 1203 	smull	r1, r2, r2, r3
 8002be4:	1192      	asrs	r2, r2, #6
 8002be6:	17db      	asrs	r3, r3, #31
 8002be8:	1ad3      	subs	r3, r2, r3
 8002bea:	b29b      	uxth	r3, r3
 8002bec:	b21b      	sxth	r3, r3
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f7fd ffee 	bl	8000bd0 <__aeabi_i2f>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	6023      	str	r3, [r4, #0]
	  break;
 8002bf8:	bf00      	nop
    }
}
 8002bfa:	3724      	adds	r7, #36	; 0x24
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bd90      	pop	{r4, r7, pc}
 8002c00:	057619f1 	.word	0x057619f1
 8002c04:	c3a13de7 	.word	0xc3a13de7
 8002c08:	66666667 	.word	0x66666667
 8002c0c:	e5f36cb1 	.word	0xe5f36cb1
 8002c10:	473c1ab7 	.word	0x473c1ab7
 8002c14:	4fec04ff 	.word	0x4fec04ff

08002c18 <twosCompToDec>:
s16 twosCompToDec(u16 val)//for 16 bit
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b085      	sub	sp, #20
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	4603      	mov	r3, r0
 8002c20:	80fb      	strh	r3, [r7, #6]
	u16 v=val;
 8002c22:	88fb      	ldrh	r3, [r7, #6]
 8002c24:	81bb      	strh	r3, [r7, #12]
	s16 temp=0;
 8002c26:	2300      	movs	r3, #0
 8002c28:	81fb      	strh	r3, [r7, #14]
	if((v & 0b1000000000000000)==0b1000000000000000)
 8002c2a:	89bb      	ldrh	r3, [r7, #12]
 8002c2c:	b21b      	sxth	r3, r3
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	da02      	bge.n	8002c38 <twosCompToDec+0x20>
	{
		temp=-32768;
 8002c32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002c36:	81fb      	strh	r3, [r7, #14]
	}
	if((v & 0b0000000000000001)==0b0000000000000001)
 8002c38:	89bb      	ldrh	r3, [r7, #12]
 8002c3a:	f003 0301 	and.w	r3, r3, #1
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d003      	beq.n	8002c4a <twosCompToDec+0x32>
	{
		temp=temp+1;
 8002c42:	89fb      	ldrh	r3, [r7, #14]
 8002c44:	3301      	adds	r3, #1
 8002c46:	b29b      	uxth	r3, r3
 8002c48:	81fb      	strh	r3, [r7, #14]
	}
	if((v & 0b0000000000000010)==0b0000000000000010)
 8002c4a:	89bb      	ldrh	r3, [r7, #12]
 8002c4c:	f003 0302 	and.w	r3, r3, #2
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d003      	beq.n	8002c5c <twosCompToDec+0x44>
	{
		temp=temp+2;
 8002c54:	89fb      	ldrh	r3, [r7, #14]
 8002c56:	3302      	adds	r3, #2
 8002c58:	b29b      	uxth	r3, r3
 8002c5a:	81fb      	strh	r3, [r7, #14]
	}
	if((v & 0b0000000000000100)==0b0000000000000100)
 8002c5c:	89bb      	ldrh	r3, [r7, #12]
 8002c5e:	f003 0304 	and.w	r3, r3, #4
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d003      	beq.n	8002c6e <twosCompToDec+0x56>
	{
		temp=temp+4;
 8002c66:	89fb      	ldrh	r3, [r7, #14]
 8002c68:	3304      	adds	r3, #4
 8002c6a:	b29b      	uxth	r3, r3
 8002c6c:	81fb      	strh	r3, [r7, #14]
	}
	if((v & 0b0000000000001000)==0b0000000000001000)
 8002c6e:	89bb      	ldrh	r3, [r7, #12]
 8002c70:	f003 0308 	and.w	r3, r3, #8
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d003      	beq.n	8002c80 <twosCompToDec+0x68>
	{
		temp=temp+8;
 8002c78:	89fb      	ldrh	r3, [r7, #14]
 8002c7a:	3308      	adds	r3, #8
 8002c7c:	b29b      	uxth	r3, r3
 8002c7e:	81fb      	strh	r3, [r7, #14]
	}
	if((v & 0b0000000000010000)==0b0000000000010000)
 8002c80:	89bb      	ldrh	r3, [r7, #12]
 8002c82:	f003 0310 	and.w	r3, r3, #16
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d003      	beq.n	8002c92 <twosCompToDec+0x7a>
	{
		temp=temp+16;
 8002c8a:	89fb      	ldrh	r3, [r7, #14]
 8002c8c:	3310      	adds	r3, #16
 8002c8e:	b29b      	uxth	r3, r3
 8002c90:	81fb      	strh	r3, [r7, #14]
	}
	if((v & 0b0000000000100000)==0b0000000000100000)
 8002c92:	89bb      	ldrh	r3, [r7, #12]
 8002c94:	f003 0320 	and.w	r3, r3, #32
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d003      	beq.n	8002ca4 <twosCompToDec+0x8c>
	{
		temp=temp+32;
 8002c9c:	89fb      	ldrh	r3, [r7, #14]
 8002c9e:	3320      	adds	r3, #32
 8002ca0:	b29b      	uxth	r3, r3
 8002ca2:	81fb      	strh	r3, [r7, #14]
	}
	if((v & 0b0000000001000000)==0b0000000001000000)
 8002ca4:	89bb      	ldrh	r3, [r7, #12]
 8002ca6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d003      	beq.n	8002cb6 <twosCompToDec+0x9e>
	{
		temp=temp+64;
 8002cae:	89fb      	ldrh	r3, [r7, #14]
 8002cb0:	3340      	adds	r3, #64	; 0x40
 8002cb2:	b29b      	uxth	r3, r3
 8002cb4:	81fb      	strh	r3, [r7, #14]
	}
	if((v & 0b0000000010000000)==0b0000000010000000)
 8002cb6:	89bb      	ldrh	r3, [r7, #12]
 8002cb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d003      	beq.n	8002cc8 <twosCompToDec+0xb0>
	{
		temp=temp+128;
 8002cc0:	89fb      	ldrh	r3, [r7, #14]
 8002cc2:	3380      	adds	r3, #128	; 0x80
 8002cc4:	b29b      	uxth	r3, r3
 8002cc6:	81fb      	strh	r3, [r7, #14]
	}
	if((v & 0b0000000100000000)==0b0000000100000000)
 8002cc8:	89bb      	ldrh	r3, [r7, #12]
 8002cca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d004      	beq.n	8002cdc <twosCompToDec+0xc4>
	{
		temp=temp+256;
 8002cd2:	89fb      	ldrh	r3, [r7, #14]
 8002cd4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002cd8:	b29b      	uxth	r3, r3
 8002cda:	81fb      	strh	r3, [r7, #14]
	}
	if((v & 0b0000001000000000)==0b0000001000000000)
 8002cdc:	89bb      	ldrh	r3, [r7, #12]
 8002cde:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d004      	beq.n	8002cf0 <twosCompToDec+0xd8>
	{
		temp=temp+512;
 8002ce6:	89fb      	ldrh	r3, [r7, #14]
 8002ce8:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002cec:	b29b      	uxth	r3, r3
 8002cee:	81fb      	strh	r3, [r7, #14]
	}
	if((v & 0b0000010000000000)==0b0000010000000000)
 8002cf0:	89bb      	ldrh	r3, [r7, #12]
 8002cf2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d004      	beq.n	8002d04 <twosCompToDec+0xec>
	{
		temp=temp+1024;
 8002cfa:	89fb      	ldrh	r3, [r7, #14]
 8002cfc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002d00:	b29b      	uxth	r3, r3
 8002d02:	81fb      	strh	r3, [r7, #14]
	}
	if((v & 0b0000100000000000)==0b0000100000000000)
 8002d04:	89bb      	ldrh	r3, [r7, #12]
 8002d06:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d004      	beq.n	8002d18 <twosCompToDec+0x100>
	{
		temp=temp+2048;
 8002d0e:	89fb      	ldrh	r3, [r7, #14]
 8002d10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d14:	b29b      	uxth	r3, r3
 8002d16:	81fb      	strh	r3, [r7, #14]
	}
	if((v & 0b0001000000000000)==0b0001000000000000)
 8002d18:	89bb      	ldrh	r3, [r7, #12]
 8002d1a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d004      	beq.n	8002d2c <twosCompToDec+0x114>
	{
		temp=temp+4096;
 8002d22:	89fb      	ldrh	r3, [r7, #14]
 8002d24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d28:	b29b      	uxth	r3, r3
 8002d2a:	81fb      	strh	r3, [r7, #14]
	}
	if((v & 0b0010000000000000)==0b0010000000000000)
 8002d2c:	89bb      	ldrh	r3, [r7, #12]
 8002d2e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d004      	beq.n	8002d40 <twosCompToDec+0x128>
	{
		temp=temp+8192;
 8002d36:	89fb      	ldrh	r3, [r7, #14]
 8002d38:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8002d3c:	b29b      	uxth	r3, r3
 8002d3e:	81fb      	strh	r3, [r7, #14]
	}
	if((v & 0b0100000000000000)==0b0100000000000000)
 8002d40:	89bb      	ldrh	r3, [r7, #12]
 8002d42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d004      	beq.n	8002d54 <twosCompToDec+0x13c>
	{
		temp=temp+16384;
 8002d4a:	89fb      	ldrh	r3, [r7, #14]
 8002d4c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8002d50:	b29b      	uxth	r3, r3
 8002d52:	81fb      	strh	r3, [r7, #14]
	}

	return (s16)temp;
 8002d54:	89fb      	ldrh	r3, [r7, #14]
 8002d56:	b21b      	sxth	r3, r3
}
 8002d58:	4618      	mov	r0, r3
 8002d5a:	3714      	adds	r7, #20
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d62:	4770      	bx	lr

08002d64 <USART_Init>:
  *         that contains the configuration information for the specified USART 
  *         peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b08c      	sub	sp, #48	; 0x30
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
 8002d6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d72:	2300      	movs	r3, #0
 8002d74:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t integerdivider = 0x00;
 8002d76:	2300      	movs	r3, #0
 8002d78:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t fractionaldivider = 0x00;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	623b      	str	r3, [r7, #32]
  uint32_t usartxbase = 0;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	61fb      	str	r3, [r7, #28]
  if (USART_InitStruct->USART_HardwareFlowControl != USART_HardwareFlowControl_None)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  usartxbase = (uint32_t)USARTx;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	61fb      	str	r3, [r7, #28]

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	8a1b      	ldrh	r3, [r3, #16]
 8002d8a:	b29b      	uxth	r3, r3
 8002d8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear STOP[13:12] bits */
  tmpreg &= CR2_STOP_CLEAR_Mask;
 8002d8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d90:	f64c 73ff 	movw	r3, #53247	; 0xcfff
 8002d94:	4013      	ands	r3, r2
 8002d96:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	88db      	ldrh	r3, [r3, #6]
 8002d9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8002da2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002da4:	b29a      	uxth	r2, r3
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	899b      	ldrh	r3, [r3, #12]
 8002dae:	b29b      	uxth	r3, r3
 8002db0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= CR1_CLEAR_Mask;
 8002db2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002db4:	f64e 13f3 	movw	r3, #59891	; 0xe9f3
 8002db8:	4013      	ands	r3, r2
 8002dba:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	889a      	ldrh	r2, [r3, #4]
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	891b      	ldrh	r3, [r3, #8]
 8002dc4:	4313      	orrs	r3, r2
 8002dc6:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	895b      	ldrh	r3, [r3, #10]
  tmpreg &= CR1_CLEAR_Mask;
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	b29b      	uxth	r3, r3
 8002dd0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	62fb      	str	r3, [r7, #44]	; 0x2c
            USART_InitStruct->USART_Mode;
  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 8002dd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dd8:	b29a      	uxth	r2, r3
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	8a9b      	ldrh	r3, [r3, #20]
 8002de2:	b29b      	uxth	r3, r3
 8002de4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear CTSE and RTSE bits */
  tmpreg &= CR3_CLEAR_Mask;
 8002de6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002de8:	f64f 43ff 	movw	r3, #64767	; 0xfcff
 8002dec:	4013      	ands	r3, r2
 8002dee:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	899b      	ldrh	r3, [r3, #12]
 8002df4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002df6:	4313      	orrs	r3, r2
 8002df8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 8002dfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dfc:	b29a      	uxth	r2, r3
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 8002e02:	f107 0308 	add.w	r3, r7, #8
 8002e06:	4618      	mov	r0, r3
 8002e08:	f000 fbc0 	bl	800358c <RCC_GetClocksFreq>
  if (usartxbase == USART1_BASE)
 8002e0c:	69fa      	ldr	r2, [r7, #28]
 8002e0e:	4b30      	ldr	r3, [pc, #192]	; (8002ed0 <USART_Init+0x16c>)
 8002e10:	429a      	cmp	r2, r3
 8002e12:	d102      	bne.n	8002e1a <USART_Init+0xb6>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e18:	e001      	b.n	8002e1e <USART_Init+0xba>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 8002e1a:	693b      	ldr	r3, [r7, #16]
 8002e1c:	62bb      	str	r3, [r7, #40]	; 0x28
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	899b      	ldrh	r3, [r3, #12]
 8002e22:	b29b      	uxth	r3, r3
 8002e24:	b29b      	uxth	r3, r3
 8002e26:	b21b      	sxth	r3, r3
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	da0c      	bge.n	8002e46 <USART_Init+0xe2>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 8002e2c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e2e:	4613      	mov	r3, r2
 8002e30:	009b      	lsls	r3, r3, #2
 8002e32:	4413      	add	r3, r2
 8002e34:	009a      	lsls	r2, r3, #2
 8002e36:	441a      	add	r2, r3
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	005b      	lsls	r3, r3, #1
 8002e3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e42:	627b      	str	r3, [r7, #36]	; 0x24
 8002e44:	e00b      	b.n	8002e5e <USART_Init+0xfa>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 8002e46:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e48:	4613      	mov	r3, r2
 8002e4a:	009b      	lsls	r3, r3, #2
 8002e4c:	4413      	add	r3, r2
 8002e4e:	009a      	lsls	r2, r3, #2
 8002e50:	441a      	add	r2, r3
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	009b      	lsls	r3, r3, #2
 8002e58:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e5c:	627b      	str	r3, [r7, #36]	; 0x24
  }
  tmpreg = (integerdivider / 100) << 4;
 8002e5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e60:	4b1c      	ldr	r3, [pc, #112]	; (8002ed4 <USART_Init+0x170>)
 8002e62:	fba3 1302 	umull	r1, r3, r3, r2
 8002e66:	095b      	lsrs	r3, r3, #5
 8002e68:	011b      	lsls	r3, r3, #4
 8002e6a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 8002e6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e6e:	091b      	lsrs	r3, r3, #4
 8002e70:	2264      	movs	r2, #100	; 0x64
 8002e72:	fb02 f303 	mul.w	r3, r2, r3
 8002e76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e78:	1ad3      	subs	r3, r2, r3
 8002e7a:	623b      	str	r3, [r7, #32]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	899b      	ldrh	r3, [r3, #12]
 8002e80:	b29b      	uxth	r3, r3
 8002e82:	b29b      	uxth	r3, r3
 8002e84:	b21b      	sxth	r3, r3
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	da0d      	bge.n	8002ea6 <USART_Init+0x142>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 8002e8a:	6a3b      	ldr	r3, [r7, #32]
 8002e8c:	00db      	lsls	r3, r3, #3
 8002e8e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002e92:	4b10      	ldr	r3, [pc, #64]	; (8002ed4 <USART_Init+0x170>)
 8002e94:	fba3 1302 	umull	r1, r3, r3, r2
 8002e98:	095b      	lsrs	r3, r3, #5
 8002e9a:	f003 0307 	and.w	r3, r3, #7
 8002e9e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ea4:	e00c      	b.n	8002ec0 <USART_Init+0x15c>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 8002ea6:	6a3b      	ldr	r3, [r7, #32]
 8002ea8:	011b      	lsls	r3, r3, #4
 8002eaa:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002eae:	4b09      	ldr	r3, [pc, #36]	; (8002ed4 <USART_Init+0x170>)
 8002eb0:	fba3 1302 	umull	r1, r3, r3, r2
 8002eb4:	095b      	lsrs	r3, r3, #5
 8002eb6:	f003 030f 	and.w	r3, r3, #15
 8002eba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  
  /* Write to USART BRR */
  USARTx->BRR = (uint16_t)tmpreg;
 8002ec0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ec2:	b29a      	uxth	r2, r3
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	811a      	strh	r2, [r3, #8]
}
 8002ec8:	3730      	adds	r7, #48	; 0x30
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}
 8002ece:	bf00      	nop
 8002ed0:	40013800 	.word	0x40013800
 8002ed4:	51eb851f 	.word	0x51eb851f

08002ed8 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	b083      	sub	sp, #12
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
 8002ee0:	460b      	mov	r3, r1
 8002ee2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8002ee4:	78fb      	ldrb	r3, [r7, #3]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d008      	beq.n	8002efc <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= CR1_UE_Set;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	899b      	ldrh	r3, [r3, #12]
 8002eee:	b29b      	uxth	r3, r3
 8002ef0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002ef4:	b29a      	uxth	r2, r3
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	819a      	strh	r2, [r3, #12]
 8002efa:	e007      	b.n	8002f0c <USART_Cmd+0x34>
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= CR1_UE_Reset;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	899b      	ldrh	r3, [r3, #12]
 8002f00:	b29b      	uxth	r3, r3
 8002f02:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002f06:	b29a      	uxth	r2, r3
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	819a      	strh	r2, [r3, #12]
  }
}
 8002f0c:	370c      	adds	r7, #12
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f14:	4770      	bx	lr
 8002f16:	bf00      	nop

08002f18 <USART_DMACmd>:
  * @note The DMA mode is not available for UART5 except in the STM32
  *       High density value line devices(STM32F10X_HD_VL).  
  * @retval None
  */
void USART_DMACmd(USART_TypeDef* USARTx, uint16_t USART_DMAReq, FunctionalState NewState)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b083      	sub	sp, #12
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
 8002f20:	4613      	mov	r3, r2
 8002f22:	460a      	mov	r2, r1
 8002f24:	807a      	strh	r2, [r7, #2]
 8002f26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DMAREQ(USART_DMAReq));  
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  if (NewState != DISABLE)
 8002f28:	787b      	ldrb	r3, [r7, #1]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d008      	beq.n	8002f40 <USART_DMACmd+0x28>
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	8a9b      	ldrh	r3, [r3, #20]
 8002f32:	b29a      	uxth	r2, r3
 8002f34:	887b      	ldrh	r3, [r7, #2]
 8002f36:	4313      	orrs	r3, r2
 8002f38:	b29a      	uxth	r2, r3
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	829a      	strh	r2, [r3, #20]
 8002f3e:	e009      	b.n	8002f54 <USART_DMACmd+0x3c>
  }
  else
  {
    /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 &= (uint16_t)~USART_DMAReq;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	8a9b      	ldrh	r3, [r3, #20]
 8002f44:	b29a      	uxth	r2, r3
 8002f46:	887b      	ldrh	r3, [r7, #2]
 8002f48:	43db      	mvns	r3, r3
 8002f4a:	b29b      	uxth	r3, r3
 8002f4c:	4013      	ands	r3, r2
 8002f4e:	b29a      	uxth	r2, r3
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	829a      	strh	r2, [r3, #20]
  }
}
 8002f54:	370c      	adds	r7, #12
 8002f56:	46bd      	mov	sp, r7
 8002f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5c:	4770      	bx	lr
 8002f5e:	bf00      	nop

08002f60 <USART_ReceiveData>:
  *   This parameter can be one of the following values:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
 8002f60:	b480      	push	{r7}
 8002f62:	b083      	sub	sp, #12
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	889b      	ldrh	r3, [r3, #4]
 8002f6c:	b29b      	uxth	r3, r3
 8002f6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f72:	b29b      	uxth	r3, r3
}
 8002f74:	4618      	mov	r0, r3
 8002f76:	370c      	adds	r7, #12
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7e:	4770      	bx	lr

08002f80 <USART_GetFlagStatus>:
  *     @arg USART_FLAG_FE:   Framing Error flag
  *     @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 8002f80:	b480      	push	{r7}
 8002f82:	b085      	sub	sp, #20
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
 8002f88:	460b      	mov	r3, r1
 8002f8a:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }  
  
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	881b      	ldrh	r3, [r3, #0]
 8002f94:	b29a      	uxth	r2, r3
 8002f96:	887b      	ldrh	r3, [r7, #2]
 8002f98:	4013      	ands	r3, r2
 8002f9a:	b29b      	uxth	r3, r3
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d002      	beq.n	8002fa6 <USART_GetFlagStatus+0x26>
  {
    bitstatus = SET;
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	73fb      	strb	r3, [r7, #15]
 8002fa4:	e001      	b.n	8002faa <USART_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002faa:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fac:	4618      	mov	r0, r3
 8002fae:	3714      	adds	r7, #20
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb6:	4770      	bx	lr

08002fb8 <USART_ClearFlag>:
  *   - TXE flag is cleared only by a write to the USART_DR register 
  *     (USART_SendData()).
  * @retval None
  */
void USART_ClearFlag(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b083      	sub	sp, #12
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
 8002fc0:	460b      	mov	r3, r1
 8002fc2:	807b      	strh	r3, [r7, #2]
  if ((USART_FLAG & USART_FLAG_CTS) == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  } 
   
  USARTx->SR = (uint16_t)~USART_FLAG;
 8002fc4:	887b      	ldrh	r3, [r7, #2]
 8002fc6:	43db      	mvns	r3, r3
 8002fc8:	b29a      	uxth	r2, r3
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	801a      	strh	r2, [r3, #0]
}
 8002fce:	370c      	adds	r7, #12
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd6:	4770      	bx	lr

08002fd8 <TIM_TimeBaseInit>:
  *         structure that contains the configuration information for the 
  *         specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b085      	sub	sp, #20
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
 8002fe0:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	881b      	ldrh	r3, [r3, #0]
 8002fea:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM2) || (TIMx == TIM3)||
 8002fec:	687a      	ldr	r2, [r7, #4]
 8002fee:	4b2e      	ldr	r3, [pc, #184]	; (80030a8 <TIM_TimeBaseInit+0xd0>)
 8002ff0:	429a      	cmp	r2, r3
 8002ff2:	d013      	beq.n	800301c <TIM_TimeBaseInit+0x44>
 8002ff4:	687a      	ldr	r2, [r7, #4]
 8002ff6:	4b2d      	ldr	r3, [pc, #180]	; (80030ac <TIM_TimeBaseInit+0xd4>)
 8002ff8:	429a      	cmp	r2, r3
 8002ffa:	d00f      	beq.n	800301c <TIM_TimeBaseInit+0x44>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003002:	d00b      	beq.n	800301c <TIM_TimeBaseInit+0x44>
 8003004:	687a      	ldr	r2, [r7, #4]
 8003006:	4b2a      	ldr	r3, [pc, #168]	; (80030b0 <TIM_TimeBaseInit+0xd8>)
 8003008:	429a      	cmp	r2, r3
 800300a:	d007      	beq.n	800301c <TIM_TimeBaseInit+0x44>
 800300c:	687a      	ldr	r2, [r7, #4]
 800300e:	4b29      	ldr	r3, [pc, #164]	; (80030b4 <TIM_TimeBaseInit+0xdc>)
 8003010:	429a      	cmp	r2, r3
 8003012:	d003      	beq.n	800301c <TIM_TimeBaseInit+0x44>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 8003014:	687a      	ldr	r2, [r7, #4]
 8003016:	4b28      	ldr	r3, [pc, #160]	; (80030b8 <TIM_TimeBaseInit+0xe0>)
 8003018:	429a      	cmp	r2, r3
 800301a:	d108      	bne.n	800302e <TIM_TimeBaseInit+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~((uint16_t)(TIM_CR1_DIR | TIM_CR1_CMS)));
 800301c:	89fb      	ldrh	r3, [r7, #14]
 800301e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003022:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	885a      	ldrh	r2, [r3, #2]
 8003028:	89fb      	ldrh	r3, [r7, #14]
 800302a:	4313      	orrs	r3, r2
 800302c:	81fb      	strh	r3, [r7, #14]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 800302e:	687a      	ldr	r2, [r7, #4]
 8003030:	4b22      	ldr	r3, [pc, #136]	; (80030bc <TIM_TimeBaseInit+0xe4>)
 8003032:	429a      	cmp	r2, r3
 8003034:	d00c      	beq.n	8003050 <TIM_TimeBaseInit+0x78>
 8003036:	687a      	ldr	r2, [r7, #4]
 8003038:	4b21      	ldr	r3, [pc, #132]	; (80030c0 <TIM_TimeBaseInit+0xe8>)
 800303a:	429a      	cmp	r2, r3
 800303c:	d008      	beq.n	8003050 <TIM_TimeBaseInit+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= (uint16_t)(~((uint16_t)TIM_CR1_CKD));
 800303e:	89fb      	ldrh	r3, [r7, #14]
 8003040:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003044:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	88da      	ldrh	r2, [r3, #6]
 800304a:	89fb      	ldrh	r3, [r7, #14]
 800304c:	4313      	orrs	r3, r2
 800304e:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	89fa      	ldrh	r2, [r7, #14]
 8003054:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	889a      	ldrh	r2, [r3, #4]
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	859a      	strh	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	881a      	ldrh	r2, [r3, #0]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	851a      	strh	r2, [r3, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15)|| (TIMx == TIM16) || (TIMx == TIM17))  
 8003066:	687a      	ldr	r2, [r7, #4]
 8003068:	4b0f      	ldr	r3, [pc, #60]	; (80030a8 <TIM_TimeBaseInit+0xd0>)
 800306a:	429a      	cmp	r2, r3
 800306c:	d00f      	beq.n	800308e <TIM_TimeBaseInit+0xb6>
 800306e:	687a      	ldr	r2, [r7, #4]
 8003070:	4b0e      	ldr	r3, [pc, #56]	; (80030ac <TIM_TimeBaseInit+0xd4>)
 8003072:	429a      	cmp	r2, r3
 8003074:	d00b      	beq.n	800308e <TIM_TimeBaseInit+0xb6>
 8003076:	687a      	ldr	r2, [r7, #4]
 8003078:	4b12      	ldr	r3, [pc, #72]	; (80030c4 <TIM_TimeBaseInit+0xec>)
 800307a:	429a      	cmp	r2, r3
 800307c:	d007      	beq.n	800308e <TIM_TimeBaseInit+0xb6>
 800307e:	687a      	ldr	r2, [r7, #4]
 8003080:	4b11      	ldr	r3, [pc, #68]	; (80030c8 <TIM_TimeBaseInit+0xf0>)
 8003082:	429a      	cmp	r2, r3
 8003084:	d003      	beq.n	800308e <TIM_TimeBaseInit+0xb6>
 8003086:	687a      	ldr	r2, [r7, #4]
 8003088:	4b10      	ldr	r3, [pc, #64]	; (80030cc <TIM_TimeBaseInit+0xf4>)
 800308a:	429a      	cmp	r2, r3
 800308c:	d104      	bne.n	8003098 <TIM_TimeBaseInit+0xc0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	7a1b      	ldrb	r3, [r3, #8]
 8003092:	461a      	mov	r2, r3
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler and the Repetition counter
     values immediately */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;           
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2201      	movs	r2, #1
 800309c:	829a      	strh	r2, [r3, #20]
}
 800309e:	3714      	adds	r7, #20
 80030a0:	46bd      	mov	sp, r7
 80030a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a6:	4770      	bx	lr
 80030a8:	40012c00 	.word	0x40012c00
 80030ac:	40013400 	.word	0x40013400
 80030b0:	40000400 	.word	0x40000400
 80030b4:	40000800 	.word	0x40000800
 80030b8:	40000c00 	.word	0x40000c00
 80030bc:	40001000 	.word	0x40001000
 80030c0:	40001400 	.word	0x40001400
 80030c4:	40014000 	.word	0x40014000
 80030c8:	40014400 	.word	0x40014400
 80030cc:	40014800 	.word	0x40014800

080030d0 <TIM_OC1Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC1Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 80030d0:	b480      	push	{r7}
 80030d2:	b085      	sub	sp, #20
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
 80030d8:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 80030da:	2300      	movs	r3, #0
 80030dc:	817b      	strh	r3, [r7, #10]
 80030de:	2300      	movs	r3, #0
 80030e0:	81fb      	strh	r3, [r7, #14]
 80030e2:	2300      	movs	r3, #0
 80030e4:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
 /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)(~(uint16_t)TIM_CCER_CC1E);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	8c1b      	ldrh	r3, [r3, #32]
 80030ea:	b29b      	uxth	r3, r3
 80030ec:	f023 0301 	bic.w	r3, r3, #1
 80030f0:	b29a      	uxth	r2, r3
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	841a      	strh	r2, [r3, #32]
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	8c1b      	ldrh	r3, [r3, #32]
 80030fa:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	889b      	ldrh	r3, [r3, #4]
 8003100:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	8b1b      	ldrh	r3, [r3, #24]
 8003106:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_OC1M));
 8003108:	897b      	ldrh	r3, [r7, #10]
 800310a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800310e:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_CC1S));
 8003110:	897b      	ldrh	r3, [r7, #10]
 8003112:	f023 0303 	bic.w	r3, r3, #3
 8003116:	817b      	strh	r3, [r7, #10]

  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	881a      	ldrh	r2, [r3, #0]
 800311c:	897b      	ldrh	r3, [r7, #10]
 800311e:	4313      	orrs	r3, r2
 8003120:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1P));
 8003122:	89fb      	ldrh	r3, [r7, #14]
 8003124:	f023 0302 	bic.w	r3, r3, #2
 8003128:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	891a      	ldrh	r2, [r3, #8]
 800312e:	89fb      	ldrh	r3, [r7, #14]
 8003130:	4313      	orrs	r3, r2
 8003132:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	885a      	ldrh	r2, [r3, #2]
 8003138:	89fb      	ldrh	r3, [r7, #14]
 800313a:	4313      	orrs	r3, r2
 800313c:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15)||
 800313e:	687a      	ldr	r2, [r7, #4]
 8003140:	4b24      	ldr	r3, [pc, #144]	; (80031d4 <TIM_OC1Init+0x104>)
 8003142:	429a      	cmp	r2, r3
 8003144:	d00f      	beq.n	8003166 <TIM_OC1Init+0x96>
 8003146:	687a      	ldr	r2, [r7, #4]
 8003148:	4b23      	ldr	r3, [pc, #140]	; (80031d8 <TIM_OC1Init+0x108>)
 800314a:	429a      	cmp	r2, r3
 800314c:	d00b      	beq.n	8003166 <TIM_OC1Init+0x96>
 800314e:	687a      	ldr	r2, [r7, #4]
 8003150:	4b22      	ldr	r3, [pc, #136]	; (80031dc <TIM_OC1Init+0x10c>)
 8003152:	429a      	cmp	r2, r3
 8003154:	d007      	beq.n	8003166 <TIM_OC1Init+0x96>
 8003156:	687a      	ldr	r2, [r7, #4]
 8003158:	4b21      	ldr	r3, [pc, #132]	; (80031e0 <TIM_OC1Init+0x110>)
 800315a:	429a      	cmp	r2, r3
 800315c:	d003      	beq.n	8003166 <TIM_OC1Init+0x96>
     (TIMx == TIM16)|| (TIMx == TIM17))
 800315e:	687a      	ldr	r2, [r7, #4]
 8003160:	4b20      	ldr	r3, [pc, #128]	; (80031e4 <TIM_OC1Init+0x114>)
 8003162:	429a      	cmp	r2, r3
 8003164:	d123      	bne.n	80031ae <TIM_OC1Init+0xde>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1NP));
 8003166:	89fb      	ldrh	r3, [r7, #14]
 8003168:	f023 0308 	bic.w	r3, r3, #8
 800316c:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	895a      	ldrh	r2, [r3, #10]
 8003172:	89fb      	ldrh	r3, [r7, #14]
 8003174:	4313      	orrs	r3, r2
 8003176:	81fb      	strh	r3, [r7, #14]
    
    /* Reset the Output N State */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1NE));    
 8003178:	89fb      	ldrh	r3, [r7, #14]
 800317a:	f023 0304 	bic.w	r3, r3, #4
 800317e:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	889a      	ldrh	r2, [r3, #4]
 8003184:	89fb      	ldrh	r3, [r7, #14]
 8003186:	4313      	orrs	r3, r2
 8003188:	81fb      	strh	r3, [r7, #14]
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS1));
 800318a:	89bb      	ldrh	r3, [r7, #12]
 800318c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003190:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS1N));
 8003192:	89bb      	ldrh	r3, [r7, #12]
 8003194:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003198:	81bb      	strh	r3, [r7, #12]
    
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	899a      	ldrh	r2, [r3, #12]
 800319e:	89bb      	ldrh	r3, [r7, #12]
 80031a0:	4313      	orrs	r3, r2
 80031a2:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	89da      	ldrh	r2, [r3, #14]
 80031a8:	89bb      	ldrh	r3, [r7, #12]
 80031aa:	4313      	orrs	r3, r2
 80031ac:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	89ba      	ldrh	r2, [r7, #12]
 80031b2:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	897a      	ldrh	r2, [r7, #10]
 80031b8:	831a      	strh	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse; 
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	88da      	ldrh	r2, [r3, #6]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	869a      	strh	r2, [r3, #52]	; 0x34
 
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	89fa      	ldrh	r2, [r7, #14]
 80031c6:	841a      	strh	r2, [r3, #32]
}
 80031c8:	3714      	adds	r7, #20
 80031ca:	46bd      	mov	sp, r7
 80031cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d0:	4770      	bx	lr
 80031d2:	bf00      	nop
 80031d4:	40012c00 	.word	0x40012c00
 80031d8:	40013400 	.word	0x40013400
 80031dc:	40014000 	.word	0x40014000
 80031e0:	40014400 	.word	0x40014400
 80031e4:	40014800 	.word	0x40014800

080031e8 <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 80031e8:	b480      	push	{r7}
 80031ea:	b083      	sub	sp, #12
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
 80031f0:	460b      	mov	r3, r1
 80031f2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80031f4:	78fb      	ldrb	r3, [r7, #3]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d008      	beq.n	800320c <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	881b      	ldrh	r3, [r3, #0]
 80031fe:	b29b      	uxth	r3, r3
 8003200:	f043 0301 	orr.w	r3, r3, #1
 8003204:	b29a      	uxth	r2, r3
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	801a      	strh	r2, [r3, #0]
 800320a:	e007      	b.n	800321c <TIM_Cmd+0x34>
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	881b      	ldrh	r3, [r3, #0]
 8003210:	b29b      	uxth	r3, r3
 8003212:	f023 0301 	bic.w	r3, r3, #1
 8003216:	b29a      	uxth	r2, r3
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	801a      	strh	r2, [r3, #0]
  }
}
 800321c:	370c      	adds	r7, #12
 800321e:	46bd      	mov	sp, r7
 8003220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003224:	4770      	bx	lr
 8003226:	bf00      	nop

08003228 <TIM_CtrlPWMOutputs>:
  * @param  NewState: new state of the TIM peripheral Main Outputs.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_CtrlPWMOutputs(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8003228:	b480      	push	{r7}
 800322a:	b083      	sub	sp, #12
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
 8003230:	460b      	mov	r3, r1
 8003232:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8003234:	78fb      	ldrb	r3, [r7, #3]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d00c      	beq.n	8003254 <TIM_CtrlPWMOutputs+0x2c>
  {
    /* Enable the TIM Main Output */
    TIMx->BDTR |= TIM_BDTR_MOE;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003240:	b29b      	uxth	r3, r3
 8003242:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003246:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800324a:	b29a      	uxth	r2, r3
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 8003252:	e009      	b.n	8003268 <TIM_CtrlPWMOutputs+0x40>
  }
  else
  {
    /* Disable the TIM Main Output */
    TIMx->BDTR &= (uint16_t)(~((uint16_t)TIM_BDTR_MOE));
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800325a:	b29b      	uxth	r3, r3
 800325c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8003260:	b29a      	uxth	r2, r3
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }  
}
 8003268:	370c      	adds	r7, #12
 800326a:	46bd      	mov	sp, r7
 800326c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003270:	4770      	bx	lr
 8003272:	bf00      	nop

08003274 <TIM_ITConfig>:
  * @param  NewState: new state of the TIM interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState)
{  
 8003274:	b480      	push	{r7}
 8003276:	b083      	sub	sp, #12
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
 800327c:	4613      	mov	r3, r2
 800327e:	460a      	mov	r2, r1
 8003280:	807a      	strh	r2, [r7, #2]
 8003282:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8003284:	787b      	ldrb	r3, [r7, #1]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d008      	beq.n	800329c <TIM_ITConfig+0x28>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	899b      	ldrh	r3, [r3, #12]
 800328e:	b29a      	uxth	r2, r3
 8003290:	887b      	ldrh	r3, [r7, #2]
 8003292:	4313      	orrs	r3, r2
 8003294:	b29a      	uxth	r2, r3
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	819a      	strh	r2, [r3, #12]
 800329a:	e009      	b.n	80032b0 <TIM_ITConfig+0x3c>
  }
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	899b      	ldrh	r3, [r3, #12]
 80032a0:	b29a      	uxth	r2, r3
 80032a2:	887b      	ldrh	r3, [r7, #2]
 80032a4:	43db      	mvns	r3, r3
 80032a6:	b29b      	uxth	r3, r3
 80032a8:	4013      	ands	r3, r2
 80032aa:	b29a      	uxth	r2, r3
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	819a      	strh	r2, [r3, #12]
  }
}
 80032b0:	370c      	adds	r7, #12
 80032b2:	46bd      	mov	sp, r7
 80032b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b8:	4770      	bx	lr
 80032ba:	bf00      	nop

080032bc <TIM_ARRPreloadConfig>:
  * @param  NewState: new state of the TIMx peripheral Preload register
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ARRPreloadConfig(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 80032bc:	b480      	push	{r7}
 80032be:	b083      	sub	sp, #12
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
 80032c4:	460b      	mov	r3, r1
 80032c6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80032c8:	78fb      	ldrb	r3, [r7, #3]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d008      	beq.n	80032e0 <TIM_ARRPreloadConfig+0x24>
  {
    /* Set the ARR Preload Bit */
    TIMx->CR1 |= TIM_CR1_ARPE;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	881b      	ldrh	r3, [r3, #0]
 80032d2:	b29b      	uxth	r3, r3
 80032d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032d8:	b29a      	uxth	r2, r3
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	801a      	strh	r2, [r3, #0]
 80032de:	e007      	b.n	80032f0 <TIM_ARRPreloadConfig+0x34>
  }
  else
  {
    /* Reset the ARR Preload Bit */
    TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_ARPE);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	881b      	ldrh	r3, [r3, #0]
 80032e4:	b29b      	uxth	r3, r3
 80032e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80032ea:	b29a      	uxth	r2, r3
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	801a      	strh	r2, [r3, #0]
  }
}
 80032f0:	370c      	adds	r7, #12
 80032f2:	46bd      	mov	sp, r7
 80032f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f8:	4770      	bx	lr
 80032fa:	bf00      	nop

080032fc <TIM_OC1PreloadConfig>:
  *     @arg TIM_OCPreload_Enable
  *     @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC1PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 80032fc:	b480      	push	{r7}
 80032fe:	b085      	sub	sp, #20
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
 8003304:	460b      	mov	r3, r1
 8003306:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 8003308:	2300      	movs	r3, #0
 800330a:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
  tmpccmr1 = TIMx->CCMR1;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	8b1b      	ldrh	r3, [r3, #24]
 8003310:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC1PE Bit */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC1PE);
 8003312:	89fb      	ldrh	r3, [r7, #14]
 8003314:	f023 0308 	bic.w	r3, r3, #8
 8003318:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= TIM_OCPreload;
 800331a:	89fa      	ldrh	r2, [r7, #14]
 800331c:	887b      	ldrh	r3, [r7, #2]
 800331e:	4313      	orrs	r3, r2
 8003320:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	89fa      	ldrh	r2, [r7, #14]
 8003326:	831a      	strh	r2, [r3, #24]
}
 8003328:	3714      	adds	r7, #20
 800332a:	46bd      	mov	sp, r7
 800332c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003330:	4770      	bx	lr
 8003332:	bf00      	nop

08003334 <TIM_SetCounter>:
  * @param  TIMx: where x can be 1 to 17 to select the TIM peripheral.
  * @param  Counter: specifies the Counter register new value.
  * @retval None
  */
void TIM_SetCounter(TIM_TypeDef* TIMx, uint16_t Counter)
{
 8003334:	b480      	push	{r7}
 8003336:	b083      	sub	sp, #12
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
 800333c:	460b      	mov	r3, r1
 800333e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  /* Set the Counter Register value */
  TIMx->CNT = Counter;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	887a      	ldrh	r2, [r7, #2]
 8003344:	849a      	strh	r2, [r3, #36]	; 0x24
}
 8003346:	370c      	adds	r7, #12
 8003348:	46bd      	mov	sp, r7
 800334a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334e:	4770      	bx	lr

08003350 <TIM_SetCompare1>:
  * @param  TIMx: where x can be 1 to 17 except 6 and 7 to select the TIM peripheral.
  * @param  Compare1: specifies the Capture Compare1 register new value.
  * @retval None
  */
void TIM_SetCompare1(TIM_TypeDef* TIMx, uint16_t Compare1)
{
 8003350:	b480      	push	{r7}
 8003352:	b083      	sub	sp, #12
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
 8003358:	460b      	mov	r3, r1
 800335a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  /* Set the Capture Compare1 Register value */
  TIMx->CCR1 = Compare1;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	887a      	ldrh	r2, [r7, #2]
 8003360:	869a      	strh	r2, [r3, #52]	; 0x34
}
 8003362:	370c      	adds	r7, #12
 8003364:	46bd      	mov	sp, r7
 8003366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336a:	4770      	bx	lr

0800336c <TIM_GetITStatus>:
  *   - TIM_IT_Break is used only with TIM1, TIM8 and TIM15. 
  *   - TIM_IT_COM is used only with TIM1, TIM8, TIM15, TIM16 and TIM17.  
  * @retval The new state of the TIM_IT(SET or RESET).
  */
ITStatus TIM_GetITStatus(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 800336c:	b480      	push	{r7}
 800336e:	b085      	sub	sp, #20
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
 8003374:	460b      	mov	r3, r1
 8003376:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;  
 8003378:	2300      	movs	r3, #0
 800337a:	73fb      	strb	r3, [r7, #15]
  uint16_t itstatus = 0x0, itenable = 0x0;
 800337c:	2300      	movs	r3, #0
 800337e:	81bb      	strh	r3, [r7, #12]
 8003380:	2300      	movs	r3, #0
 8003382:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	8a1b      	ldrh	r3, [r3, #16]
 8003388:	b29a      	uxth	r2, r3
 800338a:	887b      	ldrh	r3, [r7, #2]
 800338c:	4013      	ands	r3, r2
 800338e:	81bb      	strh	r3, [r7, #12]
  
  itenable = TIMx->DIER & TIM_IT;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	899b      	ldrh	r3, [r3, #12]
 8003394:	b29a      	uxth	r2, r3
 8003396:	887b      	ldrh	r3, [r7, #2]
 8003398:	4013      	ands	r3, r2
 800339a:	817b      	strh	r3, [r7, #10]
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 800339c:	89bb      	ldrh	r3, [r7, #12]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d005      	beq.n	80033ae <TIM_GetITStatus+0x42>
 80033a2:	897b      	ldrh	r3, [r7, #10]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d002      	beq.n	80033ae <TIM_GetITStatus+0x42>
  {
    bitstatus = SET;
 80033a8:	2301      	movs	r3, #1
 80033aa:	73fb      	strb	r3, [r7, #15]
 80033ac:	e001      	b.n	80033b2 <TIM_GetITStatus+0x46>
  }
  else
  {
    bitstatus = RESET;
 80033ae:	2300      	movs	r3, #0
 80033b0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80033b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80033b4:	4618      	mov	r0, r3
 80033b6:	3714      	adds	r7, #20
 80033b8:	46bd      	mov	sp, r7
 80033ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033be:	4770      	bx	lr

080033c0 <TIM_ClearITPendingBit>:
  *   - TIM_IT_Break is used only with TIM1, TIM8 and TIM15. 
  *   - TIM_IT_COM is used only with TIM1, TIM8, TIM15, TIM16 and TIM17.    
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 80033c0:	b480      	push	{r7}
 80033c2:	b083      	sub	sp, #12
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
 80033c8:	460b      	mov	r3, r1
 80033ca:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 80033cc:	887b      	ldrh	r3, [r7, #2]
 80033ce:	43db      	mvns	r3, r3
 80033d0:	b29a      	uxth	r2, r3
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	821a      	strh	r2, [r3, #16]
}
 80033d6:	370c      	adds	r7, #12
 80033d8:	46bd      	mov	sp, r7
 80033da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033de:	4770      	bx	lr

080033e0 <SPI_I2S_DeInit>:
  *         reset values (Affects also the I2Ss).
  * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
  * @retval None
  */
void SPI_I2S_DeInit(SPI_TypeDef* SPIx)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b082      	sub	sp, #8
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));

  if (SPIx == SPI1)
 80033e8:	687a      	ldr	r2, [r7, #4]
 80033ea:	4b17      	ldr	r3, [pc, #92]	; (8003448 <SPI_I2S_DeInit+0x68>)
 80033ec:	429a      	cmp	r2, r3
 80033ee:	d10a      	bne.n	8003406 <SPI_I2S_DeInit+0x26>
  {
    /* Enable SPI1 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, ENABLE);
 80033f0:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80033f4:	2101      	movs	r1, #1
 80033f6:	f000 f9d5 	bl	80037a4 <RCC_APB2PeriphResetCmd>
    /* Release SPI1 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, DISABLE);
 80033fa:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80033fe:	2100      	movs	r1, #0
 8003400:	f000 f9d0 	bl	80037a4 <RCC_APB2PeriphResetCmd>
 8003404:	e01c      	b.n	8003440 <SPI_I2S_DeInit+0x60>
  }
  else if (SPIx == SPI2)
 8003406:	687a      	ldr	r2, [r7, #4]
 8003408:	4b10      	ldr	r3, [pc, #64]	; (800344c <SPI_I2S_DeInit+0x6c>)
 800340a:	429a      	cmp	r2, r3
 800340c:	d10a      	bne.n	8003424 <SPI_I2S_DeInit+0x44>
  {
    /* Enable SPI2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, ENABLE);
 800340e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003412:	2101      	movs	r1, #1
 8003414:	f000 f9e4 	bl	80037e0 <RCC_APB1PeriphResetCmd>
    /* Release SPI2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, DISABLE);
 8003418:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800341c:	2100      	movs	r1, #0
 800341e:	f000 f9df 	bl	80037e0 <RCC_APB1PeriphResetCmd>
 8003422:	e00d      	b.n	8003440 <SPI_I2S_DeInit+0x60>
  }
  else
  {
    if (SPIx == SPI3)
 8003424:	687a      	ldr	r2, [r7, #4]
 8003426:	4b0a      	ldr	r3, [pc, #40]	; (8003450 <SPI_I2S_DeInit+0x70>)
 8003428:	429a      	cmp	r2, r3
 800342a:	d109      	bne.n	8003440 <SPI_I2S_DeInit+0x60>
    {
      /* Enable SPI3 reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
 800342c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8003430:	2101      	movs	r1, #1
 8003432:	f000 f9d5 	bl	80037e0 <RCC_APB1PeriphResetCmd>
      /* Release SPI3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
 8003436:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800343a:	2100      	movs	r1, #0
 800343c:	f000 f9d0 	bl	80037e0 <RCC_APB1PeriphResetCmd>
    }
  }
}
 8003440:	3708      	adds	r7, #8
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}
 8003446:	bf00      	nop
 8003448:	40013000 	.word	0x40013000
 800344c:	40003800 	.word	0x40003800
 8003450:	40003c00 	.word	0x40003c00

08003454 <SPI_Init>:
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
  *         contains the configuration information for the specified SPI peripheral.
  * @retval None
  */
void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
{
 8003454:	b480      	push	{r7}
 8003456:	b085      	sub	sp, #20
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
 800345c:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 800345e:	2300      	movs	r3, #0
 8003460:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
  assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));

/*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	881b      	ldrh	r3, [r3, #0]
 8003466:	81fb      	strh	r3, [r7, #14]
  /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
  tmpreg &= CR1_CLEAR_Mask;
 8003468:	89fb      	ldrh	r3, [r7, #14]
 800346a:	f403 5341 	and.w	r3, r3, #12352	; 0x3040
 800346e:	81fb      	strh	r3, [r7, #14]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	881a      	ldrh	r2, [r3, #0]
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	885b      	ldrh	r3, [r3, #2]
 8003478:	4313      	orrs	r3, r2
 800347a:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	889b      	ldrh	r3, [r3, #4]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8003480:	4313      	orrs	r3, r2
 8003482:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	88db      	ldrh	r3, [r3, #6]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8003488:	4313      	orrs	r3, r2
 800348a:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	891b      	ldrh	r3, [r3, #8]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8003490:	4313      	orrs	r3, r2
 8003492:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	895b      	ldrh	r3, [r3, #10]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8003498:	4313      	orrs	r3, r2
 800349a:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	899b      	ldrh	r3, [r3, #12]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 80034a0:	4313      	orrs	r3, r2
 80034a2:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	89db      	ldrh	r3, [r3, #14]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 80034a8:	4313      	orrs	r3, r2
 80034aa:	b29a      	uxth	r2, r3
 80034ac:	89fb      	ldrh	r3, [r7, #14]
 80034ae:	4313      	orrs	r3, r2
 80034b0:	81fb      	strh	r3, [r7, #14]
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	89fa      	ldrh	r2, [r7, #14]
 80034b6:	801a      	strh	r2, [r3, #0]
  
  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= SPI_Mode_Select;		
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	8b9b      	ldrh	r3, [r3, #28]
 80034bc:	b29b      	uxth	r3, r3
 80034be:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80034c2:	b29a      	uxth	r2, r3
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	839a      	strh	r2, [r3, #28]

/*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	8a1a      	ldrh	r2, [r3, #16]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	821a      	strh	r2, [r3, #16]
}
 80034d0:	3714      	adds	r7, #20
 80034d2:	46bd      	mov	sp, r7
 80034d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d8:	4770      	bx	lr
 80034da:	bf00      	nop

080034dc <SPI_Cmd>:
  * @param  NewState: new state of the SPIx peripheral. 
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 80034dc:	b480      	push	{r7}
 80034de:	b083      	sub	sp, #12
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
 80034e4:	460b      	mov	r3, r1
 80034e6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80034e8:	78fb      	ldrb	r3, [r7, #3]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d008      	beq.n	8003500 <SPI_Cmd+0x24>
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= CR1_SPE_Set;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	881b      	ldrh	r3, [r3, #0]
 80034f2:	b29b      	uxth	r3, r3
 80034f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80034f8:	b29a      	uxth	r2, r3
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	801a      	strh	r2, [r3, #0]
 80034fe:	e007      	b.n	8003510 <SPI_Cmd+0x34>
  }
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= CR1_SPE_Reset;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	881b      	ldrh	r3, [r3, #0]
 8003504:	b29b      	uxth	r3, r3
 8003506:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800350a:	b29a      	uxth	r2, r3
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	801a      	strh	r2, [r3, #0]
  }
}
 8003510:	370c      	adds	r7, #12
 8003512:	46bd      	mov	sp, r7
 8003514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003518:	4770      	bx	lr
 800351a:	bf00      	nop

0800351c <SPI_I2S_SendData>:
  *   - 2 or 3 in I2S mode
  * @param  Data : Data to be transmitted.
  * @retval None
  */
void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
{
 800351c:	b480      	push	{r7}
 800351e:	b083      	sub	sp, #12
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
 8003524:	460b      	mov	r3, r1
 8003526:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	887a      	ldrh	r2, [r7, #2]
 800352c:	819a      	strh	r2, [r3, #12]
}
 800352e:	370c      	adds	r7, #12
 8003530:	46bd      	mov	sp, r7
 8003532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003536:	4770      	bx	lr

08003538 <SPI_I2S_ReceiveData>:
  *   - 1, 2 or 3 in SPI mode 
  *   - 2 or 3 in I2S mode
  * @retval The value of the received data.
  */
uint16_t SPI_I2S_ReceiveData(SPI_TypeDef* SPIx)
{
 8003538:	b480      	push	{r7}
 800353a:	b083      	sub	sp, #12
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  /* Return the data in the DR register */
  return SPIx->DR;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	899b      	ldrh	r3, [r3, #12]
 8003544:	b29b      	uxth	r3, r3
}
 8003546:	4618      	mov	r0, r3
 8003548:	370c      	adds	r7, #12
 800354a:	46bd      	mov	sp, r7
 800354c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003550:	4770      	bx	lr
 8003552:	bf00      	nop

08003554 <SPI_I2S_GetFlagStatus>:
  *     @arg I2S_FLAG_UDR: Underrun Error flag.
  *     @arg I2S_FLAG_CHSIDE: Channel Side flag.
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 8003554:	b480      	push	{r7}
 8003556:	b085      	sub	sp, #20
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
 800355c:	460b      	mov	r3, r1
 800355e:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8003560:	2300      	movs	r3, #0
 8003562:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  /* Check the status of the specified SPI/I2S flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	891b      	ldrh	r3, [r3, #8]
 8003568:	b29a      	uxth	r2, r3
 800356a:	887b      	ldrh	r3, [r7, #2]
 800356c:	4013      	ands	r3, r2
 800356e:	b29b      	uxth	r3, r3
 8003570:	2b00      	cmp	r3, #0
 8003572:	d002      	beq.n	800357a <SPI_I2S_GetFlagStatus+0x26>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 8003574:	2301      	movs	r3, #1
 8003576:	73fb      	strb	r3, [r7, #15]
 8003578:	e001      	b.n	800357e <SPI_I2S_GetFlagStatus+0x2a>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 800357a:	2300      	movs	r3, #0
 800357c:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 800357e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003580:	4618      	mov	r0, r3
 8003582:	3714      	adds	r7, #20
 8003584:	46bd      	mov	sp, r7
 8003586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358a:	4770      	bx	lr

0800358c <RCC_GetClocksFreq>:
  * @note   The result of this function could be not correct when using 
  *         fractional value for HSE crystal.  
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 800358c:	b480      	push	{r7}
 800358e:	b087      	sub	sp, #28
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, presc = 0;
 8003594:	2300      	movs	r3, #0
 8003596:	617b      	str	r3, [r7, #20]
 8003598:	2300      	movs	r3, #0
 800359a:	613b      	str	r3, [r7, #16]
 800359c:	2300      	movs	r3, #0
 800359e:	60fb      	str	r3, [r7, #12]
 80035a0:	2300      	movs	r3, #0
 80035a2:	60bb      	str	r3, [r7, #8]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
 80035a4:	4b4d      	ldr	r3, [pc, #308]	; (80036dc <RCC_GetClocksFreq+0x150>)
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	f003 030c 	and.w	r3, r3, #12
 80035ac:	617b      	str	r3, [r7, #20]
  
  switch (tmp)
 80035ae:	697b      	ldr	r3, [r7, #20]
 80035b0:	2b04      	cmp	r3, #4
 80035b2:	d007      	beq.n	80035c4 <RCC_GetClocksFreq+0x38>
 80035b4:	2b08      	cmp	r3, #8
 80035b6:	d009      	beq.n	80035cc <RCC_GetClocksFreq+0x40>
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d134      	bne.n	8003626 <RCC_GetClocksFreq+0x9a>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	4a48      	ldr	r2, [pc, #288]	; (80036e0 <RCC_GetClocksFreq+0x154>)
 80035c0:	601a      	str	r2, [r3, #0]
      break;
 80035c2:	e034      	b.n	800362e <RCC_GetClocksFreq+0xa2>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	4a46      	ldr	r2, [pc, #280]	; (80036e0 <RCC_GetClocksFreq+0x154>)
 80035c8:	601a      	str	r2, [r3, #0]
      break;
 80035ca:	e030      	b.n	800362e <RCC_GetClocksFreq+0xa2>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
 80035cc:	4b43      	ldr	r3, [pc, #268]	; (80036dc <RCC_GetClocksFreq+0x150>)
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80035d4:	613b      	str	r3, [r7, #16]
      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
 80035d6:	4b41      	ldr	r3, [pc, #260]	; (80036dc <RCC_GetClocksFreq+0x150>)
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035de:	60fb      	str	r3, [r7, #12]
      
#ifndef STM32F10X_CL      
      pllmull = ( pllmull >> 18) + 2;
 80035e0:	693b      	ldr	r3, [r7, #16]
 80035e2:	0c9b      	lsrs	r3, r3, #18
 80035e4:	3302      	adds	r3, #2
 80035e6:	613b      	str	r3, [r7, #16]
      
      if (pllsource == 0x00)
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d106      	bne.n	80035fc <RCC_GetClocksFreq+0x70>
      {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
 80035ee:	693b      	ldr	r3, [r7, #16]
 80035f0:	4a3c      	ldr	r2, [pc, #240]	; (80036e4 <RCC_GetClocksFreq+0x158>)
 80035f2:	fb02 f203 	mul.w	r2, r2, r3
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	601a      	str	r2, [r3, #0]
 80035fa:	e013      	b.n	8003624 <RCC_GetClocksFreq+0x98>
       prediv1factor = (RCC->CFGR2 & CFGR2_PREDIV1) + 1;
       /* HSE oscillator clock selected as PREDIV1 clock entry */
       RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE / prediv1factor) * pllmull; 
 #else
        /* HSE selected as PLL clock entry */
        if ((RCC->CFGR & CFGR_PLLXTPRE_Mask) != (uint32_t)RESET)
 80035fc:	4b37      	ldr	r3, [pc, #220]	; (80036dc <RCC_GetClocksFreq+0x150>)
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003604:	2b00      	cmp	r3, #0
 8003606:	d006      	beq.n	8003616 <RCC_GetClocksFreq+0x8a>
        {/* HSE oscillator clock divided by 2 */
          RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE >> 1) * pllmull;
 8003608:	693b      	ldr	r3, [r7, #16]
 800360a:	4a36      	ldr	r2, [pc, #216]	; (80036e4 <RCC_GetClocksFreq+0x158>)
 800360c:	fb02 f203 	mul.w	r2, r2, r3
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	601a      	str	r2, [r3, #0]
 8003614:	e006      	b.n	8003624 <RCC_GetClocksFreq+0x98>
        }
        else
        {
          RCC_Clocks->SYSCLK_Frequency = HSE_VALUE * pllmull;
 8003616:	693b      	ldr	r3, [r7, #16]
 8003618:	4a31      	ldr	r2, [pc, #196]	; (80036e0 <RCC_GetClocksFreq+0x154>)
 800361a:	fb02 f203 	mul.w	r2, r2, r3
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2; 
          RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F10X_CL */ 
      break;
 8003622:	e004      	b.n	800362e <RCC_GetClocksFreq+0xa2>
 8003624:	e003      	b.n	800362e <RCC_GetClocksFreq+0xa2>

    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	4a2d      	ldr	r2, [pc, #180]	; (80036e0 <RCC_GetClocksFreq+0x154>)
 800362a:	601a      	str	r2, [r3, #0]
      break;
 800362c:	bf00      	nop
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
 800362e:	4b2b      	ldr	r3, [pc, #172]	; (80036dc <RCC_GetClocksFreq+0x150>)
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003636:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 4;
 8003638:	697b      	ldr	r3, [r7, #20]
 800363a:	091b      	lsrs	r3, r3, #4
 800363c:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 800363e:	4a2a      	ldr	r2, [pc, #168]	; (80036e8 <RCC_GetClocksFreq+0x15c>)
 8003640:	697b      	ldr	r3, [r7, #20]
 8003642:	4413      	add	r3, r2
 8003644:	781b      	ldrb	r3, [r3, #0]
 8003646:	b2db      	uxtb	r3, r3
 8003648:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681a      	ldr	r2, [r3, #0]
 800364e:	68bb      	ldr	r3, [r7, #8]
 8003650:	40da      	lsrs	r2, r3
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	605a      	str	r2, [r3, #4]
  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
 8003656:	4b21      	ldr	r3, [pc, #132]	; (80036dc <RCC_GetClocksFreq+0x150>)
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800365e:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 8;
 8003660:	697b      	ldr	r3, [r7, #20]
 8003662:	0a1b      	lsrs	r3, r3, #8
 8003664:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 8003666:	4a20      	ldr	r2, [pc, #128]	; (80036e8 <RCC_GetClocksFreq+0x15c>)
 8003668:	697b      	ldr	r3, [r7, #20]
 800366a:	4413      	add	r3, r2
 800366c:	781b      	ldrb	r3, [r3, #0]
 800366e:	b2db      	uxtb	r3, r3
 8003670:	60bb      	str	r3, [r7, #8]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	685a      	ldr	r2, [r3, #4]
 8003676:	68bb      	ldr	r3, [r7, #8]
 8003678:	40da      	lsrs	r2, r3
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	609a      	str	r2, [r3, #8]
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
 800367e:	4b17      	ldr	r3, [pc, #92]	; (80036dc <RCC_GetClocksFreq+0x150>)
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003686:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 11;
 8003688:	697b      	ldr	r3, [r7, #20]
 800368a:	0adb      	lsrs	r3, r3, #11
 800368c:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 800368e:	4a16      	ldr	r2, [pc, #88]	; (80036e8 <RCC_GetClocksFreq+0x15c>)
 8003690:	697b      	ldr	r3, [r7, #20]
 8003692:	4413      	add	r3, r2
 8003694:	781b      	ldrb	r3, [r3, #0]
 8003696:	b2db      	uxtb	r3, r3
 8003698:	60bb      	str	r3, [r7, #8]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	685a      	ldr	r2, [r3, #4]
 800369e:	68bb      	ldr	r3, [r7, #8]
 80036a0:	40da      	lsrs	r2, r3
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	60da      	str	r2, [r3, #12]
  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
 80036a6:	4b0d      	ldr	r3, [pc, #52]	; (80036dc <RCC_GetClocksFreq+0x150>)
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80036ae:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 14;
 80036b0:	697b      	ldr	r3, [r7, #20]
 80036b2:	0b9b      	lsrs	r3, r3, #14
 80036b4:	617b      	str	r3, [r7, #20]
  presc = ADCPrescTable[tmp];
 80036b6:	4a0d      	ldr	r2, [pc, #52]	; (80036ec <RCC_GetClocksFreq+0x160>)
 80036b8:	697b      	ldr	r3, [r7, #20]
 80036ba:	4413      	add	r3, r2
 80036bc:	781b      	ldrb	r3, [r3, #0]
 80036be:	b2db      	uxtb	r3, r3
 80036c0:	60bb      	str	r3, [r7, #8]
  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	68da      	ldr	r2, [r3, #12]
 80036c6:	68bb      	ldr	r3, [r7, #8]
 80036c8:	fbb2 f2f3 	udiv	r2, r2, r3
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	611a      	str	r2, [r3, #16]
}
 80036d0:	371c      	adds	r7, #28
 80036d2:	46bd      	mov	sp, r7
 80036d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d8:	4770      	bx	lr
 80036da:	bf00      	nop
 80036dc:	40021000 	.word	0x40021000
 80036e0:	007a1200 	.word	0x007a1200
 80036e4:	003d0900 	.word	0x003d0900
 80036e8:	20000000 	.word	0x20000000
 80036ec:	20000010 	.word	0x20000010

080036f0 <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
 80036f0:	b480      	push	{r7}
 80036f2:	b083      	sub	sp, #12
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
 80036f8:	460b      	mov	r3, r1
 80036fa:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80036fc:	78fb      	ldrb	r3, [r7, #3]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d006      	beq.n	8003710 <RCC_AHBPeriphClockCmd+0x20>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 8003702:	4b09      	ldr	r3, [pc, #36]	; (8003728 <RCC_AHBPeriphClockCmd+0x38>)
 8003704:	4a08      	ldr	r2, [pc, #32]	; (8003728 <RCC_AHBPeriphClockCmd+0x38>)
 8003706:	6951      	ldr	r1, [r2, #20]
 8003708:	687a      	ldr	r2, [r7, #4]
 800370a:	430a      	orrs	r2, r1
 800370c:	615a      	str	r2, [r3, #20]
 800370e:	e006      	b.n	800371e <RCC_AHBPeriphClockCmd+0x2e>
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
 8003710:	4b05      	ldr	r3, [pc, #20]	; (8003728 <RCC_AHBPeriphClockCmd+0x38>)
 8003712:	4a05      	ldr	r2, [pc, #20]	; (8003728 <RCC_AHBPeriphClockCmd+0x38>)
 8003714:	6951      	ldr	r1, [r2, #20]
 8003716:	687a      	ldr	r2, [r7, #4]
 8003718:	43d2      	mvns	r2, r2
 800371a:	400a      	ands	r2, r1
 800371c:	615a      	str	r2, [r3, #20]
  }
}
 800371e:	370c      	adds	r7, #12
 8003720:	46bd      	mov	sp, r7
 8003722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003726:	4770      	bx	lr
 8003728:	40021000 	.word	0x40021000

0800372c <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 800372c:	b480      	push	{r7}
 800372e:	b083      	sub	sp, #12
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
 8003734:	460b      	mov	r3, r1
 8003736:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8003738:	78fb      	ldrb	r3, [r7, #3]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d006      	beq.n	800374c <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 800373e:	4b09      	ldr	r3, [pc, #36]	; (8003764 <RCC_APB2PeriphClockCmd+0x38>)
 8003740:	4a08      	ldr	r2, [pc, #32]	; (8003764 <RCC_APB2PeriphClockCmd+0x38>)
 8003742:	6991      	ldr	r1, [r2, #24]
 8003744:	687a      	ldr	r2, [r7, #4]
 8003746:	430a      	orrs	r2, r1
 8003748:	619a      	str	r2, [r3, #24]
 800374a:	e006      	b.n	800375a <RCC_APB2PeriphClockCmd+0x2e>
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 800374c:	4b05      	ldr	r3, [pc, #20]	; (8003764 <RCC_APB2PeriphClockCmd+0x38>)
 800374e:	4a05      	ldr	r2, [pc, #20]	; (8003764 <RCC_APB2PeriphClockCmd+0x38>)
 8003750:	6991      	ldr	r1, [r2, #24]
 8003752:	687a      	ldr	r2, [r7, #4]
 8003754:	43d2      	mvns	r2, r2
 8003756:	400a      	ands	r2, r1
 8003758:	619a      	str	r2, [r3, #24]
  }
}
 800375a:	370c      	adds	r7, #12
 800375c:	46bd      	mov	sp, r7
 800375e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003762:	4770      	bx	lr
 8003764:	40021000 	.word	0x40021000

08003768 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8003768:	b480      	push	{r7}
 800376a:	b083      	sub	sp, #12
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
 8003770:	460b      	mov	r3, r1
 8003772:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8003774:	78fb      	ldrb	r3, [r7, #3]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d006      	beq.n	8003788 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 800377a:	4b09      	ldr	r3, [pc, #36]	; (80037a0 <RCC_APB1PeriphClockCmd+0x38>)
 800377c:	4a08      	ldr	r2, [pc, #32]	; (80037a0 <RCC_APB1PeriphClockCmd+0x38>)
 800377e:	69d1      	ldr	r1, [r2, #28]
 8003780:	687a      	ldr	r2, [r7, #4]
 8003782:	430a      	orrs	r2, r1
 8003784:	61da      	str	r2, [r3, #28]
 8003786:	e006      	b.n	8003796 <RCC_APB1PeriphClockCmd+0x2e>
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8003788:	4b05      	ldr	r3, [pc, #20]	; (80037a0 <RCC_APB1PeriphClockCmd+0x38>)
 800378a:	4a05      	ldr	r2, [pc, #20]	; (80037a0 <RCC_APB1PeriphClockCmd+0x38>)
 800378c:	69d1      	ldr	r1, [r2, #28]
 800378e:	687a      	ldr	r2, [r7, #4]
 8003790:	43d2      	mvns	r2, r2
 8003792:	400a      	ands	r2, r1
 8003794:	61da      	str	r2, [r3, #28]
  }
}
 8003796:	370c      	adds	r7, #12
 8003798:	46bd      	mov	sp, r7
 800379a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379e:	4770      	bx	lr
 80037a0:	40021000 	.word	0x40021000

080037a4 <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 80037a4:	b480      	push	{r7}
 80037a6:	b083      	sub	sp, #12
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
 80037ac:	460b      	mov	r3, r1
 80037ae:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80037b0:	78fb      	ldrb	r3, [r7, #3]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d006      	beq.n	80037c4 <RCC_APB2PeriphResetCmd+0x20>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 80037b6:	4b09      	ldr	r3, [pc, #36]	; (80037dc <RCC_APB2PeriphResetCmd+0x38>)
 80037b8:	4a08      	ldr	r2, [pc, #32]	; (80037dc <RCC_APB2PeriphResetCmd+0x38>)
 80037ba:	68d1      	ldr	r1, [r2, #12]
 80037bc:	687a      	ldr	r2, [r7, #4]
 80037be:	430a      	orrs	r2, r1
 80037c0:	60da      	str	r2, [r3, #12]
 80037c2:	e006      	b.n	80037d2 <RCC_APB2PeriphResetCmd+0x2e>
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 80037c4:	4b05      	ldr	r3, [pc, #20]	; (80037dc <RCC_APB2PeriphResetCmd+0x38>)
 80037c6:	4a05      	ldr	r2, [pc, #20]	; (80037dc <RCC_APB2PeriphResetCmd+0x38>)
 80037c8:	68d1      	ldr	r1, [r2, #12]
 80037ca:	687a      	ldr	r2, [r7, #4]
 80037cc:	43d2      	mvns	r2, r2
 80037ce:	400a      	ands	r2, r1
 80037d0:	60da      	str	r2, [r3, #12]
  }
}
 80037d2:	370c      	adds	r7, #12
 80037d4:	46bd      	mov	sp, r7
 80037d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037da:	4770      	bx	lr
 80037dc:	40021000 	.word	0x40021000

080037e0 <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 80037e0:	b480      	push	{r7}
 80037e2:	b083      	sub	sp, #12
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
 80037e8:	460b      	mov	r3, r1
 80037ea:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80037ec:	78fb      	ldrb	r3, [r7, #3]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d006      	beq.n	8003800 <RCC_APB1PeriphResetCmd+0x20>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 80037f2:	4b09      	ldr	r3, [pc, #36]	; (8003818 <RCC_APB1PeriphResetCmd+0x38>)
 80037f4:	4a08      	ldr	r2, [pc, #32]	; (8003818 <RCC_APB1PeriphResetCmd+0x38>)
 80037f6:	6911      	ldr	r1, [r2, #16]
 80037f8:	687a      	ldr	r2, [r7, #4]
 80037fa:	430a      	orrs	r2, r1
 80037fc:	611a      	str	r2, [r3, #16]
 80037fe:	e006      	b.n	800380e <RCC_APB1PeriphResetCmd+0x2e>
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 8003800:	4b05      	ldr	r3, [pc, #20]	; (8003818 <RCC_APB1PeriphResetCmd+0x38>)
 8003802:	4a05      	ldr	r2, [pc, #20]	; (8003818 <RCC_APB1PeriphResetCmd+0x38>)
 8003804:	6911      	ldr	r1, [r2, #16]
 8003806:	687a      	ldr	r2, [r7, #4]
 8003808:	43d2      	mvns	r2, r2
 800380a:	400a      	ands	r2, r1
 800380c:	611a      	str	r2, [r3, #16]
  }
}
 800380e:	370c      	adds	r7, #12
 8003810:	46bd      	mov	sp, r7
 8003812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003816:	4770      	bx	lr
 8003818:	40021000 	.word	0x40021000

0800381c <I2C_DeInit>:
  * @brief  Deinitializes the I2Cx peripheral registers to their default reset values.
  * @param  I2Cx: where x can be 1 or 2 to select the I2C peripheral.
  * @retval None
  */
void I2C_DeInit(I2C_TypeDef* I2Cx)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b082      	sub	sp, #8
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  if (I2Cx == I2C1)
 8003824:	687a      	ldr	r2, [r7, #4]
 8003826:	4b0d      	ldr	r3, [pc, #52]	; (800385c <I2C_DeInit+0x40>)
 8003828:	429a      	cmp	r2, r3
 800382a:	d10a      	bne.n	8003842 <I2C_DeInit+0x26>
  {
    /* Enable I2C1 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, ENABLE);
 800382c:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8003830:	2101      	movs	r1, #1
 8003832:	f7ff ffd5 	bl	80037e0 <RCC_APB1PeriphResetCmd>
    /* Release I2C1 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, DISABLE);
 8003836:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800383a:	2100      	movs	r1, #0
 800383c:	f7ff ffd0 	bl	80037e0 <RCC_APB1PeriphResetCmd>
 8003840:	e009      	b.n	8003856 <I2C_DeInit+0x3a>
  }
  else
  {
    /* Enable I2C2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, ENABLE);
 8003842:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8003846:	2101      	movs	r1, #1
 8003848:	f7ff ffca 	bl	80037e0 <RCC_APB1PeriphResetCmd>
    /* Release I2C2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, DISABLE);
 800384c:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8003850:	2100      	movs	r1, #0
 8003852:	f7ff ffc5 	bl	80037e0 <RCC_APB1PeriphResetCmd>
  }
}
 8003856:	3708      	adds	r7, #8
 8003858:	46bd      	mov	sp, r7
 800385a:	bd80      	pop	{r7, pc}
 800385c:	40005400 	.word	0x40005400

08003860 <I2C_Init>:
  * @param  I2C_InitStruct: pointer to a I2C_InitTypeDef structure that
  *   contains the configuration information for the specified I2C peripheral.
  * @retval None
  */
void I2C_Init(I2C_TypeDef* I2Cx, I2C_InitTypeDef* I2C_InitStruct)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b08a      	sub	sp, #40	; 0x28
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
 8003868:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0, freqrange = 0;
 800386a:	2300      	movs	r3, #0
 800386c:	84fb      	strh	r3, [r7, #38]	; 0x26
 800386e:	2300      	movs	r3, #0
 8003870:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t result = 0x04;
 8003872:	2304      	movs	r3, #4
 8003874:	84bb      	strh	r3, [r7, #36]	; 0x24
  uint32_t pclk1 = 8000000;
 8003876:	4b57      	ldr	r3, [pc, #348]	; (80039d4 <I2C_Init+0x174>)
 8003878:	61fb      	str	r3, [r7, #28]
  assert_param(IS_I2C_ACK_STATE(I2C_InitStruct->I2C_Ack));
  assert_param(IS_I2C_ACKNOWLEDGE_ADDRESS(I2C_InitStruct->I2C_AcknowledgedAddress));

/*---------------------------- I2Cx CR2 Configuration ------------------------*/
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	889b      	ldrh	r3, [r3, #4]
 800387e:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Clear frequency FREQ[5:0] bits */
  tmpreg &= CR2_FREQ_Reset;
 8003880:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003882:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003886:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
 8003888:	f107 0308 	add.w	r3, r7, #8
 800388c:	4618      	mov	r0, r3
 800388e:	f7ff fe7d 	bl	800358c <RCC_GetClocksFreq>
  pclk1 = rcc_clocks.PCLK1_Frequency;
 8003892:	693b      	ldr	r3, [r7, #16]
 8003894:	61fb      	str	r3, [r7, #28]
  /* Set frequency bits depending on pclk1 value */
  freqrange = (uint16_t)(pclk1 / 1000000);
 8003896:	69fa      	ldr	r2, [r7, #28]
 8003898:	4b4f      	ldr	r3, [pc, #316]	; (80039d8 <I2C_Init+0x178>)
 800389a:	fba3 1302 	umull	r1, r3, r3, r2
 800389e:	0c9b      	lsrs	r3, r3, #18
 80038a0:	847b      	strh	r3, [r7, #34]	; 0x22
  tmpreg |= freqrange;
 80038a2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80038a4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80038a6:	4313      	orrs	r3, r2
 80038a8:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Write to I2Cx CR2 */
  I2Cx->CR2 = tmpreg;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80038ae:	809a      	strh	r2, [r3, #4]

/*---------------------------- I2Cx CCR Configuration ------------------------*/
  /* Disable the selected I2C peripheral to configure TRISE */
  I2Cx->CR1 &= CR1_PE_Reset;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	881b      	ldrh	r3, [r3, #0]
 80038b4:	b29b      	uxth	r3, r3
 80038b6:	f023 0301 	bic.w	r3, r3, #1
 80038ba:	b29a      	uxth	r2, r3
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	801a      	strh	r2, [r3, #0]
  /* Reset tmpreg value */
  /* Clear F/S, DUTY and CCR[11:0] bits */
  tmpreg = 0;
 80038c0:	2300      	movs	r3, #0
 80038c2:	84fb      	strh	r3, [r7, #38]	; 0x26

  /* Configure speed in standard mode */
  if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	681a      	ldr	r2, [r3, #0]
 80038c8:	4b44      	ldr	r3, [pc, #272]	; (80039dc <I2C_Init+0x17c>)
 80038ca:	429a      	cmp	r2, r3
 80038cc:	d815      	bhi.n	80038fa <I2C_Init+0x9a>
  {
    /* Standard mode speed calculate */
    result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed << 1));
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	005b      	lsls	r3, r3, #1
 80038d4:	69fa      	ldr	r2, [r7, #28]
 80038d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80038da:	84bb      	strh	r3, [r7, #36]	; 0x24
    /* Test if CCR value is under 0x4*/
    if (result < 0x04)
 80038dc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80038de:	2b03      	cmp	r3, #3
 80038e0:	d801      	bhi.n	80038e6 <I2C_Init+0x86>
    {
      /* Set minimum allowed value */
      result = 0x04;  
 80038e2:	2304      	movs	r3, #4
 80038e4:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    /* Set speed value for standard mode */
    tmpreg |= result;	  
 80038e6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80038e8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80038ea:	4313      	orrs	r3, r2
 80038ec:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* Set Maximum Rise Time for standard mode */
    I2Cx->TRISE = freqrange + 1; 
 80038ee:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80038f0:	3301      	adds	r3, #1
 80038f2:	b29a      	uxth	r2, r3
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	841a      	strh	r2, [r3, #32]
 80038f8:	e040      	b.n	800397c <I2C_Init+0x11c>
  }
  /* Configure speed in fast mode */
  else /*(I2C_InitStruct->I2C_ClockSpeed <= 400000)*/
  {
    if (I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_2)
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	88da      	ldrh	r2, [r3, #6]
 80038fe:	f64b 73ff 	movw	r3, #49151	; 0xbfff
 8003902:	429a      	cmp	r2, r3
 8003904:	d109      	bne.n	800391a <I2C_Init+0xba>
    {
      /* Fast mode speed calculate: Tlow/Thigh = 2 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 3));
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	681a      	ldr	r2, [r3, #0]
 800390a:	4613      	mov	r3, r2
 800390c:	005b      	lsls	r3, r3, #1
 800390e:	4413      	add	r3, r2
 8003910:	69fa      	ldr	r2, [r7, #28]
 8003912:	fbb2 f3f3 	udiv	r3, r2, r3
 8003916:	84bb      	strh	r3, [r7, #36]	; 0x24
 8003918:	e00e      	b.n	8003938 <I2C_Init+0xd8>
    }
    else /*I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_16_9*/
    {
      /* Fast mode speed calculate: Tlow/Thigh = 16/9 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 25));
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	681a      	ldr	r2, [r3, #0]
 800391e:	4613      	mov	r3, r2
 8003920:	009b      	lsls	r3, r3, #2
 8003922:	4413      	add	r3, r2
 8003924:	009a      	lsls	r2, r3, #2
 8003926:	4413      	add	r3, r2
 8003928:	69fa      	ldr	r2, [r7, #28]
 800392a:	fbb2 f3f3 	udiv	r3, r2, r3
 800392e:	84bb      	strh	r3, [r7, #36]	; 0x24
      /* Set DUTY bit */
      result |= I2C_DutyCycle_16_9;
 8003930:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003932:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003936:	84bb      	strh	r3, [r7, #36]	; 0x24
    }

    /* Test if CCR value is under 0x1*/
    if ((result & CCR_CCR_Set) == 0)
 8003938:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800393a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800393e:	2b00      	cmp	r3, #0
 8003940:	d103      	bne.n	800394a <I2C_Init+0xea>
    {
      /* Set minimum allowed value */
      result |= (uint16_t)0x0001;  
 8003942:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003944:	f043 0301 	orr.w	r3, r3, #1
 8003948:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    /* Set speed value and set F/S bit for fast mode */
    tmpreg |= (uint16_t)(result | CCR_FS_Set);
 800394a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800394c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800394e:	4313      	orrs	r3, r2
 8003950:	b29b      	uxth	r3, r3
 8003952:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003956:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800395a:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* Set Maximum Rise Time for fast mode */
    I2Cx->TRISE = (uint16_t)(((freqrange * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);  
 800395c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800395e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003962:	fb02 f303 	mul.w	r3, r2, r3
 8003966:	4a1e      	ldr	r2, [pc, #120]	; (80039e0 <I2C_Init+0x180>)
 8003968:	fb82 1203 	smull	r1, r2, r2, r3
 800396c:	1192      	asrs	r2, r2, #6
 800396e:	17db      	asrs	r3, r3, #31
 8003970:	1ad3      	subs	r3, r2, r3
 8003972:	b29b      	uxth	r3, r3
 8003974:	3301      	adds	r3, #1
 8003976:	b29a      	uxth	r2, r3
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	841a      	strh	r2, [r3, #32]
  }

  /* Write to I2Cx CCR */
  I2Cx->CCR = tmpreg;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8003980:	839a      	strh	r2, [r3, #28]
  /* Enable the selected I2C peripheral */
  I2Cx->CR1 |= CR1_PE_Set;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	881b      	ldrh	r3, [r3, #0]
 8003986:	b29b      	uxth	r3, r3
 8003988:	f043 0301 	orr.w	r3, r3, #1
 800398c:	b29a      	uxth	r2, r3
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	801a      	strh	r2, [r3, #0]

/*---------------------------- I2Cx CR1 Configuration ------------------------*/
  /* Get the I2Cx CR1 value */
  tmpreg = I2Cx->CR1;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	881b      	ldrh	r3, [r3, #0]
 8003996:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Clear ACK, SMBTYPE and  SMBUS bits */
  tmpreg &= CR1_CLEAR_Mask;
 8003998:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800399a:	f423 6381 	bic.w	r3, r3, #1032	; 0x408
 800399e:	f023 0302 	bic.w	r3, r3, #2
 80039a2:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Configure I2Cx: mode and acknowledgement */
  /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
  /* Set ACK bit according to I2C_Ack value */
  tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	889a      	ldrh	r2, [r3, #4]
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	895b      	ldrh	r3, [r3, #10]
 80039ac:	4313      	orrs	r3, r2
 80039ae:	b29a      	uxth	r2, r3
 80039b0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80039b2:	4313      	orrs	r3, r2
 80039b4:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Write to I2Cx CR1 */
  I2Cx->CR1 = tmpreg;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80039ba:	801a      	strh	r2, [r3, #0]

/*---------------------------- I2Cx OAR1 Configuration -----------------------*/
  /* Set I2Cx Own Address1 and acknowledged address */
  I2Cx->OAR1 = (I2C_InitStruct->I2C_AcknowledgedAddress | I2C_InitStruct->I2C_OwnAddress1);
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	899a      	ldrh	r2, [r3, #12]
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	891b      	ldrh	r3, [r3, #8]
 80039c4:	4313      	orrs	r3, r2
 80039c6:	b29a      	uxth	r2, r3
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	811a      	strh	r2, [r3, #8]
}
 80039cc:	3728      	adds	r7, #40	; 0x28
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd80      	pop	{r7, pc}
 80039d2:	bf00      	nop
 80039d4:	007a1200 	.word	0x007a1200
 80039d8:	431bde83 	.word	0x431bde83
 80039dc:	000186a0 	.word	0x000186a0
 80039e0:	10624dd3 	.word	0x10624dd3

080039e4 <I2C_Cmd>:
  * @param  NewState: new state of the I2Cx peripheral. 
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_Cmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 80039e4:	b480      	push	{r7}
 80039e6:	b083      	sub	sp, #12
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
 80039ec:	460b      	mov	r3, r1
 80039ee:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80039f0:	78fb      	ldrb	r3, [r7, #3]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d008      	beq.n	8003a08 <I2C_Cmd+0x24>
  {
    /* Enable the selected I2C peripheral */
    I2Cx->CR1 |= CR1_PE_Set;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	881b      	ldrh	r3, [r3, #0]
 80039fa:	b29b      	uxth	r3, r3
 80039fc:	f043 0301 	orr.w	r3, r3, #1
 8003a00:	b29a      	uxth	r2, r3
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	801a      	strh	r2, [r3, #0]
 8003a06:	e007      	b.n	8003a18 <I2C_Cmd+0x34>
  }
  else
  {
    /* Disable the selected I2C peripheral */
    I2Cx->CR1 &= CR1_PE_Reset;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	881b      	ldrh	r3, [r3, #0]
 8003a0c:	b29b      	uxth	r3, r3
 8003a0e:	f023 0301 	bic.w	r3, r3, #1
 8003a12:	b29a      	uxth	r2, r3
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	801a      	strh	r2, [r3, #0]
  }
}
 8003a18:	370c      	adds	r7, #12
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a20:	4770      	bx	lr
 8003a22:	bf00      	nop

08003a24 <I2C_GenerateSTART>:
  * @param  NewState: new state of the I2C START condition generation.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_GenerateSTART(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8003a24:	b480      	push	{r7}
 8003a26:	b083      	sub	sp, #12
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
 8003a2c:	460b      	mov	r3, r1
 8003a2e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8003a30:	78fb      	ldrb	r3, [r7, #3]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d008      	beq.n	8003a48 <I2C_GenerateSTART+0x24>
  {
    /* Generate a START condition */
    I2Cx->CR1 |= CR1_START_Set;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	881b      	ldrh	r3, [r3, #0]
 8003a3a:	b29b      	uxth	r3, r3
 8003a3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a40:	b29a      	uxth	r2, r3
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	801a      	strh	r2, [r3, #0]
 8003a46:	e007      	b.n	8003a58 <I2C_GenerateSTART+0x34>
  }
  else
  {
    /* Disable the START condition generation */
    I2Cx->CR1 &= CR1_START_Reset;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	881b      	ldrh	r3, [r3, #0]
 8003a4c:	b29b      	uxth	r3, r3
 8003a4e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a52:	b29a      	uxth	r2, r3
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	801a      	strh	r2, [r3, #0]
  }
}
 8003a58:	370c      	adds	r7, #12
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a60:	4770      	bx	lr
 8003a62:	bf00      	nop

08003a64 <I2C_GenerateSTOP>:
  * @param  NewState: new state of the I2C STOP condition generation.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_GenerateSTOP(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8003a64:	b480      	push	{r7}
 8003a66:	b083      	sub	sp, #12
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
 8003a6c:	460b      	mov	r3, r1
 8003a6e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8003a70:	78fb      	ldrb	r3, [r7, #3]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d008      	beq.n	8003a88 <I2C_GenerateSTOP+0x24>
  {
    /* Generate a STOP condition */
    I2Cx->CR1 |= CR1_STOP_Set;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	881b      	ldrh	r3, [r3, #0]
 8003a7a:	b29b      	uxth	r3, r3
 8003a7c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003a80:	b29a      	uxth	r2, r3
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	801a      	strh	r2, [r3, #0]
 8003a86:	e007      	b.n	8003a98 <I2C_GenerateSTOP+0x34>
  }
  else
  {
    /* Disable the STOP condition generation */
    I2Cx->CR1 &= CR1_STOP_Reset;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	881b      	ldrh	r3, [r3, #0]
 8003a8c:	b29b      	uxth	r3, r3
 8003a8e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003a92:	b29a      	uxth	r2, r3
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	801a      	strh	r2, [r3, #0]
  }
}
 8003a98:	370c      	adds	r7, #12
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa0:	4770      	bx	lr
 8003aa2:	bf00      	nop

08003aa4 <I2C_AcknowledgeConfig>:
  * @param  NewState: new state of the I2C Acknowledgement.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_AcknowledgeConfig(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b083      	sub	sp, #12
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
 8003aac:	460b      	mov	r3, r1
 8003aae:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8003ab0:	78fb      	ldrb	r3, [r7, #3]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d008      	beq.n	8003ac8 <I2C_AcknowledgeConfig+0x24>
  {
    /* Enable the acknowledgement */
    I2Cx->CR1 |= CR1_ACK_Set;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	881b      	ldrh	r3, [r3, #0]
 8003aba:	b29b      	uxth	r3, r3
 8003abc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003ac0:	b29a      	uxth	r2, r3
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	801a      	strh	r2, [r3, #0]
 8003ac6:	e007      	b.n	8003ad8 <I2C_AcknowledgeConfig+0x34>
  }
  else
  {
    /* Disable the acknowledgement */
    I2Cx->CR1 &= CR1_ACK_Reset;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	881b      	ldrh	r3, [r3, #0]
 8003acc:	b29b      	uxth	r3, r3
 8003ace:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003ad2:	b29a      	uxth	r2, r3
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	801a      	strh	r2, [r3, #0]
  }
}
 8003ad8:	370c      	adds	r7, #12
 8003ada:	46bd      	mov	sp, r7
 8003adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae0:	4770      	bx	lr
 8003ae2:	bf00      	nop

08003ae4 <I2C_SendData>:
  * @param  I2Cx: where x can be 1 or 2 to select the I2C peripheral.
  * @param  Data: Byte to be transmitted..
  * @retval None
  */
void I2C_SendData(I2C_TypeDef* I2Cx, uint8_t Data)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	b083      	sub	sp, #12
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
 8003aec:	460b      	mov	r3, r1
 8003aee:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Write in the DR register the data to be sent */
  I2Cx->DR = Data;
 8003af0:	78fb      	ldrb	r3, [r7, #3]
 8003af2:	b29a      	uxth	r2, r3
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	821a      	strh	r2, [r3, #16]
}
 8003af8:	370c      	adds	r7, #12
 8003afa:	46bd      	mov	sp, r7
 8003afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b00:	4770      	bx	lr
 8003b02:	bf00      	nop

08003b04 <I2C_ReceiveData>:
  * @brief  Returns the most recent received data by the I2Cx peripheral.
  * @param  I2Cx: where x can be 1 or 2 to select the I2C peripheral.
  * @retval The value of the received data.
  */
uint8_t I2C_ReceiveData(I2C_TypeDef* I2Cx)
{
 8003b04:	b480      	push	{r7}
 8003b06:	b083      	sub	sp, #12
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Return the data in the DR register */
  return (uint8_t)I2Cx->DR;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	8a1b      	ldrh	r3, [r3, #16]
 8003b10:	b29b      	uxth	r3, r3
 8003b12:	b2db      	uxtb	r3, r3
}
 8003b14:	4618      	mov	r0, r3
 8003b16:	370c      	adds	r7, #12
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1e:	4770      	bx	lr

08003b20 <I2C_Send7bitAddress>:
  *     @arg I2C_Direction_Transmitter: Transmitter mode
  *     @arg I2C_Direction_Receiver: Receiver mode
  * @retval None.
  */
void I2C_Send7bitAddress(I2C_TypeDef* I2Cx, uint8_t Address, uint8_t I2C_Direction)
{
 8003b20:	b480      	push	{r7}
 8003b22:	b083      	sub	sp, #12
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
 8003b28:	4613      	mov	r3, r2
 8003b2a:	460a      	mov	r2, r1
 8003b2c:	70fa      	strb	r2, [r7, #3]
 8003b2e:	70bb      	strb	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_DIRECTION(I2C_Direction));
  /* Test on the direction to set/reset the read/write bit */
  if (I2C_Direction != I2C_Direction_Transmitter)
 8003b30:	78bb      	ldrb	r3, [r7, #2]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d004      	beq.n	8003b40 <I2C_Send7bitAddress+0x20>
  {
    /* Set the address bit0 for read */
    Address |= OAR1_ADD0_Set;
 8003b36:	78fb      	ldrb	r3, [r7, #3]
 8003b38:	f043 0301 	orr.w	r3, r3, #1
 8003b3c:	70fb      	strb	r3, [r7, #3]
 8003b3e:	e003      	b.n	8003b48 <I2C_Send7bitAddress+0x28>
  }
  else
  {
    /* Reset the address bit0 for write */
    Address &= OAR1_ADD0_Reset;
 8003b40:	78fb      	ldrb	r3, [r7, #3]
 8003b42:	f023 0301 	bic.w	r3, r3, #1
 8003b46:	70fb      	strb	r3, [r7, #3]
  }
  /* Send the address */
  I2Cx->DR = Address;
 8003b48:	78fb      	ldrb	r3, [r7, #3]
 8003b4a:	b29a      	uxth	r2, r3
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	821a      	strh	r2, [r3, #16]
}
 8003b50:	370c      	adds	r7, #12
 8003b52:	46bd      	mov	sp, r7
 8003b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b58:	4770      	bx	lr
 8003b5a:	bf00      	nop

08003b5c <I2C_CheckEvent>:
  * @retval An ErrorStatus enumeration value:
  * - SUCCESS: Last event is equal to the I2C_EVENT
  * - ERROR: Last event is different from the I2C_EVENT
  */
ErrorStatus I2C_CheckEvent(I2C_TypeDef* I2Cx, uint32_t I2C_EVENT)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	b087      	sub	sp, #28
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
 8003b64:	6039      	str	r1, [r7, #0]
  uint32_t lastevent = 0;
 8003b66:	2300      	movs	r3, #0
 8003b68:	613b      	str	r3, [r7, #16]
  uint32_t flag1 = 0, flag2 = 0;
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	60fb      	str	r3, [r7, #12]
 8003b6e:	2300      	movs	r3, #0
 8003b70:	60bb      	str	r3, [r7, #8]
  ErrorStatus status = ERROR;
 8003b72:	2300      	movs	r3, #0
 8003b74:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_EVENT(I2C_EVENT));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	8a9b      	ldrh	r3, [r3, #20]
 8003b7a:	b29b      	uxth	r3, r3
 8003b7c:	60fb      	str	r3, [r7, #12]
  flag2 = I2Cx->SR2;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	8b1b      	ldrh	r3, [r3, #24]
 8003b82:	b29b      	uxth	r3, r3
 8003b84:	60bb      	str	r3, [r7, #8]
  flag2 = flag2 << 16;
 8003b86:	68bb      	ldr	r3, [r7, #8]
 8003b88:	041b      	lsls	r3, r3, #16
 8003b8a:	60bb      	str	r3, [r7, #8]

  /* Get the last event value from I2C status register */
  lastevent = (flag1 | flag2) & FLAG_Mask;
 8003b8c:	68fa      	ldr	r2, [r7, #12]
 8003b8e:	68bb      	ldr	r3, [r7, #8]
 8003b90:	4313      	orrs	r3, r2
 8003b92:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003b96:	613b      	str	r3, [r7, #16]

  /* Check whether the last event contains the I2C_EVENT */
  if ((lastevent & I2C_EVENT) == I2C_EVENT)
 8003b98:	693a      	ldr	r2, [r7, #16]
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	401a      	ands	r2, r3
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	429a      	cmp	r2, r3
 8003ba2:	d102      	bne.n	8003baa <I2C_CheckEvent+0x4e>
  {
    /* SUCCESS: last event is equal to I2C_EVENT */
    status = SUCCESS;
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	75fb      	strb	r3, [r7, #23]
 8003ba8:	e001      	b.n	8003bae <I2C_CheckEvent+0x52>
  }
  else
  {
    /* ERROR: last event is different from I2C_EVENT */
    status = ERROR;
 8003baa:	2300      	movs	r3, #0
 8003bac:	75fb      	strb	r3, [r7, #23]
  }
  /* Return status */
  return status;
 8003bae:	7dfb      	ldrb	r3, [r7, #23]
}
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	371c      	adds	r7, #28
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bba:	4770      	bx	lr

08003bbc <I2C_GetFlagStatus>:
  *   Address matched flag (Slave mode)"ENDA"
  *     @arg I2C_FLAG_SB: Start bit flag (Master mode)
  * @retval The new state of I2C_FLAG (SET or RESET).
  */
FlagStatus I2C_GetFlagStatus(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	b087      	sub	sp, #28
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
 8003bc4:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t i2creg = 0, i2cxbase = 0;
 8003bca:	2300      	movs	r3, #0
 8003bcc:	613b      	str	r3, [r7, #16]
 8003bce:	2300      	movs	r3, #0
 8003bd0:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_FLAG(I2C_FLAG));

  /* Get the I2Cx peripheral base address */
  i2cxbase = (uint32_t)I2Cx;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	60fb      	str	r3, [r7, #12]
  
  /* Read flag register index */
  i2creg = I2C_FLAG >> 28;
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	0f1b      	lsrs	r3, r3, #28
 8003bda:	613b      	str	r3, [r7, #16]
  
  /* Get bit[23:0] of the flag */
  I2C_FLAG &= FLAG_Mask;
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003be2:	603b      	str	r3, [r7, #0]
  
  if(i2creg != 0)
 8003be4:	693b      	ldr	r3, [r7, #16]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d003      	beq.n	8003bf2 <I2C_GetFlagStatus+0x36>
  {
    /* Get the I2Cx SR1 register address */
    i2cxbase += 0x14;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	3314      	adds	r3, #20
 8003bee:	60fb      	str	r3, [r7, #12]
 8003bf0:	e005      	b.n	8003bfe <I2C_GetFlagStatus+0x42>
  }
  else
  {
    /* Flag in I2Cx SR2 Register */
    I2C_FLAG = (uint32_t)(I2C_FLAG >> 16);
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	0c1b      	lsrs	r3, r3, #16
 8003bf6:	603b      	str	r3, [r7, #0]
    /* Get the I2Cx SR2 register address */
    i2cxbase += 0x18;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	3318      	adds	r3, #24
 8003bfc:	60fb      	str	r3, [r7, #12]
  }
  
  if(((*(__IO uint32_t *)i2cxbase) & I2C_FLAG) != (uint32_t)RESET)
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681a      	ldr	r2, [r3, #0]
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	4013      	ands	r3, r2
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d002      	beq.n	8003c10 <I2C_GetFlagStatus+0x54>
  {
    /* I2C_FLAG is set */
    bitstatus = SET;
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	75fb      	strb	r3, [r7, #23]
 8003c0e:	e001      	b.n	8003c14 <I2C_GetFlagStatus+0x58>
  }
  else
  {
    /* I2C_FLAG is reset */
    bitstatus = RESET;
 8003c10:	2300      	movs	r3, #0
 8003c12:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return the I2C_FLAG status */
  return  bitstatus;
 8003c14:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c16:	4618      	mov	r0, r3
 8003c18:	371c      	adds	r7, #28
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c20:	4770      	bx	lr
 8003c22:	bf00      	nop

08003c24 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8003c24:	b480      	push	{r7}
 8003c26:	b089      	sub	sp, #36	; 0x24
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
 8003c2c:	6039      	str	r1, [r7, #0]
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
 8003c2e:	2300      	movs	r3, #0
 8003c30:	61fb      	str	r3, [r7, #28]
 8003c32:	2300      	movs	r3, #0
 8003c34:	613b      	str	r3, [r7, #16]
 8003c36:	2300      	movs	r3, #0
 8003c38:	61bb      	str	r3, [r7, #24]
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0x00, pinmask = 0x00;
 8003c3e:	2300      	movs	r3, #0
 8003c40:	617b      	str	r3, [r7, #20]
 8003c42:	2300      	movs	r3, #0
 8003c44:	60bb      	str	r3, [r7, #8]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	78db      	ldrb	r3, [r3, #3]
 8003c4a:	f003 030f 	and.w	r3, r3, #15
 8003c4e:	61fb      	str	r3, [r7, #28]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	78db      	ldrb	r3, [r3, #3]
 8003c54:	f003 0310 	and.w	r3, r3, #16
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d004      	beq.n	8003c66 <GPIO_Init+0x42>
  { 
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	789b      	ldrb	r3, [r3, #2]
 8003c60:	69fa      	ldr	r2, [r7, #28]
 8003c62:	4313      	orrs	r3, r2
 8003c64:	61fb      	str	r3, [r7, #28]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	881b      	ldrh	r3, [r3, #0]
 8003c6a:	b2db      	uxtb	r3, r3
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d044      	beq.n	8003cfa <GPIO_Init+0xd6>
  {
    tmpreg = GPIOx->CRL;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8003c76:	2300      	movs	r3, #0
 8003c78:	61bb      	str	r3, [r7, #24]
 8003c7a:	e038      	b.n	8003cee <GPIO_Init+0xca>
    {
      pos = ((uint32_t)0x01) << pinpos;
 8003c7c:	69bb      	ldr	r3, [r7, #24]
 8003c7e:	2201      	movs	r2, #1
 8003c80:	fa02 f303 	lsl.w	r3, r2, r3
 8003c84:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	881b      	ldrh	r3, [r3, #0]
 8003c8a:	461a      	mov	r2, r3
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	4013      	ands	r3, r2
 8003c90:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 8003c92:	693a      	ldr	r2, [r7, #16]
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	429a      	cmp	r2, r3
 8003c98:	d126      	bne.n	8003ce8 <GPIO_Init+0xc4>
      {
        pos = pinpos << 2;
 8003c9a:	69bb      	ldr	r3, [r7, #24]
 8003c9c:	009b      	lsls	r3, r3, #2
 8003c9e:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	220f      	movs	r2, #15
 8003ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca8:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 8003caa:	68bb      	ldr	r3, [r7, #8]
 8003cac:	43db      	mvns	r3, r3
 8003cae:	697a      	ldr	r2, [r7, #20]
 8003cb0:	4013      	ands	r3, r2
 8003cb2:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	69fa      	ldr	r2, [r7, #28]
 8003cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8003cbc:	697a      	ldr	r2, [r7, #20]
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	78db      	ldrb	r3, [r3, #3]
 8003cc6:	2b28      	cmp	r3, #40	; 0x28
 8003cc8:	d105      	bne.n	8003cd6 <GPIO_Init+0xb2>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 8003cca:	69bb      	ldr	r3, [r7, #24]
 8003ccc:	2201      	movs	r2, #1
 8003cce:	409a      	lsls	r2, r3
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	615a      	str	r2, [r3, #20]
 8003cd4:	e008      	b.n	8003ce8 <GPIO_Init+0xc4>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	78db      	ldrb	r3, [r3, #3]
 8003cda:	2b48      	cmp	r3, #72	; 0x48
 8003cdc:	d104      	bne.n	8003ce8 <GPIO_Init+0xc4>
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 8003cde:	69bb      	ldr	r3, [r7, #24]
 8003ce0:	2201      	movs	r2, #1
 8003ce2:	409a      	lsls	r2, r3
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	611a      	str	r2, [r3, #16]
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
  {
    tmpreg = GPIOx->CRL;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8003ce8:	69bb      	ldr	r3, [r7, #24]
 8003cea:	3301      	adds	r3, #1
 8003cec:	61bb      	str	r3, [r7, #24]
 8003cee:	69bb      	ldr	r3, [r7, #24]
 8003cf0:	2b07      	cmp	r3, #7
 8003cf2:	d9c3      	bls.n	8003c7c <GPIO_Init+0x58>
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	697a      	ldr	r2, [r7, #20]
 8003cf8:	601a      	str	r2, [r3, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	881b      	ldrh	r3, [r3, #0]
 8003cfe:	2bff      	cmp	r3, #255	; 0xff
 8003d00:	d946      	bls.n	8003d90 <GPIO_Init+0x16c>
  {
    tmpreg = GPIOx->CRH;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8003d08:	2300      	movs	r3, #0
 8003d0a:	61bb      	str	r3, [r7, #24]
 8003d0c:	e03a      	b.n	8003d84 <GPIO_Init+0x160>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
 8003d0e:	69bb      	ldr	r3, [r7, #24]
 8003d10:	3308      	adds	r3, #8
 8003d12:	2201      	movs	r2, #1
 8003d14:	fa02 f303 	lsl.w	r3, r2, r3
 8003d18:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	881b      	ldrh	r3, [r3, #0]
 8003d1e:	461a      	mov	r2, r3
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	4013      	ands	r3, r2
 8003d24:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 8003d26:	693a      	ldr	r2, [r7, #16]
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	429a      	cmp	r2, r3
 8003d2c:	d127      	bne.n	8003d7e <GPIO_Init+0x15a>
      {
        pos = pinpos << 2;
 8003d2e:	69bb      	ldr	r3, [r7, #24]
 8003d30:	009b      	lsls	r3, r3, #2
 8003d32:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	220f      	movs	r2, #15
 8003d38:	fa02 f303 	lsl.w	r3, r2, r3
 8003d3c:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 8003d3e:	68bb      	ldr	r3, [r7, #8]
 8003d40:	43db      	mvns	r3, r3
 8003d42:	697a      	ldr	r2, [r7, #20]
 8003d44:	4013      	ands	r3, r2
 8003d46:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	69fa      	ldr	r2, [r7, #28]
 8003d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d50:	697a      	ldr	r2, [r7, #20]
 8003d52:	4313      	orrs	r3, r2
 8003d54:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	78db      	ldrb	r3, [r3, #3]
 8003d5a:	2b28      	cmp	r3, #40	; 0x28
 8003d5c:	d105      	bne.n	8003d6a <GPIO_Init+0x146>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8003d5e:	69bb      	ldr	r3, [r7, #24]
 8003d60:	3308      	adds	r3, #8
 8003d62:	2201      	movs	r2, #1
 8003d64:	409a      	lsls	r2, r3
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	615a      	str	r2, [r3, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	78db      	ldrb	r3, [r3, #3]
 8003d6e:	2b48      	cmp	r3, #72	; 0x48
 8003d70:	d105      	bne.n	8003d7e <GPIO_Init+0x15a>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8003d72:	69bb      	ldr	r3, [r7, #24]
 8003d74:	3308      	adds	r3, #8
 8003d76:	2201      	movs	r2, #1
 8003d78:	409a      	lsls	r2, r3
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	611a      	str	r2, [r3, #16]
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
  {
    tmpreg = GPIOx->CRH;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8003d7e:	69bb      	ldr	r3, [r7, #24]
 8003d80:	3301      	adds	r3, #1
 8003d82:	61bb      	str	r3, [r7, #24]
 8003d84:	69bb      	ldr	r3, [r7, #24]
 8003d86:	2b07      	cmp	r3, #7
 8003d88:	d9c1      	bls.n	8003d0e <GPIO_Init+0xea>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
        }
      }
    }
    GPIOx->CRH = tmpreg;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	697a      	ldr	r2, [r7, #20]
 8003d8e:	605a      	str	r2, [r3, #4]
  }
}
 8003d90:	3724      	adds	r7, #36	; 0x24
 8003d92:	46bd      	mov	sp, r7
 8003d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d98:	4770      	bx	lr
 8003d9a:	bf00      	nop

08003d9c <GPIO_ReadOutputData>:
  * @brief  Reads the specified GPIO output data port.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @retval GPIO output data port value.
  */
uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	b083      	sub	sp, #12
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
    
  return ((uint16_t)GPIOx->ODR);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	68db      	ldr	r3, [r3, #12]
 8003da8:	b29b      	uxth	r3, r3
}
 8003daa:	4618      	mov	r0, r3
 8003dac:	370c      	adds	r7, #12
 8003dae:	46bd      	mov	sp, r7
 8003db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db4:	4770      	bx	lr
 8003db6:	bf00      	nop

08003db8 <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003db8:	b480      	push	{r7}
 8003dba:	b083      	sub	sp, #12
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
 8003dc0:	460b      	mov	r3, r1
 8003dc2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BSRR = GPIO_Pin;
 8003dc4:	887a      	ldrh	r2, [r7, #2]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	611a      	str	r2, [r3, #16]
}
 8003dca:	370c      	adds	r7, #12
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd2:	4770      	bx	lr

08003dd4 <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	b083      	sub	sp, #12
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
 8003ddc:	460b      	mov	r3, r1
 8003dde:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BRR = GPIO_Pin;
 8003de0:	887a      	ldrh	r2, [r7, #2]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	615a      	str	r2, [r3, #20]
}
 8003de6:	370c      	adds	r7, #12
 8003de8:	46bd      	mov	sp, r7
 8003dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dee:	4770      	bx	lr

08003df0 <DMA_DeInit>:
  * @param  DMAy_Channelx: where y can be 1 or 2 to select the DMA and
  *   x can be 1 to 7 for DMA1 and 1 to 5 for DMA2 to select the DMA Channel.
  * @retval None
  */
void DMA_DeInit(DMA_Channel_TypeDef* DMAy_Channelx)
{
 8003df0:	b480      	push	{r7}
 8003df2:	b083      	sub	sp, #12
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
  
  /* Disable the selected DMAy Channelx */
  DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR1_EN);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681a      	ldr	r2, [r3, #0]
 8003dfc:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8003e00:	4013      	ands	r3, r2
 8003e02:	687a      	ldr	r2, [r7, #4]
 8003e04:	6013      	str	r3, [r2, #0]
  
  /* Reset DMAy Channelx control register */
  DMAy_Channelx->CCR  = 0;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	601a      	str	r2, [r3, #0]
  
  /* Reset DMAy Channelx remaining bytes register */
  DMAy_Channelx->CNDTR = 0;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	605a      	str	r2, [r3, #4]
  
  /* Reset DMAy Channelx peripheral address register */
  DMAy_Channelx->CPAR  = 0;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2200      	movs	r2, #0
 8003e16:	609a      	str	r2, [r3, #8]
  
  /* Reset DMAy Channelx memory address register */
  DMAy_Channelx->CMAR = 0;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	60da      	str	r2, [r3, #12]
  
  if (DMAy_Channelx == DMA1_Channel1)
 8003e1e:	687a      	ldr	r2, [r7, #4]
 8003e20:	4b43      	ldr	r3, [pc, #268]	; (8003f30 <DMA_DeInit+0x140>)
 8003e22:	429a      	cmp	r2, r3
 8003e24:	d106      	bne.n	8003e34 <DMA_DeInit+0x44>
  {
    /* Reset interrupt pending bits for DMA1 Channel1 */
    DMA1->IFCR |= DMA1_Channel1_IT_Mask;
 8003e26:	4b43      	ldr	r3, [pc, #268]	; (8003f34 <DMA_DeInit+0x144>)
 8003e28:	4a42      	ldr	r2, [pc, #264]	; (8003f34 <DMA_DeInit+0x144>)
 8003e2a:	6852      	ldr	r2, [r2, #4]
 8003e2c:	f042 020f 	orr.w	r2, r2, #15
 8003e30:	605a      	str	r2, [r3, #4]
 8003e32:	e077      	b.n	8003f24 <DMA_DeInit+0x134>
  }
  else if (DMAy_Channelx == DMA1_Channel2)
 8003e34:	687a      	ldr	r2, [r7, #4]
 8003e36:	4b40      	ldr	r3, [pc, #256]	; (8003f38 <DMA_DeInit+0x148>)
 8003e38:	429a      	cmp	r2, r3
 8003e3a:	d106      	bne.n	8003e4a <DMA_DeInit+0x5a>
  {
    /* Reset interrupt pending bits for DMA1 Channel2 */
    DMA1->IFCR |= DMA1_Channel2_IT_Mask;
 8003e3c:	4b3d      	ldr	r3, [pc, #244]	; (8003f34 <DMA_DeInit+0x144>)
 8003e3e:	4a3d      	ldr	r2, [pc, #244]	; (8003f34 <DMA_DeInit+0x144>)
 8003e40:	6852      	ldr	r2, [r2, #4]
 8003e42:	f042 02f0 	orr.w	r2, r2, #240	; 0xf0
 8003e46:	605a      	str	r2, [r3, #4]
 8003e48:	e06c      	b.n	8003f24 <DMA_DeInit+0x134>
  }
  else if (DMAy_Channelx == DMA1_Channel3)
 8003e4a:	687a      	ldr	r2, [r7, #4]
 8003e4c:	4b3b      	ldr	r3, [pc, #236]	; (8003f3c <DMA_DeInit+0x14c>)
 8003e4e:	429a      	cmp	r2, r3
 8003e50:	d106      	bne.n	8003e60 <DMA_DeInit+0x70>
  {
    /* Reset interrupt pending bits for DMA1 Channel3 */
    DMA1->IFCR |= DMA1_Channel3_IT_Mask;
 8003e52:	4b38      	ldr	r3, [pc, #224]	; (8003f34 <DMA_DeInit+0x144>)
 8003e54:	4a37      	ldr	r2, [pc, #220]	; (8003f34 <DMA_DeInit+0x144>)
 8003e56:	6852      	ldr	r2, [r2, #4]
 8003e58:	f442 6270 	orr.w	r2, r2, #3840	; 0xf00
 8003e5c:	605a      	str	r2, [r3, #4]
 8003e5e:	e061      	b.n	8003f24 <DMA_DeInit+0x134>
  }
  else if (DMAy_Channelx == DMA1_Channel4)
 8003e60:	687a      	ldr	r2, [r7, #4]
 8003e62:	4b37      	ldr	r3, [pc, #220]	; (8003f40 <DMA_DeInit+0x150>)
 8003e64:	429a      	cmp	r2, r3
 8003e66:	d106      	bne.n	8003e76 <DMA_DeInit+0x86>
  {
    /* Reset interrupt pending bits for DMA1 Channel4 */
    DMA1->IFCR |= DMA1_Channel4_IT_Mask;
 8003e68:	4b32      	ldr	r3, [pc, #200]	; (8003f34 <DMA_DeInit+0x144>)
 8003e6a:	4a32      	ldr	r2, [pc, #200]	; (8003f34 <DMA_DeInit+0x144>)
 8003e6c:	6852      	ldr	r2, [r2, #4]
 8003e6e:	f442 4270 	orr.w	r2, r2, #61440	; 0xf000
 8003e72:	605a      	str	r2, [r3, #4]
 8003e74:	e056      	b.n	8003f24 <DMA_DeInit+0x134>
  }
  else if (DMAy_Channelx == DMA1_Channel5)
 8003e76:	687a      	ldr	r2, [r7, #4]
 8003e78:	4b32      	ldr	r3, [pc, #200]	; (8003f44 <DMA_DeInit+0x154>)
 8003e7a:	429a      	cmp	r2, r3
 8003e7c:	d106      	bne.n	8003e8c <DMA_DeInit+0x9c>
  {
    /* Reset interrupt pending bits for DMA1 Channel5 */
    DMA1->IFCR |= DMA1_Channel5_IT_Mask;
 8003e7e:	4b2d      	ldr	r3, [pc, #180]	; (8003f34 <DMA_DeInit+0x144>)
 8003e80:	4a2c      	ldr	r2, [pc, #176]	; (8003f34 <DMA_DeInit+0x144>)
 8003e82:	6852      	ldr	r2, [r2, #4]
 8003e84:	f442 2270 	orr.w	r2, r2, #983040	; 0xf0000
 8003e88:	605a      	str	r2, [r3, #4]
 8003e8a:	e04b      	b.n	8003f24 <DMA_DeInit+0x134>
  }
  else if (DMAy_Channelx == DMA1_Channel6)
 8003e8c:	687a      	ldr	r2, [r7, #4]
 8003e8e:	4b2e      	ldr	r3, [pc, #184]	; (8003f48 <DMA_DeInit+0x158>)
 8003e90:	429a      	cmp	r2, r3
 8003e92:	d106      	bne.n	8003ea2 <DMA_DeInit+0xb2>
  {
    /* Reset interrupt pending bits for DMA1 Channel6 */
    DMA1->IFCR |= DMA1_Channel6_IT_Mask;
 8003e94:	4b27      	ldr	r3, [pc, #156]	; (8003f34 <DMA_DeInit+0x144>)
 8003e96:	4a27      	ldr	r2, [pc, #156]	; (8003f34 <DMA_DeInit+0x144>)
 8003e98:	6852      	ldr	r2, [r2, #4]
 8003e9a:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8003e9e:	605a      	str	r2, [r3, #4]
 8003ea0:	e040      	b.n	8003f24 <DMA_DeInit+0x134>
  }
  else if (DMAy_Channelx == DMA1_Channel7)
 8003ea2:	687a      	ldr	r2, [r7, #4]
 8003ea4:	4b29      	ldr	r3, [pc, #164]	; (8003f4c <DMA_DeInit+0x15c>)
 8003ea6:	429a      	cmp	r2, r3
 8003ea8:	d106      	bne.n	8003eb8 <DMA_DeInit+0xc8>
  {
    /* Reset interrupt pending bits for DMA1 Channel7 */
    DMA1->IFCR |= DMA1_Channel7_IT_Mask;
 8003eaa:	4b22      	ldr	r3, [pc, #136]	; (8003f34 <DMA_DeInit+0x144>)
 8003eac:	4a21      	ldr	r2, [pc, #132]	; (8003f34 <DMA_DeInit+0x144>)
 8003eae:	6852      	ldr	r2, [r2, #4]
 8003eb0:	f042 6270 	orr.w	r2, r2, #251658240	; 0xf000000
 8003eb4:	605a      	str	r2, [r3, #4]
 8003eb6:	e035      	b.n	8003f24 <DMA_DeInit+0x134>
  }
  else if (DMAy_Channelx == DMA2_Channel1)
 8003eb8:	687a      	ldr	r2, [r7, #4]
 8003eba:	4b25      	ldr	r3, [pc, #148]	; (8003f50 <DMA_DeInit+0x160>)
 8003ebc:	429a      	cmp	r2, r3
 8003ebe:	d106      	bne.n	8003ece <DMA_DeInit+0xde>
  {
    /* Reset interrupt pending bits for DMA2 Channel1 */
    DMA2->IFCR |= DMA2_Channel1_IT_Mask;
 8003ec0:	4b24      	ldr	r3, [pc, #144]	; (8003f54 <DMA_DeInit+0x164>)
 8003ec2:	4a24      	ldr	r2, [pc, #144]	; (8003f54 <DMA_DeInit+0x164>)
 8003ec4:	6852      	ldr	r2, [r2, #4]
 8003ec6:	f042 020f 	orr.w	r2, r2, #15
 8003eca:	605a      	str	r2, [r3, #4]
 8003ecc:	e02a      	b.n	8003f24 <DMA_DeInit+0x134>
  }
  else if (DMAy_Channelx == DMA2_Channel2)
 8003ece:	687a      	ldr	r2, [r7, #4]
 8003ed0:	4b21      	ldr	r3, [pc, #132]	; (8003f58 <DMA_DeInit+0x168>)
 8003ed2:	429a      	cmp	r2, r3
 8003ed4:	d106      	bne.n	8003ee4 <DMA_DeInit+0xf4>
  {
    /* Reset interrupt pending bits for DMA2 Channel2 */
    DMA2->IFCR |= DMA2_Channel2_IT_Mask;
 8003ed6:	4b1f      	ldr	r3, [pc, #124]	; (8003f54 <DMA_DeInit+0x164>)
 8003ed8:	4a1e      	ldr	r2, [pc, #120]	; (8003f54 <DMA_DeInit+0x164>)
 8003eda:	6852      	ldr	r2, [r2, #4]
 8003edc:	f042 02f0 	orr.w	r2, r2, #240	; 0xf0
 8003ee0:	605a      	str	r2, [r3, #4]
 8003ee2:	e01f      	b.n	8003f24 <DMA_DeInit+0x134>
  }
  else if (DMAy_Channelx == DMA2_Channel3)
 8003ee4:	687a      	ldr	r2, [r7, #4]
 8003ee6:	4b1d      	ldr	r3, [pc, #116]	; (8003f5c <DMA_DeInit+0x16c>)
 8003ee8:	429a      	cmp	r2, r3
 8003eea:	d106      	bne.n	8003efa <DMA_DeInit+0x10a>
  {
    /* Reset interrupt pending bits for DMA2 Channel3 */
    DMA2->IFCR |= DMA2_Channel3_IT_Mask;
 8003eec:	4b19      	ldr	r3, [pc, #100]	; (8003f54 <DMA_DeInit+0x164>)
 8003eee:	4a19      	ldr	r2, [pc, #100]	; (8003f54 <DMA_DeInit+0x164>)
 8003ef0:	6852      	ldr	r2, [r2, #4]
 8003ef2:	f442 6270 	orr.w	r2, r2, #3840	; 0xf00
 8003ef6:	605a      	str	r2, [r3, #4]
 8003ef8:	e014      	b.n	8003f24 <DMA_DeInit+0x134>
  }
  else if (DMAy_Channelx == DMA2_Channel4)
 8003efa:	687a      	ldr	r2, [r7, #4]
 8003efc:	4b18      	ldr	r3, [pc, #96]	; (8003f60 <DMA_DeInit+0x170>)
 8003efe:	429a      	cmp	r2, r3
 8003f00:	d106      	bne.n	8003f10 <DMA_DeInit+0x120>
  {
    /* Reset interrupt pending bits for DMA2 Channel4 */
    DMA2->IFCR |= DMA2_Channel4_IT_Mask;
 8003f02:	4b14      	ldr	r3, [pc, #80]	; (8003f54 <DMA_DeInit+0x164>)
 8003f04:	4a13      	ldr	r2, [pc, #76]	; (8003f54 <DMA_DeInit+0x164>)
 8003f06:	6852      	ldr	r2, [r2, #4]
 8003f08:	f442 4270 	orr.w	r2, r2, #61440	; 0xf000
 8003f0c:	605a      	str	r2, [r3, #4]
 8003f0e:	e009      	b.n	8003f24 <DMA_DeInit+0x134>
  }
  else
  { 
    if (DMAy_Channelx == DMA2_Channel5)
 8003f10:	687a      	ldr	r2, [r7, #4]
 8003f12:	4b14      	ldr	r3, [pc, #80]	; (8003f64 <DMA_DeInit+0x174>)
 8003f14:	429a      	cmp	r2, r3
 8003f16:	d105      	bne.n	8003f24 <DMA_DeInit+0x134>
    {
      /* Reset interrupt pending bits for DMA2 Channel5 */
      DMA2->IFCR |= DMA2_Channel5_IT_Mask;
 8003f18:	4b0e      	ldr	r3, [pc, #56]	; (8003f54 <DMA_DeInit+0x164>)
 8003f1a:	4a0e      	ldr	r2, [pc, #56]	; (8003f54 <DMA_DeInit+0x164>)
 8003f1c:	6852      	ldr	r2, [r2, #4]
 8003f1e:	f442 2270 	orr.w	r2, r2, #983040	; 0xf0000
 8003f22:	605a      	str	r2, [r3, #4]
    }
  }
}
 8003f24:	370c      	adds	r7, #12
 8003f26:	46bd      	mov	sp, r7
 8003f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2c:	4770      	bx	lr
 8003f2e:	bf00      	nop
 8003f30:	40020008 	.word	0x40020008
 8003f34:	40020000 	.word	0x40020000
 8003f38:	4002001c 	.word	0x4002001c
 8003f3c:	40020030 	.word	0x40020030
 8003f40:	40020044 	.word	0x40020044
 8003f44:	40020058 	.word	0x40020058
 8003f48:	4002006c 	.word	0x4002006c
 8003f4c:	40020080 	.word	0x40020080
 8003f50:	40020408 	.word	0x40020408
 8003f54:	40020400 	.word	0x40020400
 8003f58:	4002041c 	.word	0x4002041c
 8003f5c:	40020430 	.word	0x40020430
 8003f60:	40020444 	.word	0x40020444
 8003f64:	40020458 	.word	0x40020458

08003f68 <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that
  *         contains the configuration information for the specified DMA Channel.
  * @retval None
  */
void DMA_Init(DMA_Channel_TypeDef* DMAy_Channelx, DMA_InitTypeDef* DMA_InitStruct)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b085      	sub	sp, #20
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
 8003f70:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8003f72:	2300      	movs	r3, #0
 8003f74:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_PRIORITY(DMA_InitStruct->DMA_Priority));
  assert_param(IS_DMA_M2M_STATE(DMA_InitStruct->DMA_M2M));

/*--------------------------- DMAy Channelx CCR Configuration -----------------*/
  /* Get the DMAy_Channelx CCR value */
  tmpreg = DMAy_Channelx->CCR;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	60fb      	str	r3, [r7, #12]
  /* Clear MEM2MEM, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= CCR_CLEAR_Mask;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003f82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f86:	60fb      	str	r3, [r7, #12]
  /* Set MINC bit according to DMA_MemoryInc value */
  /* Set PSIZE bits according to DMA_PeripheralDataSize value */
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	689a      	ldr	r2, [r3, #8]
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	6a1b      	ldr	r3, [r3, #32]
 8003f90:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	691b      	ldr	r3, [r3, #16]
  /* Set MINC bit according to DMA_MemoryInc value */
  /* Set PSIZE bits according to DMA_PeripheralDataSize value */
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 8003f96:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	695b      	ldr	r3, [r3, #20]
 8003f9c:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	699b      	ldr	r3, [r3, #24]
  /* Set PSIZE bits according to DMA_PeripheralDataSize value */
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8003fa2:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	69db      	ldr	r3, [r3, #28]
 8003fa8:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Priority | DMA_InitStruct->DMA_M2M;
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8003fae:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Priority | DMA_InitStruct->DMA_M2M;
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fb4:	4313      	orrs	r3, r2
  /* Set MINC bit according to DMA_MemoryInc value */
  /* Set PSIZE bits according to DMA_PeripheralDataSize value */
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 8003fb6:	68fa      	ldr	r2, [r7, #12]
 8003fb8:	4313      	orrs	r3, r2
 8003fba:	60fb      	str	r3, [r7, #12]
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Priority | DMA_InitStruct->DMA_M2M;

  /* Write to DMAy Channelx CCR */
  DMAy_Channelx->CCR = tmpreg;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	68fa      	ldr	r2, [r7, #12]
 8003fc0:	601a      	str	r2, [r3, #0]

/*--------------------------- DMAy Channelx CNDTR Configuration ---------------*/
  /* Write to DMAy Channelx CNDTR */
  DMAy_Channelx->CNDTR = DMA_InitStruct->DMA_BufferSize;
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	68da      	ldr	r2, [r3, #12]
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	605a      	str	r2, [r3, #4]

/*--------------------------- DMAy Channelx CPAR Configuration ----------------*/
  /* Write to DMAy Channelx CPAR */
  DMAy_Channelx->CPAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	681a      	ldr	r2, [r3, #0]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	609a      	str	r2, [r3, #8]

/*--------------------------- DMAy Channelx CMAR Configuration ----------------*/
  /* Write to DMAy Channelx CMAR */
  DMAy_Channelx->CMAR = DMA_InitStruct->DMA_MemoryBaseAddr;
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	685a      	ldr	r2, [r3, #4]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	60da      	str	r2, [r3, #12]
}
 8003fda:	3714      	adds	r7, #20
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe2:	4770      	bx	lr

08003fe4 <DMA_StructInit>:
  * @param  DMA_InitStruct : pointer to a DMA_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void DMA_StructInit(DMA_InitTypeDef* DMA_InitStruct)
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	b083      	sub	sp, #12
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
/*-------------- Reset DMA init structure parameters values ------------------*/
  /* Initialize the DMA_PeripheralBaseAddr member */
  DMA_InitStruct->DMA_PeripheralBaseAddr = 0;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2200      	movs	r2, #0
 8003ff0:	601a      	str	r2, [r3, #0]
  /* Initialize the DMA_MemoryBaseAddr member */
  DMA_InitStruct->DMA_MemoryBaseAddr = 0;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	605a      	str	r2, [r3, #4]
  /* Initialize the DMA_DIR member */
  DMA_InitStruct->DMA_DIR = DMA_DIR_PeripheralSRC;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	609a      	str	r2, [r3, #8]
  /* Initialize the DMA_BufferSize member */
  DMA_InitStruct->DMA_BufferSize = 0;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2200      	movs	r2, #0
 8004002:	60da      	str	r2, [r3, #12]
  /* Initialize the DMA_PeripheralInc member */
  DMA_InitStruct->DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2200      	movs	r2, #0
 8004008:	611a      	str	r2, [r3, #16]
  /* Initialize the DMA_MemoryInc member */
  DMA_InitStruct->DMA_MemoryInc = DMA_MemoryInc_Disable;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2200      	movs	r2, #0
 800400e:	615a      	str	r2, [r3, #20]
  /* Initialize the DMA_PeripheralDataSize member */
  DMA_InitStruct->DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2200      	movs	r2, #0
 8004014:	619a      	str	r2, [r3, #24]
  /* Initialize the DMA_MemoryDataSize member */
  DMA_InitStruct->DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2200      	movs	r2, #0
 800401a:	61da      	str	r2, [r3, #28]
  /* Initialize the DMA_Mode member */
  DMA_InitStruct->DMA_Mode = DMA_Mode_Normal;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2200      	movs	r2, #0
 8004020:	621a      	str	r2, [r3, #32]
  /* Initialize the DMA_Priority member */
  DMA_InitStruct->DMA_Priority = DMA_Priority_Low;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2200      	movs	r2, #0
 8004026:	625a      	str	r2, [r3, #36]	; 0x24
  /* Initialize the DMA_M2M member */
  DMA_InitStruct->DMA_M2M = DMA_M2M_Disable;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2200      	movs	r2, #0
 800402c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800402e:	370c      	adds	r7, #12
 8004030:	46bd      	mov	sp, r7
 8004032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004036:	4770      	bx	lr

08004038 <DMA_Cmd>:
  * @param  NewState: new state of the DMAy Channelx. 
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DMA_Cmd(DMA_Channel_TypeDef* DMAy_Channelx, FunctionalState NewState)
{
 8004038:	b480      	push	{r7}
 800403a:	b083      	sub	sp, #12
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
 8004040:	460b      	mov	r3, r1
 8004042:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8004044:	78fb      	ldrb	r3, [r7, #3]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d006      	beq.n	8004058 <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Channelx */
    DMAy_Channelx->CCR |= DMA_CCR1_EN;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f043 0201 	orr.w	r2, r3, #1
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	601a      	str	r2, [r3, #0]
 8004056:	e006      	b.n	8004066 <DMA_Cmd+0x2e>
  }
  else
  {
    /* Disable the selected DMAy Channelx */
    DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR1_EN);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681a      	ldr	r2, [r3, #0]
 800405c:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8004060:	4013      	ands	r3, r2
 8004062:	687a      	ldr	r2, [r7, #4]
 8004064:	6013      	str	r3, [r2, #0]
  }
}
 8004066:	370c      	adds	r7, #12
 8004068:	46bd      	mov	sp, r7
 800406a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406e:	4770      	bx	lr

08004070 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8004070:	b480      	push	{r7}
 8004072:	b087      	sub	sp, #28
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
  uint32_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 8004078:	2300      	movs	r3, #0
 800407a:	617b      	str	r3, [r7, #20]
 800407c:	2300      	movs	r3, #0
 800407e:	613b      	str	r3, [r7, #16]
 8004080:	230f      	movs	r3, #15
 8004082:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	78db      	ldrb	r3, [r3, #3]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d038      	beq.n	80040fe <NVIC_Init+0x8e>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 800408c:	4b26      	ldr	r3, [pc, #152]	; (8004128 <NVIC_Init+0xb8>)
 800408e:	68db      	ldr	r3, [r3, #12]
 8004090:	43db      	mvns	r3, r3
 8004092:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004096:	0a1b      	lsrs	r3, r3, #8
 8004098:	617b      	str	r3, [r7, #20]
    tmppre = (0x4 - tmppriority);
 800409a:	697b      	ldr	r3, [r7, #20]
 800409c:	f1c3 0304 	rsb	r3, r3, #4
 80040a0:	613b      	str	r3, [r7, #16]
    tmpsub = tmpsub >> tmppriority;
 80040a2:	697b      	ldr	r3, [r7, #20]
 80040a4:	68fa      	ldr	r2, [r7, #12]
 80040a6:	fa22 f303 	lsr.w	r3, r2, r3
 80040aa:	60fb      	str	r3, [r7, #12]

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	785b      	ldrb	r3, [r3, #1]
 80040b0:	461a      	mov	r2, r3
 80040b2:	693b      	ldr	r3, [r7, #16]
 80040b4:	fa02 f303 	lsl.w	r3, r2, r3
 80040b8:	617b      	str	r3, [r7, #20]
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	789b      	ldrb	r3, [r3, #2]
 80040be:	461a      	mov	r2, r3
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	4013      	ands	r3, r2
 80040c4:	697a      	ldr	r2, [r7, #20]
 80040c6:	4313      	orrs	r3, r2
 80040c8:	617b      	str	r3, [r7, #20]
    tmppriority = tmppriority << 0x04;
 80040ca:	697b      	ldr	r3, [r7, #20]
 80040cc:	011b      	lsls	r3, r3, #4
 80040ce:	617b      	str	r3, [r7, #20]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 80040d0:	4916      	ldr	r1, [pc, #88]	; (800412c <NVIC_Init+0xbc>)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	781b      	ldrb	r3, [r3, #0]
 80040d6:	697a      	ldr	r2, [r7, #20]
 80040d8:	b2d2      	uxtb	r2, r2
 80040da:	440b      	add	r3, r1
 80040dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80040e0:	4b12      	ldr	r3, [pc, #72]	; (800412c <NVIC_Init+0xbc>)
 80040e2:	687a      	ldr	r2, [r7, #4]
 80040e4:	7812      	ldrb	r2, [r2, #0]
 80040e6:	0952      	lsrs	r2, r2, #5
 80040e8:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80040ea:	6879      	ldr	r1, [r7, #4]
 80040ec:	7809      	ldrb	r1, [r1, #0]
 80040ee:	f001 011f 	and.w	r1, r1, #31
 80040f2:	2001      	movs	r0, #1
 80040f4:	fa00 f101 	lsl.w	r1, r0, r1
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80040f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80040fc:	e00e      	b.n	800411c <NVIC_Init+0xac>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80040fe:	4b0b      	ldr	r3, [pc, #44]	; (800412c <NVIC_Init+0xbc>)
 8004100:	687a      	ldr	r2, [r7, #4]
 8004102:	7812      	ldrb	r2, [r2, #0]
 8004104:	0952      	lsrs	r2, r2, #5
 8004106:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8004108:	6879      	ldr	r1, [r7, #4]
 800410a:	7809      	ldrb	r1, [r1, #0]
 800410c:	f001 011f 	and.w	r1, r1, #31
 8004110:	2001      	movs	r0, #1
 8004112:	fa00 f101 	lsl.w	r1, r0, r1
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8004116:	3220      	adds	r2, #32
 8004118:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 800411c:	371c      	adds	r7, #28
 800411e:	46bd      	mov	sp, r7
 8004120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004124:	4770      	bx	lr
 8004126:	bf00      	nop
 8004128:	e000ed00 	.word	0xe000ed00
 800412c:	e000e100 	.word	0xe000e100

08004130 <__libc_init_array>:
 8004130:	b570      	push	{r4, r5, r6, lr}
 8004132:	4b0e      	ldr	r3, [pc, #56]	; (800416c <__libc_init_array+0x3c>)
 8004134:	4d0e      	ldr	r5, [pc, #56]	; (8004170 <__libc_init_array+0x40>)
 8004136:	2400      	movs	r4, #0
 8004138:	1aed      	subs	r5, r5, r3
 800413a:	10ad      	asrs	r5, r5, #2
 800413c:	461e      	mov	r6, r3
 800413e:	42ac      	cmp	r4, r5
 8004140:	d004      	beq.n	800414c <__libc_init_array+0x1c>
 8004142:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8004146:	4790      	blx	r2
 8004148:	3401      	adds	r4, #1
 800414a:	e7f8      	b.n	800413e <__libc_init_array+0xe>
 800414c:	f000 f816 	bl	800417c <_init>
 8004150:	4d08      	ldr	r5, [pc, #32]	; (8004174 <__libc_init_array+0x44>)
 8004152:	4b09      	ldr	r3, [pc, #36]	; (8004178 <__libc_init_array+0x48>)
 8004154:	2400      	movs	r4, #0
 8004156:	1aed      	subs	r5, r5, r3
 8004158:	10ad      	asrs	r5, r5, #2
 800415a:	461e      	mov	r6, r3
 800415c:	42ac      	cmp	r4, r5
 800415e:	d004      	beq.n	800416a <__libc_init_array+0x3a>
 8004160:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8004164:	4790      	blx	r2
 8004166:	3401      	adds	r4, #1
 8004168:	e7f8      	b.n	800415c <__libc_init_array+0x2c>
 800416a:	bd70      	pop	{r4, r5, r6, pc}
 800416c:	08004194 	.word	0x08004194
 8004170:	08004194 	.word	0x08004194
 8004174:	08004198 	.word	0x08004198
 8004178:	08004194 	.word	0x08004194

0800417c <_init>:
 800417c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800417e:	bf00      	nop
 8004180:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004182:	bc08      	pop	{r3}
 8004184:	469e      	mov	lr, r3
 8004186:	4770      	bx	lr

08004188 <_fini>:
 8004188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800418a:	bf00      	nop
 800418c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800418e:	bc08      	pop	{r3}
 8004190:	469e      	mov	lr, r3
 8004192:	4770      	bx	lr
