
scratchINEMO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000be8  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000dcc  08000dd4  00010dd4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  08000dcc  08000dcc  00010dcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08000dd0  08000dd0  00010dd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000000  20000000  20000000  00010dd4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000020  20000000  08000dd4  00020000  2**2
                  ALLOC
  7 ._user_heap_stack 00000200  20000020  08000dd4  00020020  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00010dd4  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000537f  00000000  00000000  00010dfd  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000e5c  00000000  00000000  0001617c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000750  00000000  00000000  00016fd8  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000698  00000000  00000000  00017728  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00002717  00000000  00000000  00017dc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000021e6  00000000  00000000  0001a4d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007e  00000000  00000000  0001c6bd  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00001e74  00000000  00000000  0001c73c  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .stabstr      0000003f  00000000  00000000  0001e5b0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000000 	.word	0x20000000
 8000200:	00000000 	.word	0x00000000
 8000204:	08000db4 	.word	0x08000db4

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000004 	.word	0x20000004
 8000220:	08000db4 	.word	0x08000db4

08000224 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000228:	4a15      	ldr	r2, [pc, #84]	; (8000280 <SystemInit+0x5c>)
 800022a:	4b15      	ldr	r3, [pc, #84]	; (8000280 <SystemInit+0x5c>)
 800022c:	681b      	ldr	r3, [r3, #0]
 800022e:	f043 0301 	orr.w	r3, r3, #1
 8000232:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8000234:	4912      	ldr	r1, [pc, #72]	; (8000280 <SystemInit+0x5c>)
 8000236:	4b12      	ldr	r3, [pc, #72]	; (8000280 <SystemInit+0x5c>)
 8000238:	685a      	ldr	r2, [r3, #4]
 800023a:	4b12      	ldr	r3, [pc, #72]	; (8000284 <SystemInit+0x60>)
 800023c:	4013      	ands	r3, r2
 800023e:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000240:	4a0f      	ldr	r2, [pc, #60]	; (8000280 <SystemInit+0x5c>)
 8000242:	4b0f      	ldr	r3, [pc, #60]	; (8000280 <SystemInit+0x5c>)
 8000244:	681b      	ldr	r3, [r3, #0]
 8000246:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800024a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800024e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000250:	4a0b      	ldr	r2, [pc, #44]	; (8000280 <SystemInit+0x5c>)
 8000252:	4b0b      	ldr	r3, [pc, #44]	; (8000280 <SystemInit+0x5c>)
 8000254:	681b      	ldr	r3, [r3, #0]
 8000256:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800025a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 800025c:	4a08      	ldr	r2, [pc, #32]	; (8000280 <SystemInit+0x5c>)
 800025e:	4b08      	ldr	r3, [pc, #32]	; (8000280 <SystemInit+0x5c>)
 8000260:	685b      	ldr	r3, [r3, #4]
 8000262:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000266:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 8000268:	4b05      	ldr	r3, [pc, #20]	; (8000280 <SystemInit+0x5c>)
 800026a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800026e:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
 8000270:	f000 f80c 	bl	800028c <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000274:	4b04      	ldr	r3, [pc, #16]	; (8000288 <SystemInit+0x64>)
 8000276:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800027a:	609a      	str	r2, [r3, #8]
#endif 
}
 800027c:	bf00      	nop
 800027e:	bd80      	pop	{r7, pc}
 8000280:	40021000 	.word	0x40021000
 8000284:	f8ff0000 	.word	0xf8ff0000
 8000288:	e000ed00 	.word	0xe000ed00

0800028c <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 800028c:	b580      	push	{r7, lr}
 800028e:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();  
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
 8000290:	f000 f802 	bl	8000298 <SetSysClockTo72>
#endif
 
 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */ 
}
 8000294:	bf00      	nop
 8000296:	bd80      	pop	{r7, pc}

08000298 <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
 8000298:	b480      	push	{r7}
 800029a:	b083      	sub	sp, #12
 800029c:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 800029e:	2300      	movs	r3, #0
 80002a0:	607b      	str	r3, [r7, #4]
 80002a2:	2300      	movs	r3, #0
 80002a4:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 80002a6:	4a3a      	ldr	r2, [pc, #232]	; (8000390 <SetSysClockTo72+0xf8>)
 80002a8:	4b39      	ldr	r3, [pc, #228]	; (8000390 <SetSysClockTo72+0xf8>)
 80002aa:	681b      	ldr	r3, [r3, #0]
 80002ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80002b0:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 80002b2:	4b37      	ldr	r3, [pc, #220]	; (8000390 <SetSysClockTo72+0xf8>)
 80002b4:	681b      	ldr	r3, [r3, #0]
 80002b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80002ba:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	3301      	adds	r3, #1
 80002c0:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80002c2:	683b      	ldr	r3, [r7, #0]
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	d103      	bne.n	80002d0 <SetSysClockTo72+0x38>
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80002ce:	d1f0      	bne.n	80002b2 <SetSysClockTo72+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 80002d0:	4b2f      	ldr	r3, [pc, #188]	; (8000390 <SetSysClockTo72+0xf8>)
 80002d2:	681b      	ldr	r3, [r3, #0]
 80002d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d002      	beq.n	80002e2 <SetSysClockTo72+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 80002dc:	2301      	movs	r3, #1
 80002de:	603b      	str	r3, [r7, #0]
 80002e0:	e001      	b.n	80002e6 <SetSysClockTo72+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 80002e2:	2300      	movs	r3, #0
 80002e4:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 80002e6:	683b      	ldr	r3, [r7, #0]
 80002e8:	2b01      	cmp	r3, #1
 80002ea:	d14b      	bne.n	8000384 <SetSysClockTo72+0xec>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 80002ec:	4a29      	ldr	r2, [pc, #164]	; (8000394 <SetSysClockTo72+0xfc>)
 80002ee:	4b29      	ldr	r3, [pc, #164]	; (8000394 <SetSysClockTo72+0xfc>)
 80002f0:	681b      	ldr	r3, [r3, #0]
 80002f2:	f043 0310 	orr.w	r3, r3, #16
 80002f6:	6013      	str	r3, [r2, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 80002f8:	4a26      	ldr	r2, [pc, #152]	; (8000394 <SetSysClockTo72+0xfc>)
 80002fa:	4b26      	ldr	r3, [pc, #152]	; (8000394 <SetSysClockTo72+0xfc>)
 80002fc:	681b      	ldr	r3, [r3, #0]
 80002fe:	f023 0303 	bic.w	r3, r3, #3
 8000302:	6013      	str	r3, [r2, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 8000304:	4a23      	ldr	r2, [pc, #140]	; (8000394 <SetSysClockTo72+0xfc>)
 8000306:	4b23      	ldr	r3, [pc, #140]	; (8000394 <SetSysClockTo72+0xfc>)
 8000308:	681b      	ldr	r3, [r3, #0]
 800030a:	f043 0302 	orr.w	r3, r3, #2
 800030e:	6013      	str	r3, [r2, #0]

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8000310:	4a1f      	ldr	r2, [pc, #124]	; (8000390 <SetSysClockTo72+0xf8>)
 8000312:	4b1f      	ldr	r3, [pc, #124]	; (8000390 <SetSysClockTo72+0xf8>)
 8000314:	685b      	ldr	r3, [r3, #4]
 8000316:	6053      	str	r3, [r2, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8000318:	4a1d      	ldr	r2, [pc, #116]	; (8000390 <SetSysClockTo72+0xf8>)
 800031a:	4b1d      	ldr	r3, [pc, #116]	; (8000390 <SetSysClockTo72+0xf8>)
 800031c:	685b      	ldr	r3, [r3, #4]
 800031e:	6053      	str	r3, [r2, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 8000320:	4a1b      	ldr	r2, [pc, #108]	; (8000390 <SetSysClockTo72+0xf8>)
 8000322:	4b1b      	ldr	r3, [pc, #108]	; (8000390 <SetSysClockTo72+0xf8>)
 8000324:	685b      	ldr	r3, [r3, #4]
 8000326:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800032a:	6053      	str	r3, [r2, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
                            RCC_CFGR_PLLMULL9); 
#else    
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 800032c:	4a18      	ldr	r2, [pc, #96]	; (8000390 <SetSysClockTo72+0xf8>)
 800032e:	4b18      	ldr	r3, [pc, #96]	; (8000390 <SetSysClockTo72+0xf8>)
 8000330:	685b      	ldr	r3, [r3, #4]
 8000332:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8000336:	6053      	str	r3, [r2, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
 8000338:	4a15      	ldr	r2, [pc, #84]	; (8000390 <SetSysClockTo72+0xf8>)
 800033a:	4b15      	ldr	r3, [pc, #84]	; (8000390 <SetSysClockTo72+0xf8>)
 800033c:	685b      	ldr	r3, [r3, #4]
 800033e:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 8000342:	6053      	str	r3, [r2, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 8000344:	4a12      	ldr	r2, [pc, #72]	; (8000390 <SetSysClockTo72+0xf8>)
 8000346:	4b12      	ldr	r3, [pc, #72]	; (8000390 <SetSysClockTo72+0xf8>)
 8000348:	681b      	ldr	r3, [r3, #0]
 800034a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800034e:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8000350:	bf00      	nop
 8000352:	4b0f      	ldr	r3, [pc, #60]	; (8000390 <SetSysClockTo72+0xf8>)
 8000354:	681b      	ldr	r3, [r3, #0]
 8000356:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800035a:	2b00      	cmp	r3, #0
 800035c:	d0f9      	beq.n	8000352 <SetSysClockTo72+0xba>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 800035e:	4a0c      	ldr	r2, [pc, #48]	; (8000390 <SetSysClockTo72+0xf8>)
 8000360:	4b0b      	ldr	r3, [pc, #44]	; (8000390 <SetSysClockTo72+0xf8>)
 8000362:	685b      	ldr	r3, [r3, #4]
 8000364:	f023 0303 	bic.w	r3, r3, #3
 8000368:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 800036a:	4a09      	ldr	r2, [pc, #36]	; (8000390 <SetSysClockTo72+0xf8>)
 800036c:	4b08      	ldr	r3, [pc, #32]	; (8000390 <SetSysClockTo72+0xf8>)
 800036e:	685b      	ldr	r3, [r3, #4]
 8000370:	f043 0302 	orr.w	r3, r3, #2
 8000374:	6053      	str	r3, [r2, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 8000376:	bf00      	nop
 8000378:	4b05      	ldr	r3, [pc, #20]	; (8000390 <SetSysClockTo72+0xf8>)
 800037a:	685b      	ldr	r3, [r3, #4]
 800037c:	f003 030c 	and.w	r3, r3, #12
 8000380:	2b08      	cmp	r3, #8
 8000382:	d1f9      	bne.n	8000378 <SetSysClockTo72+0xe0>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  }
}
 8000384:	bf00      	nop
 8000386:	370c      	adds	r7, #12
 8000388:	46bd      	mov	sp, r7
 800038a:	bc80      	pop	{r7}
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop
 8000390:	40021000 	.word	0x40021000
 8000394:	40022000 	.word	0x40022000

08000398 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000398:	b480      	push	{r7}
 800039a:	af00      	add	r7, sp, #0
}
 800039c:	bf00      	nop
 800039e:	46bd      	mov	sp, r7
 80003a0:	bc80      	pop	{r7}
 80003a2:	4770      	bx	lr

080003a4 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80003a4:	b480      	push	{r7}
 80003a6:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
  }
 80003a8:	e7fe      	b.n	80003a8 <HardFault_Handler+0x4>
 80003aa:	bf00      	nop

080003ac <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 80003ac:	b480      	push	{r7}
 80003ae:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
  {
  }
 80003b0:	e7fe      	b.n	80003b0 <MemManage_Handler+0x4>
 80003b2:	bf00      	nop

080003b4 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80003b4:	b480      	push	{r7}
 80003b6:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
  {
  }
 80003b8:	e7fe      	b.n	80003b8 <BusFault_Handler+0x4>
 80003ba:	bf00      	nop

080003bc <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 80003bc:	b480      	push	{r7}
 80003be:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
  {
  }
 80003c0:	e7fe      	b.n	80003c0 <UsageFault_Handler+0x4>
 80003c2:	bf00      	nop

080003c4 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 80003c4:	b480      	push	{r7}
 80003c6:	af00      	add	r7, sp, #0
}
 80003c8:	bf00      	nop
 80003ca:	46bd      	mov	sp, r7
 80003cc:	bc80      	pop	{r7}
 80003ce:	4770      	bx	lr

080003d0 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 80003d0:	b480      	push	{r7}
 80003d2:	af00      	add	r7, sp, #0
}
 80003d4:	bf00      	nop
 80003d6:	46bd      	mov	sp, r7
 80003d8:	bc80      	pop	{r7}
 80003da:	4770      	bx	lr

080003dc <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 80003dc:	b480      	push	{r7}
 80003de:	af00      	add	r7, sp, #0
}
 80003e0:	bf00      	nop
 80003e2:	46bd      	mov	sp, r7
 80003e4:	bc80      	pop	{r7}
 80003e6:	4770      	bx	lr

080003e8 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 80003e8:	b480      	push	{r7}
 80003ea:	af00      	add	r7, sp, #0
}
 80003ec:	bf00      	nop
 80003ee:	46bd      	mov	sp, r7
 80003f0:	bc80      	pop	{r7}
 80003f2:	4770      	bx	lr

080003f4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80003f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800042c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80003f8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80003fa:	e003      	b.n	8000404 <LoopCopyDataInit>

080003fc <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80003fc:	4b0c      	ldr	r3, [pc, #48]	; (8000430 <LoopFillZerobss+0x18>)
	ldr	r3, [r3, r1]
 80003fe:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000400:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000402:	3104      	adds	r1, #4

08000404 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000404:	480b      	ldr	r0, [pc, #44]	; (8000434 <LoopFillZerobss+0x1c>)
	ldr	r3, =_edata
 8000406:	4b0c      	ldr	r3, [pc, #48]	; (8000438 <LoopFillZerobss+0x20>)
	adds	r2, r0, r1
 8000408:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800040a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800040c:	d3f6      	bcc.n	80003fc <CopyDataInit>
	ldr	r2, =_sbss
 800040e:	4a0b      	ldr	r2, [pc, #44]	; (800043c <LoopFillZerobss+0x24>)
	b	LoopFillZerobss
 8000410:	e002      	b.n	8000418 <LoopFillZerobss>

08000412 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000412:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000414:	f842 3b04 	str.w	r3, [r2], #4

08000418 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000418:	4b09      	ldr	r3, [pc, #36]	; (8000440 <LoopFillZerobss+0x28>)
	cmp	r2, r3
 800041a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800041c:	d3f9      	bcc.n	8000412 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800041e:	f7ff ff01 	bl	8000224 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000422:	f000 fca1 	bl	8000d68 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000426:	f000 f863 	bl	80004f0 <main>
	bx	lr
 800042a:	4770      	bx	lr

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800042c:	20010000 	.word	0x20010000
/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
  b	LoopCopyDataInit

CopyDataInit:
	ldr	r3, =_sidata
 8000430:	08000dd4 	.word	0x08000dd4
	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
	adds	r1, r1, #4

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000434:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000438:	20000000 	.word	0x20000000
	adds	r2, r0, r1
	cmp	r2, r3
	bcc	CopyDataInit
	ldr	r2, =_sbss
 800043c:	20000000 	.word	0x20000000
FillZerobss:
	movs	r3, #0
	str	r3, [r2], #4

LoopFillZerobss:
	ldr	r3, = _ebss
 8000440:	20000020 	.word	0x20000020

08000444 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000444:	e7fe      	b.n	8000444 <ADC1_2_IRQHandler>
	...

08000448 <setUpPWM>:
 *      Author: Callen Fisher
 */
#include "pwm.h"

void setUpPWM()
{
 8000448:	b580      	push	{r7, lr}
 800044a:	b088      	sub	sp, #32
 800044c:	af00      	add	r7, sp, #0
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA,ENABLE);//tim3 ch1 //PA6
 800044e:	2101      	movs	r1, #1
 8000450:	2004      	movs	r0, #4
 8000452:	f000 fb13 	bl	8000a7c <RCC_APB2PeriphClockCmd>
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3,ENABLE);
 8000456:	2101      	movs	r1, #1
 8000458:	2002      	movs	r0, #2
 800045a:	f000 fb2d 	bl	8000ab8 <RCC_APB1PeriphClockCmd>

	GPIO_InitTypeDef GPIO_InitStructure;

	GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_6;
 800045e:	2340      	movs	r3, #64	; 0x40
 8000460:	83bb      	strh	r3, [r7, #28]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8000462:	2303      	movs	r3, #3
 8000464:	77bb      	strb	r3, [r7, #30]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 8000466:	2318      	movs	r3, #24
 8000468:	77fb      	strb	r3, [r7, #31]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 800046a:	f107 031c 	add.w	r3, r7, #28
 800046e:	4619      	mov	r1, r3
 8000470:	481d      	ldr	r0, [pc, #116]	; (80004e8 <setUpPWM+0xa0>)
 8000472:	f000 fb3f 	bl	8000af4 <GPIO_Init>

	//set up timer

	TIM_TimeBaseInitTypeDef TIM_TimeBaseStruct;

	TIM_TimeBaseStruct.TIM_ClockDivision=TIM_CKD_DIV1;
 8000476:	2300      	movs	r3, #0
 8000478:	82fb      	strh	r3, [r7, #22]
	TIM_TimeBaseStruct.TIM_CounterMode=TIM_CounterMode_Up;
 800047a:	2300      	movs	r3, #0
 800047c:	827b      	strh	r3, [r7, #18]
	TIM_TimeBaseStruct.TIM_Period=40000;//makes it 100Hz
 800047e:	f649 4340 	movw	r3, #40000	; 0x9c40
 8000482:	82bb      	strh	r3, [r7, #20]
	TIM_TimeBaseStruct.TIM_Prescaler=0;
 8000484:	2300      	movs	r3, #0
 8000486:	823b      	strh	r3, [r7, #16]
	TIM_TimeBaseStruct.TIM_RepetitionCounter=0x0000;
 8000488:	2300      	movs	r3, #0
 800048a:	763b      	strb	r3, [r7, #24]

	TIM_TimeBaseInit(TIM3,&TIM_TimeBaseStruct);
 800048c:	f107 0310 	add.w	r3, r7, #16
 8000490:	4619      	mov	r1, r3
 8000492:	4816      	ldr	r0, [pc, #88]	; (80004ec <setUpPWM+0xa4>)
 8000494:	f000 f8fc 	bl	8000690 <TIM_TimeBaseInit>

	TIM_OCInitTypeDef OC;

	OC.TIM_OCMode=TIM_OCMode_PWM1;
 8000498:	2360      	movs	r3, #96	; 0x60
 800049a:	803b      	strh	r3, [r7, #0]
	OC.TIM_OutputState=TIM_OutputState_Enable;
 800049c:	2301      	movs	r3, #1
 800049e:	807b      	strh	r3, [r7, #2]
	OC.TIM_Pulse=20000;
 80004a0:	f644 6320 	movw	r3, #20000	; 0x4e20
 80004a4:	80fb      	strh	r3, [r7, #6]
	OC.TIM_OCPolarity=TIM_OCPolarity_Low;
 80004a6:	2302      	movs	r3, #2
 80004a8:	813b      	strh	r3, [r7, #8]



	TIM_OC1Init(TIM3,&OC);
 80004aa:	463b      	mov	r3, r7
 80004ac:	4619      	mov	r1, r3
 80004ae:	480f      	ldr	r0, [pc, #60]	; (80004ec <setUpPWM+0xa4>)
 80004b0:	f000 f96a 	bl	8000788 <TIM_OC1Init>
	TIM_OC1PreloadConfig(TIM3,TIM_OCPreload_Enable);
 80004b4:	2108      	movs	r1, #8
 80004b6:	480d      	ldr	r0, [pc, #52]	; (80004ec <setUpPWM+0xa4>)
 80004b8:	f000 fa7c 	bl	80009b4 <TIM_OC1PreloadConfig>

	TIM_ARRPreloadConfig(TIM3,DISABLE);
 80004bc:	2100      	movs	r1, #0
 80004be:	480b      	ldr	r0, [pc, #44]	; (80004ec <setUpPWM+0xa4>)
 80004c0:	f000 fa58 	bl	8000974 <TIM_ARRPreloadConfig>
	TIM_CtrlPWMOutputs(TIM3, ENABLE);
 80004c4:	2101      	movs	r1, #1
 80004c6:	4809      	ldr	r0, [pc, #36]	; (80004ec <setUpPWM+0xa4>)
 80004c8:	f000 fa0a 	bl	80008e0 <TIM_CtrlPWMOutputs>
	TIM_Cmd(TIM3,ENABLE);
 80004cc:	2101      	movs	r1, #1
 80004ce:	4807      	ldr	r0, [pc, #28]	; (80004ec <setUpPWM+0xa4>)
 80004d0:	f000 f9e6 	bl	80008a0 <TIM_Cmd>
	TIM_SetCompare1(TIM3,10000);//inversed//set compare sets the duty (val between 0 and 40 000 where 40000 is 0% and 0 is 100%
 80004d4:	f242 7110 	movw	r1, #10000	; 0x2710
 80004d8:	4804      	ldr	r0, [pc, #16]	; (80004ec <setUpPWM+0xa4>)
 80004da:	f000 fa87 	bl	80009ec <TIM_SetCompare1>





}
 80004de:	bf00      	nop
 80004e0:	3720      	adds	r7, #32
 80004e2:	46bd      	mov	sp, r7
 80004e4:	bd80      	pop	{r7, pc}
 80004e6:	bf00      	nop
 80004e8:	40010800 	.word	0x40010800
 80004ec:	40000400 	.word	0x40000400

080004f0 <main>:

uint32_t temp = 0;
uint16_t recVal;
void setUpPWM(void);

int main(void) {
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b094      	sub	sp, #80	; 0x50
 80004f4:	af00      	add	r7, sp, #0
	//serialTerminal_Init();
	setUpLoopTimer();
 80004f6:	f000 f84f 	bl	8000598 <setUpLoopTimer>
	setUpGPIO();
 80004fa:	f000 f825 	bl	8000548 <setUpGPIO>
	//setUpEcompass();
	//setUpGyro();
	//setUpXbee();
	setUpPWM();
 80004fe:	f7ff ffa3 	bl	8000448 <setUpPWM>

	uint8_t acc8[12];
	uint8_t mag8[12];
	uint8_t gyro8[12];
	uint8_t temp8;
	USART_Cmd(USART2, ENABLE);
 8000502:	2101      	movs	r1, #1
 8000504:	480e      	ldr	r0, [pc, #56]	; (8000540 <main+0x50>)
 8000506:	f000 f8a3 	bl	8000650 <USART_Cmd>
	uint8_t status = 0;
 800050a:	2300      	movs	r3, #0
 800050c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	while (1) {
		//controlMethod(&acc[0],&mag[0],&gyro[0],&temp);//get the data

		//Toggle PA11 to test loop frequency

		if (status == 0) {
 8000510:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000514:	2b00      	cmp	r3, #0
 8000516:	d108      	bne.n	800052a <main+0x3a>
			GPIO_SetBits(GPIOA, GPIO_Pin_11);
 8000518:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800051c:	4809      	ldr	r0, [pc, #36]	; (8000544 <main+0x54>)
 800051e:	f000 fba5 	bl	8000c6c <GPIO_SetBits>
			status = 1;
 8000522:	2301      	movs	r3, #1
 8000524:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8000528:	e007      	b.n	800053a <main+0x4a>
		} else {
			GPIO_ResetBits(GPIOA, GPIO_Pin_11);
 800052a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800052e:	4805      	ldr	r0, [pc, #20]	; (8000544 <main+0x54>)
 8000530:	f000 fbaa 	bl	8000c88 <GPIO_ResetBits>
			status = 0;
 8000534:	2300      	movs	r3, #0
 8000536:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		}
		wait();
 800053a:	f000 f879 	bl	8000630 <wait>
		 USART_Cmd(USART2,ENABLE);
		 S_DMA();//re init the DMA and then it will send

		 wait();
		 }*/
	}
 800053e:	e7e7      	b.n	8000510 <main+0x20>
 8000540:	40004400 	.word	0x40004400
 8000544:	40010800 	.word	0x40010800

08000548 <setUpGPIO>:
//GPIO_Pin_6	GPIOA	SPI1_MISO / TIM8_BKIN / ADC12_IN6 / TIM3_CH1 with alternative function TIM1_BKIN
//GPIO_Pin_7	GPIOA	SPI1_MOSI / TIM8_CH1N / ADC12_IN7 / TIM3_CH2 with alternative function TIM1_CH1N
//GPIO_Pin_1	GPIOA	USART2_RTS / ADC123_IN1 / TIM5_CH2 / TIM2_CH2

void setUpGPIO(void)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b082      	sub	sp, #8
 800054c:	af00      	add	r7, sp, #0
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA|RCC_APB2Periph_GPIOB,ENABLE);
 800054e:	2101      	movs	r1, #1
 8000550:	200c      	movs	r0, #12
 8000552:	f000 fa93 	bl	8000a7c <RCC_APB2PeriphClockCmd>

	GPIO_InitTypeDef GPIO_InitStructure;

	GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_11 | GPIO_Pin_12|GPIO_Pin_0|GPIO_Pin_10|GPIO_Pin_9;
 8000556:	f641 6301 	movw	r3, #7681	; 0x1e01
 800055a:	80bb      	strh	r3, [r7, #4]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 800055c:	2303      	movs	r3, #3
 800055e:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 8000560:	2310      	movs	r3, #16
 8000562:	71fb      	strb	r3, [r7, #7]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000564:	1d3b      	adds	r3, r7, #4
 8000566:	4619      	mov	r1, r3
 8000568:	4809      	ldr	r0, [pc, #36]	; (8000590 <setUpGPIO+0x48>)
 800056a:	f000 fac3 	bl	8000af4 <GPIO_Init>

	GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_8|GPIO_Pin_9;
 800056e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000572:	80bb      	strh	r3, [r7, #4]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8000574:	2303      	movs	r3, #3
 8000576:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 8000578:	2310      	movs	r3, #16
 800057a:	71fb      	strb	r3, [r7, #7]
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 800057c:	1d3b      	adds	r3, r7, #4
 800057e:	4619      	mov	r1, r3
 8000580:	4804      	ldr	r0, [pc, #16]	; (8000594 <setUpGPIO+0x4c>)
 8000582:	f000 fab7 	bl	8000af4 <GPIO_Init>
}
 8000586:	bf00      	nop
 8000588:	3708      	adds	r7, #8
 800058a:	46bd      	mov	sp, r7
 800058c:	bd80      	pop	{r7, pc}
 800058e:	bf00      	nop
 8000590:	40010800 	.word	0x40010800
 8000594:	40010c00 	.word	0x40010c00

08000598 <setUpLoopTimer>:
int proceed=0;
///////////////////////////////////////////////////////////////////////////
////////////////main loop timer ///////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////
void setUpLoopTimer(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b084      	sub	sp, #16
 800059c:	af00      	add	r7, sp, #0
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2,ENABLE);
 800059e:	2101      	movs	r1, #1
 80005a0:	2001      	movs	r0, #1
 80005a2:	f000 fa89 	bl	8000ab8 <RCC_APB1PeriphClockCmd>

	NVIC_InitTypeDef NVIC_InitStructure;
	/* Enable the TIM2 global Interrupt */
	NVIC_InitStructure.NVIC_IRQChannel = TIM2_IRQn;//set up the interrupt handler for TIM2
 80005a6:	231c      	movs	r3, #28
 80005a8:	733b      	strb	r3, [r7, #12]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 80005aa:	2300      	movs	r3, #0
 80005ac:	737b      	strb	r3, [r7, #13]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 1;
 80005ae:	2301      	movs	r3, #1
 80005b0:	73bb      	strb	r3, [r7, #14]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 80005b2:	2301      	movs	r3, #1
 80005b4:	73fb      	strb	r3, [r7, #15]

	NVIC_Init(&NVIC_InitStructure);
 80005b6:	f107 030c 	add.w	r3, r7, #12
 80005ba:	4618      	mov	r0, r3
 80005bc:	f000 fb72 	bl	8000ca4 <NVIC_Init>


	TIM_TimeBaseInitTypeDef TIM_TimeBaseStruct;

	TIM_TimeBaseStruct.TIM_ClockDivision=TIM_CKD_DIV1;
 80005c0:	2300      	movs	r3, #0
 80005c2:	80fb      	strh	r3, [r7, #6]
	TIM_TimeBaseStruct.TIM_CounterMode=TIM_CounterMode_Up;
 80005c4:	2300      	movs	r3, #0
 80005c6:	807b      	strh	r3, [r7, #2]
	TIM_TimeBaseStruct.TIM_Period=(3600/4-1);//makes it 100Hz - confirmed on scope.
 80005c8:	f240 3383 	movw	r3, #899	; 0x383
 80005cc:	80bb      	strh	r3, [r7, #4]
	TIM_TimeBaseStruct.TIM_Prescaler=400-1;
 80005ce:	f240 138f 	movw	r3, #399	; 0x18f
 80005d2:	803b      	strh	r3, [r7, #0]
	TIM_TimeBaseStruct.TIM_RepetitionCounter=0x0000;
 80005d4:	2300      	movs	r3, #0
 80005d6:	723b      	strb	r3, [r7, #8]

	TIM_TimeBaseInit(TIM2,&TIM_TimeBaseStruct);
 80005d8:	463b      	mov	r3, r7
 80005da:	4619      	mov	r1, r3
 80005dc:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80005e0:	f000 f856 	bl	8000690 <TIM_TimeBaseInit>

	TIM_Cmd(TIM2,ENABLE);
 80005e4:	2101      	movs	r1, #1
 80005e6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80005ea:	f000 f959 	bl	80008a0 <TIM_Cmd>

	TIM_ITConfig(TIM2,TIM_IT_Update,ENABLE);
 80005ee:	2201      	movs	r2, #1
 80005f0:	2101      	movs	r1, #1
 80005f2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80005f6:	f000 f999 	bl	800092c <TIM_ITConfig>
}
 80005fa:	bf00      	nop
 80005fc:	3710      	adds	r7, #16
 80005fe:	46bd      	mov	sp, r7
 8000600:	bd80      	pop	{r7, pc}
 8000602:	bf00      	nop

08000604 <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
  if (TIM_GetITStatus(TIM2, TIM_IT_Update) != RESET)
 8000608:	2101      	movs	r1, #1
 800060a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800060e:	f000 f9fb 	bl	8000a08 <TIM_GetITStatus>
 8000612:	4603      	mov	r3, r0
 8000614:	2b00      	cmp	r3, #0
 8000616:	d007      	beq.n	8000628 <TIM2_IRQHandler+0x24>
  {
    TIM_ClearITPendingBit(TIM2, TIM_IT_Update);
 8000618:	2101      	movs	r1, #1
 800061a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800061e:	f000 fa1d 	bl	8000a5c <TIM_ClearITPendingBit>
    proceed=1;
 8000622:	4b02      	ldr	r3, [pc, #8]	; (800062c <TIM2_IRQHandler+0x28>)
 8000624:	2201      	movs	r2, #1
 8000626:	601a      	str	r2, [r3, #0]

  }
}
 8000628:	bf00      	nop
 800062a:	bd80      	pop	{r7, pc}
 800062c:	2000001c 	.word	0x2000001c

08000630 <wait>:
void wait(void)
{
 8000630:	b480      	push	{r7}
 8000632:	af00      	add	r7, sp, #0
	while(proceed==0)//interrupt will set proceed to 1;
 8000634:	bf00      	nop
 8000636:	4b05      	ldr	r3, [pc, #20]	; (800064c <wait+0x1c>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	2b00      	cmp	r3, #0
 800063c:	d0fb      	beq.n	8000636 <wait+0x6>
	{

	}
	proceed=0;
 800063e:	4b03      	ldr	r3, [pc, #12]	; (800064c <wait+0x1c>)
 8000640:	2200      	movs	r2, #0
 8000642:	601a      	str	r2, [r3, #0]
}
 8000644:	bf00      	nop
 8000646:	46bd      	mov	sp, r7
 8000648:	bc80      	pop	{r7}
 800064a:	4770      	bx	lr
 800064c:	2000001c 	.word	0x2000001c

08000650 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8000650:	b480      	push	{r7}
 8000652:	b083      	sub	sp, #12
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
 8000658:	460b      	mov	r3, r1
 800065a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800065c:	78fb      	ldrb	r3, [r7, #3]
 800065e:	2b00      	cmp	r3, #0
 8000660:	d008      	beq.n	8000674 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= CR1_UE_Set;
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	899b      	ldrh	r3, [r3, #12]
 8000666:	b29b      	uxth	r3, r3
 8000668:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800066c:	b29a      	uxth	r2, r3
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= CR1_UE_Reset;
  }
}
 8000672:	e007      	b.n	8000684 <USART_Cmd+0x34>
    USARTx->CR1 |= CR1_UE_Set;
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= CR1_UE_Reset;
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	899b      	ldrh	r3, [r3, #12]
 8000678:	b29b      	uxth	r3, r3
 800067a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800067e:	b29a      	uxth	r2, r3
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	819a      	strh	r2, [r3, #12]
  }
}
 8000684:	bf00      	nop
 8000686:	370c      	adds	r7, #12
 8000688:	46bd      	mov	sp, r7
 800068a:	bc80      	pop	{r7}
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop

08000690 <TIM_TimeBaseInit>:
  *         structure that contains the configuration information for the 
  *         specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 8000690:	b480      	push	{r7}
 8000692:	b085      	sub	sp, #20
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
 8000698:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 800069a:	2300      	movs	r3, #0
 800069c:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	881b      	ldrh	r3, [r3, #0]
 80006a2:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM2) || (TIMx == TIM3)||
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	4a2e      	ldr	r2, [pc, #184]	; (8000760 <TIM_TimeBaseInit+0xd0>)
 80006a8:	4293      	cmp	r3, r2
 80006aa:	d013      	beq.n	80006d4 <TIM_TimeBaseInit+0x44>
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	4a2d      	ldr	r2, [pc, #180]	; (8000764 <TIM_TimeBaseInit+0xd4>)
 80006b0:	4293      	cmp	r3, r2
 80006b2:	d00f      	beq.n	80006d4 <TIM_TimeBaseInit+0x44>
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80006ba:	d00b      	beq.n	80006d4 <TIM_TimeBaseInit+0x44>
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	4a2a      	ldr	r2, [pc, #168]	; (8000768 <TIM_TimeBaseInit+0xd8>)
 80006c0:	4293      	cmp	r3, r2
 80006c2:	d007      	beq.n	80006d4 <TIM_TimeBaseInit+0x44>
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	4a29      	ldr	r2, [pc, #164]	; (800076c <TIM_TimeBaseInit+0xdc>)
 80006c8:	4293      	cmp	r3, r2
 80006ca:	d003      	beq.n	80006d4 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	4a28      	ldr	r2, [pc, #160]	; (8000770 <TIM_TimeBaseInit+0xe0>)
 80006d0:	4293      	cmp	r3, r2
 80006d2:	d108      	bne.n	80006e6 <TIM_TimeBaseInit+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~((uint16_t)(TIM_CR1_DIR | TIM_CR1_CMS)));
 80006d4:	89fb      	ldrh	r3, [r7, #14]
 80006d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80006da:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 80006dc:	683b      	ldr	r3, [r7, #0]
 80006de:	885a      	ldrh	r2, [r3, #2]
 80006e0:	89fb      	ldrh	r3, [r7, #14]
 80006e2:	4313      	orrs	r3, r2
 80006e4:	81fb      	strh	r3, [r7, #14]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	4a22      	ldr	r2, [pc, #136]	; (8000774 <TIM_TimeBaseInit+0xe4>)
 80006ea:	4293      	cmp	r3, r2
 80006ec:	d00c      	beq.n	8000708 <TIM_TimeBaseInit+0x78>
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	4a21      	ldr	r2, [pc, #132]	; (8000778 <TIM_TimeBaseInit+0xe8>)
 80006f2:	4293      	cmp	r3, r2
 80006f4:	d008      	beq.n	8000708 <TIM_TimeBaseInit+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= (uint16_t)(~((uint16_t)TIM_CR1_CKD));
 80006f6:	89fb      	ldrh	r3, [r7, #14]
 80006f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80006fc:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 80006fe:	683b      	ldr	r3, [r7, #0]
 8000700:	88da      	ldrh	r2, [r3, #6]
 8000702:	89fb      	ldrh	r3, [r7, #14]
 8000704:	4313      	orrs	r3, r2
 8000706:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	89fa      	ldrh	r2, [r7, #14]
 800070c:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 800070e:	683b      	ldr	r3, [r7, #0]
 8000710:	889a      	ldrh	r2, [r3, #4]
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	859a      	strh	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8000716:	683b      	ldr	r3, [r7, #0]
 8000718:	881a      	ldrh	r2, [r3, #0]
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	851a      	strh	r2, [r3, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15)|| (TIMx == TIM16) || (TIMx == TIM17))  
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	4a0f      	ldr	r2, [pc, #60]	; (8000760 <TIM_TimeBaseInit+0xd0>)
 8000722:	4293      	cmp	r3, r2
 8000724:	d00f      	beq.n	8000746 <TIM_TimeBaseInit+0xb6>
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	4a0e      	ldr	r2, [pc, #56]	; (8000764 <TIM_TimeBaseInit+0xd4>)
 800072a:	4293      	cmp	r3, r2
 800072c:	d00b      	beq.n	8000746 <TIM_TimeBaseInit+0xb6>
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	4a12      	ldr	r2, [pc, #72]	; (800077c <TIM_TimeBaseInit+0xec>)
 8000732:	4293      	cmp	r3, r2
 8000734:	d007      	beq.n	8000746 <TIM_TimeBaseInit+0xb6>
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	4a11      	ldr	r2, [pc, #68]	; (8000780 <TIM_TimeBaseInit+0xf0>)
 800073a:	4293      	cmp	r3, r2
 800073c:	d003      	beq.n	8000746 <TIM_TimeBaseInit+0xb6>
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	4a10      	ldr	r2, [pc, #64]	; (8000784 <TIM_TimeBaseInit+0xf4>)
 8000742:	4293      	cmp	r3, r2
 8000744:	d104      	bne.n	8000750 <TIM_TimeBaseInit+0xc0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 8000746:	683b      	ldr	r3, [r7, #0]
 8000748:	7a1b      	ldrb	r3, [r3, #8]
 800074a:	b29a      	uxth	r2, r3
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler and the Repetition counter
     values immediately */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;           
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	2201      	movs	r2, #1
 8000754:	829a      	strh	r2, [r3, #20]
}
 8000756:	bf00      	nop
 8000758:	3714      	adds	r7, #20
 800075a:	46bd      	mov	sp, r7
 800075c:	bc80      	pop	{r7}
 800075e:	4770      	bx	lr
 8000760:	40012c00 	.word	0x40012c00
 8000764:	40013400 	.word	0x40013400
 8000768:	40000400 	.word	0x40000400
 800076c:	40000800 	.word	0x40000800
 8000770:	40000c00 	.word	0x40000c00
 8000774:	40001000 	.word	0x40001000
 8000778:	40001400 	.word	0x40001400
 800077c:	40014000 	.word	0x40014000
 8000780:	40014400 	.word	0x40014400
 8000784:	40014800 	.word	0x40014800

08000788 <TIM_OC1Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC1Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8000788:	b480      	push	{r7}
 800078a:	b085      	sub	sp, #20
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
 8000790:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 8000792:	2300      	movs	r3, #0
 8000794:	817b      	strh	r3, [r7, #10]
 8000796:	2300      	movs	r3, #0
 8000798:	81fb      	strh	r3, [r7, #14]
 800079a:	2300      	movs	r3, #0
 800079c:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
 /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)(~(uint16_t)TIM_CCER_CC1E);
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	8c1b      	ldrh	r3, [r3, #32]
 80007a2:	b29b      	uxth	r3, r3
 80007a4:	f023 0301 	bic.w	r3, r3, #1
 80007a8:	b29a      	uxth	r2, r3
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	841a      	strh	r2, [r3, #32]
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	8c1b      	ldrh	r3, [r3, #32]
 80007b2:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	889b      	ldrh	r3, [r3, #4]
 80007b8:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	8b1b      	ldrh	r3, [r3, #24]
 80007be:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_OC1M));
 80007c0:	897b      	ldrh	r3, [r7, #10]
 80007c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80007c6:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_CC1S));
 80007c8:	897b      	ldrh	r3, [r7, #10]
 80007ca:	f023 0303 	bic.w	r3, r3, #3
 80007ce:	817b      	strh	r3, [r7, #10]

  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 80007d0:	683b      	ldr	r3, [r7, #0]
 80007d2:	881a      	ldrh	r2, [r3, #0]
 80007d4:	897b      	ldrh	r3, [r7, #10]
 80007d6:	4313      	orrs	r3, r2
 80007d8:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1P));
 80007da:	89fb      	ldrh	r3, [r7, #14]
 80007dc:	f023 0302 	bic.w	r3, r3, #2
 80007e0:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
 80007e2:	683b      	ldr	r3, [r7, #0]
 80007e4:	891a      	ldrh	r2, [r3, #8]
 80007e6:	89fb      	ldrh	r3, [r7, #14]
 80007e8:	4313      	orrs	r3, r2
 80007ea:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 80007ec:	683b      	ldr	r3, [r7, #0]
 80007ee:	885a      	ldrh	r2, [r3, #2]
 80007f0:	89fb      	ldrh	r3, [r7, #14]
 80007f2:	4313      	orrs	r3, r2
 80007f4:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15)||
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	4a24      	ldr	r2, [pc, #144]	; (800088c <TIM_OC1Init+0x104>)
 80007fa:	4293      	cmp	r3, r2
 80007fc:	d00f      	beq.n	800081e <TIM_OC1Init+0x96>
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	4a23      	ldr	r2, [pc, #140]	; (8000890 <TIM_OC1Init+0x108>)
 8000802:	4293      	cmp	r3, r2
 8000804:	d00b      	beq.n	800081e <TIM_OC1Init+0x96>
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	4a22      	ldr	r2, [pc, #136]	; (8000894 <TIM_OC1Init+0x10c>)
 800080a:	4293      	cmp	r3, r2
 800080c:	d007      	beq.n	800081e <TIM_OC1Init+0x96>
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	4a21      	ldr	r2, [pc, #132]	; (8000898 <TIM_OC1Init+0x110>)
 8000812:	4293      	cmp	r3, r2
 8000814:	d003      	beq.n	800081e <TIM_OC1Init+0x96>
     (TIMx == TIM16)|| (TIMx == TIM17))
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	4a20      	ldr	r2, [pc, #128]	; (800089c <TIM_OC1Init+0x114>)
 800081a:	4293      	cmp	r3, r2
 800081c:	d123      	bne.n	8000866 <TIM_OC1Init+0xde>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1NP));
 800081e:	89fb      	ldrh	r3, [r7, #14]
 8000820:	f023 0308 	bic.w	r3, r3, #8
 8000824:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 8000826:	683b      	ldr	r3, [r7, #0]
 8000828:	895a      	ldrh	r2, [r3, #10]
 800082a:	89fb      	ldrh	r3, [r7, #14]
 800082c:	4313      	orrs	r3, r2
 800082e:	81fb      	strh	r3, [r7, #14]
    
    /* Reset the Output N State */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1NE));    
 8000830:	89fb      	ldrh	r3, [r7, #14]
 8000832:	f023 0304 	bic.w	r3, r3, #4
 8000836:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 8000838:	683b      	ldr	r3, [r7, #0]
 800083a:	889a      	ldrh	r2, [r3, #4]
 800083c:	89fb      	ldrh	r3, [r7, #14]
 800083e:	4313      	orrs	r3, r2
 8000840:	81fb      	strh	r3, [r7, #14]
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS1));
 8000842:	89bb      	ldrh	r3, [r7, #12]
 8000844:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000848:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS1N));
 800084a:	89bb      	ldrh	r3, [r7, #12]
 800084c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000850:	81bb      	strh	r3, [r7, #12]
    
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
 8000852:	683b      	ldr	r3, [r7, #0]
 8000854:	899a      	ldrh	r2, [r3, #12]
 8000856:	89bb      	ldrh	r3, [r7, #12]
 8000858:	4313      	orrs	r3, r2
 800085a:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 800085c:	683b      	ldr	r3, [r7, #0]
 800085e:	89da      	ldrh	r2, [r3, #14]
 8000860:	89bb      	ldrh	r3, [r7, #12]
 8000862:	4313      	orrs	r3, r2
 8000864:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	89ba      	ldrh	r2, [r7, #12]
 800086a:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	897a      	ldrh	r2, [r7, #10]
 8000870:	831a      	strh	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse; 
 8000872:	683b      	ldr	r3, [r7, #0]
 8000874:	88da      	ldrh	r2, [r3, #6]
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	869a      	strh	r2, [r3, #52]	; 0x34
 
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	89fa      	ldrh	r2, [r7, #14]
 800087e:	841a      	strh	r2, [r3, #32]
}
 8000880:	bf00      	nop
 8000882:	3714      	adds	r7, #20
 8000884:	46bd      	mov	sp, r7
 8000886:	bc80      	pop	{r7}
 8000888:	4770      	bx	lr
 800088a:	bf00      	nop
 800088c:	40012c00 	.word	0x40012c00
 8000890:	40013400 	.word	0x40013400
 8000894:	40014000 	.word	0x40014000
 8000898:	40014400 	.word	0x40014400
 800089c:	40014800 	.word	0x40014800

080008a0 <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 80008a0:	b480      	push	{r7}
 80008a2:	b083      	sub	sp, #12
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
 80008a8:	460b      	mov	r3, r1
 80008aa:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80008ac:	78fb      	ldrb	r3, [r7, #3]
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d008      	beq.n	80008c4 <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	881b      	ldrh	r3, [r3, #0]
 80008b6:	b29b      	uxth	r3, r3
 80008b8:	f043 0301 	orr.w	r3, r3, #1
 80008bc:	b29a      	uxth	r2, r3
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
  }
}
 80008c2:	e007      	b.n	80008d4 <TIM_Cmd+0x34>
    TIMx->CR1 |= TIM_CR1_CEN;
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	881b      	ldrh	r3, [r3, #0]
 80008c8:	b29b      	uxth	r3, r3
 80008ca:	f023 0301 	bic.w	r3, r3, #1
 80008ce:	b29a      	uxth	r2, r3
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	801a      	strh	r2, [r3, #0]
  }
}
 80008d4:	bf00      	nop
 80008d6:	370c      	adds	r7, #12
 80008d8:	46bd      	mov	sp, r7
 80008da:	bc80      	pop	{r7}
 80008dc:	4770      	bx	lr
 80008de:	bf00      	nop

080008e0 <TIM_CtrlPWMOutputs>:
  * @param  NewState: new state of the TIM peripheral Main Outputs.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_CtrlPWMOutputs(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 80008e0:	b480      	push	{r7}
 80008e2:	b083      	sub	sp, #12
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
 80008e8:	460b      	mov	r3, r1
 80008ea:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80008ec:	78fb      	ldrb	r3, [r7, #3]
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d00c      	beq.n	800090c <TIM_CtrlPWMOutputs+0x2c>
  {
    /* Enable the TIM Main Output */
    TIMx->BDTR |= TIM_BDTR_MOE;
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80008f8:	b29b      	uxth	r3, r3
 80008fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80008fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8000902:	b29a      	uxth	r2, r3
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  else
  {
    /* Disable the TIM Main Output */
    TIMx->BDTR &= (uint16_t)(~((uint16_t)TIM_BDTR_MOE));
  }  
}
 800090a:	e009      	b.n	8000920 <TIM_CtrlPWMOutputs+0x40>
    TIMx->BDTR |= TIM_BDTR_MOE;
  }
  else
  {
    /* Disable the TIM Main Output */
    TIMx->BDTR &= (uint16_t)(~((uint16_t)TIM_BDTR_MOE));
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000912:	b29b      	uxth	r3, r3
 8000914:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000918:	b29a      	uxth	r2, r3
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }  
}
 8000920:	bf00      	nop
 8000922:	370c      	adds	r7, #12
 8000924:	46bd      	mov	sp, r7
 8000926:	bc80      	pop	{r7}
 8000928:	4770      	bx	lr
 800092a:	bf00      	nop

0800092c <TIM_ITConfig>:
  * @param  NewState: new state of the TIM interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState)
{  
 800092c:	b480      	push	{r7}
 800092e:	b083      	sub	sp, #12
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
 8000934:	460b      	mov	r3, r1
 8000936:	807b      	strh	r3, [r7, #2]
 8000938:	4613      	mov	r3, r2
 800093a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800093c:	787b      	ldrb	r3, [r7, #1]
 800093e:	2b00      	cmp	r3, #0
 8000940:	d008      	beq.n	8000954 <TIM_ITConfig+0x28>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	899b      	ldrh	r3, [r3, #12]
 8000946:	b29a      	uxth	r2, r3
 8000948:	887b      	ldrh	r3, [r7, #2]
 800094a:	4313      	orrs	r3, r2
 800094c:	b29a      	uxth	r2, r3
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
  }
}
 8000952:	e009      	b.n	8000968 <TIM_ITConfig+0x3c>
    TIMx->DIER |= TIM_IT;
  }
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	899b      	ldrh	r3, [r3, #12]
 8000958:	b29a      	uxth	r2, r3
 800095a:	887b      	ldrh	r3, [r7, #2]
 800095c:	43db      	mvns	r3, r3
 800095e:	b29b      	uxth	r3, r3
 8000960:	4013      	ands	r3, r2
 8000962:	b29a      	uxth	r2, r3
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	819a      	strh	r2, [r3, #12]
  }
}
 8000968:	bf00      	nop
 800096a:	370c      	adds	r7, #12
 800096c:	46bd      	mov	sp, r7
 800096e:	bc80      	pop	{r7}
 8000970:	4770      	bx	lr
 8000972:	bf00      	nop

08000974 <TIM_ARRPreloadConfig>:
  * @param  NewState: new state of the TIMx peripheral Preload register
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ARRPreloadConfig(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8000974:	b480      	push	{r7}
 8000976:	b083      	sub	sp, #12
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
 800097c:	460b      	mov	r3, r1
 800097e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000980:	78fb      	ldrb	r3, [r7, #3]
 8000982:	2b00      	cmp	r3, #0
 8000984:	d008      	beq.n	8000998 <TIM_ARRPreloadConfig+0x24>
  {
    /* Set the ARR Preload Bit */
    TIMx->CR1 |= TIM_CR1_ARPE;
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	881b      	ldrh	r3, [r3, #0]
 800098a:	b29b      	uxth	r3, r3
 800098c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000990:	b29a      	uxth	r2, r3
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Reset the ARR Preload Bit */
    TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_ARPE);
  }
}
 8000996:	e007      	b.n	80009a8 <TIM_ARRPreloadConfig+0x34>
    TIMx->CR1 |= TIM_CR1_ARPE;
  }
  else
  {
    /* Reset the ARR Preload Bit */
    TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_ARPE);
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	881b      	ldrh	r3, [r3, #0]
 800099c:	b29b      	uxth	r3, r3
 800099e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80009a2:	b29a      	uxth	r2, r3
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	801a      	strh	r2, [r3, #0]
  }
}
 80009a8:	bf00      	nop
 80009aa:	370c      	adds	r7, #12
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bc80      	pop	{r7}
 80009b0:	4770      	bx	lr
 80009b2:	bf00      	nop

080009b4 <TIM_OC1PreloadConfig>:
  *     @arg TIM_OCPreload_Enable
  *     @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC1PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 80009b4:	b480      	push	{r7}
 80009b6:	b085      	sub	sp, #20
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
 80009bc:	460b      	mov	r3, r1
 80009be:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 80009c0:	2300      	movs	r3, #0
 80009c2:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
  tmpccmr1 = TIMx->CCMR1;
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	8b1b      	ldrh	r3, [r3, #24]
 80009c8:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC1PE Bit */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC1PE);
 80009ca:	89fb      	ldrh	r3, [r7, #14]
 80009cc:	f023 0308 	bic.w	r3, r3, #8
 80009d0:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= TIM_OCPreload;
 80009d2:	89fa      	ldrh	r2, [r7, #14]
 80009d4:	887b      	ldrh	r3, [r7, #2]
 80009d6:	4313      	orrs	r3, r2
 80009d8:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	89fa      	ldrh	r2, [r7, #14]
 80009de:	831a      	strh	r2, [r3, #24]
}
 80009e0:	bf00      	nop
 80009e2:	3714      	adds	r7, #20
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bc80      	pop	{r7}
 80009e8:	4770      	bx	lr
 80009ea:	bf00      	nop

080009ec <TIM_SetCompare1>:
  * @param  TIMx: where x can be 1 to 17 except 6 and 7 to select the TIM peripheral.
  * @param  Compare1: specifies the Capture Compare1 register new value.
  * @retval None
  */
void TIM_SetCompare1(TIM_TypeDef* TIMx, uint16_t Compare1)
{
 80009ec:	b480      	push	{r7}
 80009ee:	b083      	sub	sp, #12
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
 80009f4:	460b      	mov	r3, r1
 80009f6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  /* Set the Capture Compare1 Register value */
  TIMx->CCR1 = Compare1;
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	887a      	ldrh	r2, [r7, #2]
 80009fc:	869a      	strh	r2, [r3, #52]	; 0x34
}
 80009fe:	bf00      	nop
 8000a00:	370c      	adds	r7, #12
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bc80      	pop	{r7}
 8000a06:	4770      	bx	lr

08000a08 <TIM_GetITStatus>:
  *   - TIM_IT_Break is used only with TIM1, TIM8 and TIM15. 
  *   - TIM_IT_COM is used only with TIM1, TIM8, TIM15, TIM16 and TIM17.  
  * @retval The new state of the TIM_IT(SET or RESET).
  */
ITStatus TIM_GetITStatus(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	b085      	sub	sp, #20
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
 8000a10:	460b      	mov	r3, r1
 8000a12:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;  
 8000a14:	2300      	movs	r3, #0
 8000a16:	73fb      	strb	r3, [r7, #15]
  uint16_t itstatus = 0x0, itenable = 0x0;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	81bb      	strh	r3, [r7, #12]
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	8a1b      	ldrh	r3, [r3, #16]
 8000a24:	b29a      	uxth	r2, r3
 8000a26:	887b      	ldrh	r3, [r7, #2]
 8000a28:	4013      	ands	r3, r2
 8000a2a:	81bb      	strh	r3, [r7, #12]
  
  itenable = TIMx->DIER & TIM_IT;
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	899b      	ldrh	r3, [r3, #12]
 8000a30:	b29a      	uxth	r2, r3
 8000a32:	887b      	ldrh	r3, [r7, #2]
 8000a34:	4013      	ands	r3, r2
 8000a36:	817b      	strh	r3, [r7, #10]
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 8000a38:	89bb      	ldrh	r3, [r7, #12]
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d005      	beq.n	8000a4a <TIM_GetITStatus+0x42>
 8000a3e:	897b      	ldrh	r3, [r7, #10]
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d002      	beq.n	8000a4a <TIM_GetITStatus+0x42>
  {
    bitstatus = SET;
 8000a44:	2301      	movs	r3, #1
 8000a46:	73fb      	strb	r3, [r7, #15]
 8000a48:	e001      	b.n	8000a4e <TIM_GetITStatus+0x46>
  }
  else
  {
    bitstatus = RESET;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000a4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a50:	4618      	mov	r0, r3
 8000a52:	3714      	adds	r7, #20
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bc80      	pop	{r7}
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop

08000a5c <TIM_ClearITPendingBit>:
  *   - TIM_IT_Break is used only with TIM1, TIM8 and TIM15. 
  *   - TIM_IT_COM is used only with TIM1, TIM8, TIM15, TIM16 and TIM17.    
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	b083      	sub	sp, #12
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
 8000a64:	460b      	mov	r3, r1
 8000a66:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 8000a68:	887b      	ldrh	r3, [r7, #2]
 8000a6a:	43db      	mvns	r3, r3
 8000a6c:	b29a      	uxth	r2, r3
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	821a      	strh	r2, [r3, #16]
}
 8000a72:	bf00      	nop
 8000a74:	370c      	adds	r7, #12
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bc80      	pop	{r7}
 8000a7a:	4770      	bx	lr

08000a7c <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	b083      	sub	sp, #12
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
 8000a84:	460b      	mov	r3, r1
 8000a86:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000a88:	78fb      	ldrb	r3, [r7, #3]
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d006      	beq.n	8000a9c <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8000a8e:	4909      	ldr	r1, [pc, #36]	; (8000ab4 <RCC_APB2PeriphClockCmd+0x38>)
 8000a90:	4b08      	ldr	r3, [pc, #32]	; (8000ab4 <RCC_APB2PeriphClockCmd+0x38>)
 8000a92:	699a      	ldr	r2, [r3, #24]
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	4313      	orrs	r3, r2
 8000a98:	618b      	str	r3, [r1, #24]
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 8000a9a:	e006      	b.n	8000aaa <RCC_APB2PeriphClockCmd+0x2e>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8000a9c:	4905      	ldr	r1, [pc, #20]	; (8000ab4 <RCC_APB2PeriphClockCmd+0x38>)
 8000a9e:	4b05      	ldr	r3, [pc, #20]	; (8000ab4 <RCC_APB2PeriphClockCmd+0x38>)
 8000aa0:	699a      	ldr	r2, [r3, #24]
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	43db      	mvns	r3, r3
 8000aa6:	4013      	ands	r3, r2
 8000aa8:	618b      	str	r3, [r1, #24]
  }
}
 8000aaa:	bf00      	nop
 8000aac:	370c      	adds	r7, #12
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bc80      	pop	{r7}
 8000ab2:	4770      	bx	lr
 8000ab4:	40021000 	.word	0x40021000

08000ab8 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	b083      	sub	sp, #12
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
 8000ac0:	460b      	mov	r3, r1
 8000ac2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000ac4:	78fb      	ldrb	r3, [r7, #3]
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d006      	beq.n	8000ad8 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8000aca:	4909      	ldr	r1, [pc, #36]	; (8000af0 <RCC_APB1PeriphClockCmd+0x38>)
 8000acc:	4b08      	ldr	r3, [pc, #32]	; (8000af0 <RCC_APB1PeriphClockCmd+0x38>)
 8000ace:	69da      	ldr	r2, [r3, #28]
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	4313      	orrs	r3, r2
 8000ad4:	61cb      	str	r3, [r1, #28]
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 8000ad6:	e006      	b.n	8000ae6 <RCC_APB1PeriphClockCmd+0x2e>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8000ad8:	4905      	ldr	r1, [pc, #20]	; (8000af0 <RCC_APB1PeriphClockCmd+0x38>)
 8000ada:	4b05      	ldr	r3, [pc, #20]	; (8000af0 <RCC_APB1PeriphClockCmd+0x38>)
 8000adc:	69da      	ldr	r2, [r3, #28]
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	43db      	mvns	r3, r3
 8000ae2:	4013      	ands	r3, r2
 8000ae4:	61cb      	str	r3, [r1, #28]
  }
}
 8000ae6:	bf00      	nop
 8000ae8:	370c      	adds	r7, #12
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bc80      	pop	{r7}
 8000aee:	4770      	bx	lr
 8000af0:	40021000 	.word	0x40021000

08000af4 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000af4:	b480      	push	{r7}
 8000af6:	b089      	sub	sp, #36	; 0x24
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
 8000afc:	6039      	str	r1, [r7, #0]
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
 8000afe:	2300      	movs	r3, #0
 8000b00:	61fb      	str	r3, [r7, #28]
 8000b02:	2300      	movs	r3, #0
 8000b04:	613b      	str	r3, [r7, #16]
 8000b06:	2300      	movs	r3, #0
 8000b08:	61bb      	str	r3, [r7, #24]
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0x00, pinmask = 0x00;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	617b      	str	r3, [r7, #20]
 8000b12:	2300      	movs	r3, #0
 8000b14:	60bb      	str	r3, [r7, #8]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
 8000b16:	683b      	ldr	r3, [r7, #0]
 8000b18:	78db      	ldrb	r3, [r3, #3]
 8000b1a:	f003 030f 	and.w	r3, r3, #15
 8000b1e:	61fb      	str	r3, [r7, #28]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
 8000b20:	683b      	ldr	r3, [r7, #0]
 8000b22:	78db      	ldrb	r3, [r3, #3]
 8000b24:	f003 0310 	and.w	r3, r3, #16
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d005      	beq.n	8000b38 <GPIO_Init+0x44>
  { 
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
 8000b2c:	683b      	ldr	r3, [r7, #0]
 8000b2e:	789b      	ldrb	r3, [r3, #2]
 8000b30:	461a      	mov	r2, r3
 8000b32:	69fb      	ldr	r3, [r7, #28]
 8000b34:	4313      	orrs	r3, r2
 8000b36:	61fb      	str	r3, [r7, #28]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
 8000b38:	683b      	ldr	r3, [r7, #0]
 8000b3a:	881b      	ldrh	r3, [r3, #0]
 8000b3c:	b2db      	uxtb	r3, r3
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d044      	beq.n	8000bcc <GPIO_Init+0xd8>
  {
    tmpreg = GPIOx->CRL;
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000b48:	2300      	movs	r3, #0
 8000b4a:	61bb      	str	r3, [r7, #24]
 8000b4c:	e038      	b.n	8000bc0 <GPIO_Init+0xcc>
    {
      pos = ((uint32_t)0x01) << pinpos;
 8000b4e:	2201      	movs	r2, #1
 8000b50:	69bb      	ldr	r3, [r7, #24]
 8000b52:	fa02 f303 	lsl.w	r3, r2, r3
 8000b56:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000b58:	683b      	ldr	r3, [r7, #0]
 8000b5a:	881b      	ldrh	r3, [r3, #0]
 8000b5c:	461a      	mov	r2, r3
 8000b5e:	68fb      	ldr	r3, [r7, #12]
 8000b60:	4013      	ands	r3, r2
 8000b62:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 8000b64:	693a      	ldr	r2, [r7, #16]
 8000b66:	68fb      	ldr	r3, [r7, #12]
 8000b68:	429a      	cmp	r2, r3
 8000b6a:	d126      	bne.n	8000bba <GPIO_Init+0xc6>
      {
        pos = pinpos << 2;
 8000b6c:	69bb      	ldr	r3, [r7, #24]
 8000b6e:	009b      	lsls	r3, r3, #2
 8000b70:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 8000b72:	220f      	movs	r2, #15
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	fa02 f303 	lsl.w	r3, r2, r3
 8000b7a:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 8000b7c:	68bb      	ldr	r3, [r7, #8]
 8000b7e:	43db      	mvns	r3, r3
 8000b80:	697a      	ldr	r2, [r7, #20]
 8000b82:	4013      	ands	r3, r2
 8000b84:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8000b86:	69fa      	ldr	r2, [r7, #28]
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b8e:	697a      	ldr	r2, [r7, #20]
 8000b90:	4313      	orrs	r3, r2
 8000b92:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8000b94:	683b      	ldr	r3, [r7, #0]
 8000b96:	78db      	ldrb	r3, [r3, #3]
 8000b98:	2b28      	cmp	r3, #40	; 0x28
 8000b9a:	d105      	bne.n	8000ba8 <GPIO_Init+0xb4>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 8000b9c:	2201      	movs	r2, #1
 8000b9e:	69bb      	ldr	r3, [r7, #24]
 8000ba0:	409a      	lsls	r2, r3
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	615a      	str	r2, [r3, #20]
 8000ba6:	e008      	b.n	8000bba <GPIO_Init+0xc6>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8000ba8:	683b      	ldr	r3, [r7, #0]
 8000baa:	78db      	ldrb	r3, [r3, #3]
 8000bac:	2b48      	cmp	r3, #72	; 0x48
 8000bae:	d104      	bne.n	8000bba <GPIO_Init+0xc6>
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 8000bb0:	2201      	movs	r2, #1
 8000bb2:	69bb      	ldr	r3, [r7, #24]
 8000bb4:	409a      	lsls	r2, r3
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	611a      	str	r2, [r3, #16]
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
  {
    tmpreg = GPIOx->CRL;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000bba:	69bb      	ldr	r3, [r7, #24]
 8000bbc:	3301      	adds	r3, #1
 8000bbe:	61bb      	str	r3, [r7, #24]
 8000bc0:	69bb      	ldr	r3, [r7, #24]
 8000bc2:	2b07      	cmp	r3, #7
 8000bc4:	d9c3      	bls.n	8000b4e <GPIO_Init+0x5a>
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	697a      	ldr	r2, [r7, #20]
 8000bca:	601a      	str	r2, [r3, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
 8000bcc:	683b      	ldr	r3, [r7, #0]
 8000bce:	881b      	ldrh	r3, [r3, #0]
 8000bd0:	2bff      	cmp	r3, #255	; 0xff
 8000bd2:	d946      	bls.n	8000c62 <GPIO_Init+0x16e>
  {
    tmpreg = GPIOx->CRH;
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	685b      	ldr	r3, [r3, #4]
 8000bd8:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000bda:	2300      	movs	r3, #0
 8000bdc:	61bb      	str	r3, [r7, #24]
 8000bde:	e03a      	b.n	8000c56 <GPIO_Init+0x162>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
 8000be0:	69bb      	ldr	r3, [r7, #24]
 8000be2:	3308      	adds	r3, #8
 8000be4:	2201      	movs	r2, #1
 8000be6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bea:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
 8000bec:	683b      	ldr	r3, [r7, #0]
 8000bee:	881b      	ldrh	r3, [r3, #0]
 8000bf0:	461a      	mov	r2, r3
 8000bf2:	68fb      	ldr	r3, [r7, #12]
 8000bf4:	4013      	ands	r3, r2
 8000bf6:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 8000bf8:	693a      	ldr	r2, [r7, #16]
 8000bfa:	68fb      	ldr	r3, [r7, #12]
 8000bfc:	429a      	cmp	r2, r3
 8000bfe:	d127      	bne.n	8000c50 <GPIO_Init+0x15c>
      {
        pos = pinpos << 2;
 8000c00:	69bb      	ldr	r3, [r7, #24]
 8000c02:	009b      	lsls	r3, r3, #2
 8000c04:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 8000c06:	220f      	movs	r2, #15
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c0e:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 8000c10:	68bb      	ldr	r3, [r7, #8]
 8000c12:	43db      	mvns	r3, r3
 8000c14:	697a      	ldr	r2, [r7, #20]
 8000c16:	4013      	ands	r3, r2
 8000c18:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8000c1a:	69fa      	ldr	r2, [r7, #28]
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c22:	697a      	ldr	r2, [r7, #20]
 8000c24:	4313      	orrs	r3, r2
 8000c26:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8000c28:	683b      	ldr	r3, [r7, #0]
 8000c2a:	78db      	ldrb	r3, [r3, #3]
 8000c2c:	2b28      	cmp	r3, #40	; 0x28
 8000c2e:	d105      	bne.n	8000c3c <GPIO_Init+0x148>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8000c30:	69bb      	ldr	r3, [r7, #24]
 8000c32:	3308      	adds	r3, #8
 8000c34:	2201      	movs	r2, #1
 8000c36:	409a      	lsls	r2, r3
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	615a      	str	r2, [r3, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8000c3c:	683b      	ldr	r3, [r7, #0]
 8000c3e:	78db      	ldrb	r3, [r3, #3]
 8000c40:	2b48      	cmp	r3, #72	; 0x48
 8000c42:	d105      	bne.n	8000c50 <GPIO_Init+0x15c>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8000c44:	69bb      	ldr	r3, [r7, #24]
 8000c46:	3308      	adds	r3, #8
 8000c48:	2201      	movs	r2, #1
 8000c4a:	409a      	lsls	r2, r3
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	611a      	str	r2, [r3, #16]
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
  {
    tmpreg = GPIOx->CRH;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000c50:	69bb      	ldr	r3, [r7, #24]
 8000c52:	3301      	adds	r3, #1
 8000c54:	61bb      	str	r3, [r7, #24]
 8000c56:	69bb      	ldr	r3, [r7, #24]
 8000c58:	2b07      	cmp	r3, #7
 8000c5a:	d9c1      	bls.n	8000be0 <GPIO_Init+0xec>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
        }
      }
    }
    GPIOx->CRH = tmpreg;
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	697a      	ldr	r2, [r7, #20]
 8000c60:	605a      	str	r2, [r3, #4]
  }
}
 8000c62:	bf00      	nop
 8000c64:	3724      	adds	r7, #36	; 0x24
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bc80      	pop	{r7}
 8000c6a:	4770      	bx	lr

08000c6c <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	b083      	sub	sp, #12
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
 8000c74:	460b      	mov	r3, r1
 8000c76:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BSRR = GPIO_Pin;
 8000c78:	887a      	ldrh	r2, [r7, #2]
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	611a      	str	r2, [r3, #16]
}
 8000c7e:	bf00      	nop
 8000c80:	370c      	adds	r7, #12
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bc80      	pop	{r7}
 8000c86:	4770      	bx	lr

08000c88 <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	b083      	sub	sp, #12
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
 8000c90:	460b      	mov	r3, r1
 8000c92:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BRR = GPIO_Pin;
 8000c94:	887a      	ldrh	r2, [r7, #2]
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	615a      	str	r2, [r3, #20]
}
 8000c9a:	bf00      	nop
 8000c9c:	370c      	adds	r7, #12
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bc80      	pop	{r7}
 8000ca2:	4770      	bx	lr

08000ca4 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	b087      	sub	sp, #28
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  uint32_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 8000cac:	2300      	movs	r3, #0
 8000cae:	617b      	str	r3, [r7, #20]
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	613b      	str	r3, [r7, #16]
 8000cb4:	230f      	movs	r3, #15
 8000cb6:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	78db      	ldrb	r3, [r3, #3]
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d03a      	beq.n	8000d36 <NVIC_Init+0x92>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8000cc0:	4b27      	ldr	r3, [pc, #156]	; (8000d60 <NVIC_Init+0xbc>)
 8000cc2:	68db      	ldr	r3, [r3, #12]
 8000cc4:	43db      	mvns	r3, r3
 8000cc6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000cca:	0a1b      	lsrs	r3, r3, #8
 8000ccc:	617b      	str	r3, [r7, #20]
    tmppre = (0x4 - tmppriority);
 8000cce:	697b      	ldr	r3, [r7, #20]
 8000cd0:	f1c3 0304 	rsb	r3, r3, #4
 8000cd4:	613b      	str	r3, [r7, #16]
    tmpsub = tmpsub >> tmppriority;
 8000cd6:	68fa      	ldr	r2, [r7, #12]
 8000cd8:	697b      	ldr	r3, [r7, #20]
 8000cda:	fa22 f303 	lsr.w	r3, r2, r3
 8000cde:	60fb      	str	r3, [r7, #12]

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	785b      	ldrb	r3, [r3, #1]
 8000ce4:	461a      	mov	r2, r3
 8000ce6:	693b      	ldr	r3, [r7, #16]
 8000ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cec:	617b      	str	r3, [r7, #20]
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	789b      	ldrb	r3, [r3, #2]
 8000cf2:	461a      	mov	r2, r3
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	4013      	ands	r3, r2
 8000cf8:	697a      	ldr	r2, [r7, #20]
 8000cfa:	4313      	orrs	r3, r2
 8000cfc:	617b      	str	r3, [r7, #20]
    tmppriority = tmppriority << 0x04;
 8000cfe:	697b      	ldr	r3, [r7, #20]
 8000d00:	011b      	lsls	r3, r3, #4
 8000d02:	617b      	str	r3, [r7, #20]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8000d04:	4a17      	ldr	r2, [pc, #92]	; (8000d64 <NVIC_Init+0xc0>)
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	781b      	ldrb	r3, [r3, #0]
 8000d0a:	6979      	ldr	r1, [r7, #20]
 8000d0c:	b2c9      	uxtb	r1, r1
 8000d0e:	4413      	add	r3, r2
 8000d10:	460a      	mov	r2, r1
 8000d12:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000d16:	4a13      	ldr	r2, [pc, #76]	; (8000d64 <NVIC_Init+0xc0>)
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	095b      	lsrs	r3, r3, #5
 8000d1e:	b2db      	uxtb	r3, r3
 8000d20:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	781b      	ldrb	r3, [r3, #0]
 8000d26:	f003 031f 	and.w	r3, r3, #31
 8000d2a:	2101      	movs	r1, #1
 8000d2c:	fa01 f303 	lsl.w	r3, r1, r3
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000d30:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8000d34:	e00f      	b.n	8000d56 <NVIC_Init+0xb2>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000d36:	490b      	ldr	r1, [pc, #44]	; (8000d64 <NVIC_Init+0xc0>)
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	781b      	ldrb	r3, [r3, #0]
 8000d3c:	095b      	lsrs	r3, r3, #5
 8000d3e:	b2db      	uxtb	r3, r3
 8000d40:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	781b      	ldrb	r3, [r3, #0]
 8000d46:	f003 031f 	and.w	r3, r3, #31
 8000d4a:	2201      	movs	r2, #1
 8000d4c:	409a      	lsls	r2, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000d4e:	f100 0320 	add.w	r3, r0, #32
 8000d52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8000d56:	bf00      	nop
 8000d58:	371c      	adds	r7, #28
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bc80      	pop	{r7}
 8000d5e:	4770      	bx	lr
 8000d60:	e000ed00 	.word	0xe000ed00
 8000d64:	e000e100 	.word	0xe000e100

08000d68 <__libc_init_array>:
 8000d68:	4b0e      	ldr	r3, [pc, #56]	; (8000da4 <__libc_init_array+0x3c>)
 8000d6a:	b570      	push	{r4, r5, r6, lr}
 8000d6c:	461e      	mov	r6, r3
 8000d6e:	4c0e      	ldr	r4, [pc, #56]	; (8000da8 <__libc_init_array+0x40>)
 8000d70:	2500      	movs	r5, #0
 8000d72:	1ae4      	subs	r4, r4, r3
 8000d74:	10a4      	asrs	r4, r4, #2
 8000d76:	42a5      	cmp	r5, r4
 8000d78:	d004      	beq.n	8000d84 <__libc_init_array+0x1c>
 8000d7a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000d7e:	4798      	blx	r3
 8000d80:	3501      	adds	r5, #1
 8000d82:	e7f8      	b.n	8000d76 <__libc_init_array+0xe>
 8000d84:	f000 f816 	bl	8000db4 <_init>
 8000d88:	4b08      	ldr	r3, [pc, #32]	; (8000dac <__libc_init_array+0x44>)
 8000d8a:	4c09      	ldr	r4, [pc, #36]	; (8000db0 <__libc_init_array+0x48>)
 8000d8c:	461e      	mov	r6, r3
 8000d8e:	1ae4      	subs	r4, r4, r3
 8000d90:	10a4      	asrs	r4, r4, #2
 8000d92:	2500      	movs	r5, #0
 8000d94:	42a5      	cmp	r5, r4
 8000d96:	d004      	beq.n	8000da2 <__libc_init_array+0x3a>
 8000d98:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000d9c:	4798      	blx	r3
 8000d9e:	3501      	adds	r5, #1
 8000da0:	e7f8      	b.n	8000d94 <__libc_init_array+0x2c>
 8000da2:	bd70      	pop	{r4, r5, r6, pc}
 8000da4:	08000dcc 	.word	0x08000dcc
 8000da8:	08000dcc 	.word	0x08000dcc
 8000dac:	08000dcc 	.word	0x08000dcc
 8000db0:	08000dd0 	.word	0x08000dd0

08000db4 <_init>:
 8000db4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000db6:	bf00      	nop
 8000db8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000dba:	bc08      	pop	{r3}
 8000dbc:	469e      	mov	lr, r3
 8000dbe:	4770      	bx	lr

08000dc0 <_fini>:
 8000dc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000dc2:	bf00      	nop
 8000dc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000dc6:	bc08      	pop	{r3}
 8000dc8:	469e      	mov	lr, r3
 8000dca:	4770      	bx	lr
